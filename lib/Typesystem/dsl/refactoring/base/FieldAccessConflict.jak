layer refactoring_base;

class FieldAccessConflict extends Conflict {

    private FieldAccess access;

    private FieldInfo field;

    public FieldAccessConflict(FieldAccess anAccess) {
        super();
        access = anAccess;
        field = anAccess.getField();

    }

    public String getDescription() {
        StringBuilder tmpDesc = new StringBuilder();
        tmpDesc.append("Reference to ");
        if (field instanceof Modified) {
            Modified tmpMod = (Modified) field;
            if (tmpMod.isPrivate()) {
                tmpDesc.append(ModifierInfo.PRIVATE + " ");
            } else if (tmpMod.isProtected()) {
                tmpDesc.append(ModifierInfo.PROTECTED + " ");
            } else if (tmpMod.isPackagePrivate()) {
                tmpDesc.append("package-private ");
            } else if (tmpMod.isPublic()) {
                tmpDesc.append(ModifierInfo.PUBLIC + " ");
            }
        }
        tmpDesc.append("field ");
        tmpDesc.append(field.getName());
        return tmpDesc.toString();
    }

    public int startLine() {
        return access.startLineNum();
    }

    public int endLine() {
        return access.endLineNum();
    }

    public String getFile() {
        return ((ClassInfoAst) TypesysUtil.getDeclaringClass(access))
                .getSrcFile().getAbsolutePath();
    }
}

layer refactoring_base;

class MethodCallConflict extends Conflict {

    private MethodInvocation call;

    private MethodInfo method;

    public MethodCallConflict(MethodInvocation aCall) {
        super();
        call = aCall;
        method = aCall.getMethod();
    }

    public String getDescription() {
        StringBuilder tmpDesc = new StringBuilder();
        tmpDesc.append("Call of ");
        if (method.isPrivate()) {
            tmpDesc.append(ModifierInfo.PRIVATE + " ");
        } else if (method.isProtected()) {
            tmpDesc.append(ModifierInfo.PROTECTED + " ");
        } else if (method.isPackagePrivate()) {
            tmpDesc.append("package-private ");
        } else if (method.isPublic()) {
            tmpDesc.append(ModifierInfo.PUBLIC + " ");
        }
        tmpDesc.append("method ");
        tmpDesc.append(method.signature());
        return tmpDesc.toString();
    }

    public int startLine() {
        return call.startLineNum();
    }

    public int endLine() {
        return call.endLineNum();
    }

    public String getFile() {
        return ((ClassInfoAst) TypesysUtil.getDeclaringClass(call))
                .getSrcFile().getAbsolutePath();
    }
}

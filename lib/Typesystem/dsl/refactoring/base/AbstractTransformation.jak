layer refactoring_base;

import java.util.ArrayList;
import java.util.List;

/**
 * Die Klasse stellt einige Basistransformationen bereit, die von
 * Spezialisierungen der Klasse genutzt werden können.
 * 
 * @layer<refactoring_base>
 * @author Stephan Klapproth
 * 
 */
abstract class AbstractTransformation implements Transformation {

	protected final TypeSystem ts;

    private List modifiedClasses;
    
    private Conflict[] conflicts;

	public AbstractTransformation(TypeSystem aTypeSystem){
		ts = aTypeSystem;
	}

    ClassInfo createOrGetExistingRef(ClassInfo aBase, String aLayer, 
            String aFile) throws TransformationException {
            
        CreateRefinement tmpCreateRef = new CreateRefinement(ts, aBase, aLayer, aFile);
        if (!tmpCreateRef.classExists()) {
            tmpCreateRef.transform();
        }
        return tmpCreateRef.getCreatedClass();
    }

    /**
     * Fügt die speicherbare Klasse <code>aClass</code> zur Liste der
     * modifizierten Klassen hinzu.
     * 
     * @param aClass
     *            eine modifizierte Klasse.
     * @see #modifiedClasses()
     */
    void addModifiedClass(Saveable aClass) {
        if (modifiedClasses == null) {
            modifiedClasses = new ArrayList();
        }

        if (!modifiedClasses.contains(aClass)) {
            modifiedClasses.add(aClass);
        }
    }

    public Saveable[] modifiedClasses() {
        return (Saveable[]) modifiedClasses
                .toArray(new Saveable[modifiedClasses.size()]);
    }
    
    abstract ConflictFactory getConflictFactory();
    
    public Conflict[] getConflicts() {
        if (conflicts == null) {
            conflicts = getConflictFactory().getConflicts();
        }
        return conflicts;
    }
}

layer refactoring_changemodifier;

import mixin.AST_Modifiers;
import mixin.AST_ModifiersElem;
import mixin.AstOptNode;
import mixin.ModAbstract;


/**
 * 
 * @layer<refactoring_changemodifier>
 * @author Stephan Kauschka
 * 
 */
refines class MethodInfoAst {

    // Sucht den Node AST_Modifiers und übergibt ihn.
    // Wenn dieser nicht existiert, wird er erstellt und in den AST eingebunden.
    public AST_Modifiers getAstModifiers() {

        AST_Modifiers tmpModifiers = getModifiersASTNode();
        if (tmpModifiers != null) {
            return tmpModifiers;
        }

        // Wenn der Knoten nicht vorhanden ist erstelle ihn und binde ihn ein
        AstOptNode tmpNode = (AstOptNode) astClassBodyDcl.arg[0];
        tmpNode.arg[0] = new AST_Modifiers();
        tmpNode.arg[0].up = tmpNode;
        tmpNode.arg[0].arg = new AstNode[] { null };
        return (AST_Modifiers) tmpNode.arg[0];
    }

    //Ändert nur die Sichtbarkeits-Modifier (und entfernt ggf. den abstract
    //Modifier, wenn auf private geändert wird)
    public void changeVisibility(ModifierInfo[] someModifier)
    throws TransformationException{

	changeVisibilityLocal(someModifier);

	boolean isPackagePrivate = true;
	boolean deleteAbstract = false;
	AST_Modifiers astModifiersNode = getAstModifiers();

	AstCursor cursor = new AstCursor();
	if(astModifiersNode.arg!=null && astModifiersNode.arg[0]!=null){
	    for (cursor.First(astModifiersNode); cursor.More(); cursor.PlusPlus()) {
		//Wenn schon ein Sichtbarkeits-Modifier vorhanden war
		if(ChangeModifier.isAccessModifier(cursor.node)){
		    isPackagePrivate=false;
		    String whitespace = ((AstToken)cursor.node.tok[0]).white_space;

		    //wenn auf packageprivate gewechselt werden soll
		    if(someModifier[0]==null){
			//nächste AstToken suchen um whitespace zu setzen
			AstCursor c = new AstCursor();
			AstNode start = cursor.node.up.right!= null ? cursor.node.up.right : astModifiersNode.up.right;
			for (c.First(start); c.More(); c.PlusPlus()) {
			    if(c.node.tok != null && c.node.tok[0]!=null){
				((AstToken)c.node.tok[0]).white_space = whitespace;
				break;
			    }
			}
			//Delete the Modifier
			ModifierFactory.deleteNode(cursor.node.up);
			return;
		    }
		    else
			if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC))){
			    cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"public",whitespace);
			    cursor.node.up.arg[0].up = cursor.node.up;
			}
			else
			    if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED))){
				cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"protected",whitespace);
				cursor.node.up.arg[0].up = cursor.node.up;
			    }
			    else
				if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
				    cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"private",whitespace);
				    cursor.node.up.arg[0].up = cursor.node.up;
				}
		}
		//Wenn die Methode abstract war und auf private geändert werden soll,
		//darf die Methode nicht abstract bleiben
		else if ( cursor.node instanceof ModAbstract && someModifier[0]!=null &&
			someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
		    deleteAbstract = true;
		}
	    }
	}

	if(deleteAbstract){
	    cursor = new AstCursor();
	    for (cursor.First(astModifiersNode); cursor.More(); cursor.PlusPlus()) {
		if ( cursor.node instanceof ModAbstract){
		    ModifierFactory.deleteNode(cursor.node.up);
		    break;
		}
	    }
	}

	//Wenn die Methode packageprivate war muss ein neuer AST_ModifiersElem-Knoten
	//erstellt werden
	if(isPackagePrivate){

	    //aber nur wenn nicht auf packageprivate gewechselt erden soll
	    if(someModifier[0] == null)
		return;

	    String whitespace = "";
	    //find next AstToken for whitespace
	    AstCursor c = new AstCursor();
	    for (c.First(astModifiersNode.up.up); c.More(); c.PlusPlus()) {
		if(c.node.tok != null && c.node.tok[0]!=null){
		    whitespace = ((AstToken)c.node.tok[0]).white_space;
		    ((AstToken)c.node.tok[0]).white_space = " ";
		    break;
		}
	    }

	    AST_ModifiersElem astModifiersElemNode = new AST_ModifiersElem();

	    if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC)))
		astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"public",whitespace)};
	    else if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED)))
		astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"protected",whitespace)};
	    else if(someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)))
		astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((Modified)((MethodInfoAst) this),"private",whitespace)};

	    astModifiersElemNode.arg[0].up = astModifiersElemNode;
	    ModifierFactory.insertAsFirst(astModifiersNode,astModifiersElemNode);
	}
    }

    //Ändert nur die Sichtbarkeits-Modifier des modifier-Felds des MethodInfoAst
    //(und entfernt ggf. den abstract-Modifier, wenn auf private geändert wird)
    private void changeVisibilityLocal(ModifierInfo[] someModifier)
    throws TransformationException {

	//Eine Methode kann nur einen Sichtbarkeits-Modifier besitzen
	if(someModifier.length!=1)
	    throw new TransformationException("only one access modifier is allowed.");

	//nur Sichtbarkeits-Modifier sind in dieser Methode zugelassen
	if(!ChangeModifier.isAccessModifier(someModifier[0]))
	    throw new TransformationException(someModifier[0] +
	    " is no access modifier.");

	//wenn es vorher keine Modifier gab
	if(modifier == null){
	    if(someModifier[0]!=null)
		modifier = someModifier;
	    return;
	}

	int removedModifier = 0;
	boolean isPackagePrivate = true;    		

	for(int j=0; j<modifier.length; j++)
	    if(modifier[j] != null)
		//Wenn schon ein Sichtbarkeits-Modifier vorhanden war
		if(ChangeModifier.isAccessModifier(modifier[j])){
		    modifier[j] = someModifier[0];
		    isPackagePrivate=false;
		    //Wenn die Methode abstract war und auf private geändert werden soll,
		    //darf die Methode nicht abstract bleiben
		} else if(someModifier[0]!=null && 
			someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)) &&
			modifier[j].equals(ModifierInfo.valueOf(ModifierInfo.ABSTRACT))){
		    modifier[j] = null;
		    removedModifier++;
		}

	if(removedModifier==0 && isPackagePrivate && someModifier[0]==null)
	    return;

	if(isPackagePrivate || removedModifier!=0){

	    int length;
	    if(isPackagePrivate)
		length = modifier.length+1-removedModifier;
	    else 
		length = modifier.length-removedModifier;

	    ModifierInfo[] tmpModifier = new ModifierInfo[length];

	    int i=0;
	    for(int j=0; j<modifier.length; j++){
		if(modifier[j]!=null)
		    tmpModifier[i++] = modifier[j];
	    }
	    if(isPackagePrivate)
		tmpModifier[i] = someModifier[0];

	    modifier = tmpModifier;
	}
    }

	public void changeModifier(ModifierInfo[] someModifier)
        throws TransformationException {}
}

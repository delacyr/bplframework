layer refactoring_changemodifier;

import mixin.AST_ModifiersElem;
import mixin.AstCursor;
import mixin.AstNode;
import mixin.AstOptNode;
import mixin.AstToken;
import mixin.FldVarDec;


/**
 * 
 * @layer<refactoring_changemodifier>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
refines class ModifiedFieldInfoAst  {


    //Sucht den Node AST_Modifiers und übergibt ihn.
    //Wenn dieser nicht existiert, wird er erstellt un in den AST eingebunden.
    private AST_Modifiers getAstModifiers(){
		//Suche den Knoten AST_Modifiers
        FldVarDec tmpFldVarDec = (FldVarDec) getVarDecl().up.up.up;
        if (tmpFldVarDec.getAST_Modifiers() != null) {
            return tmpFldVarDec.getAST_Modifiers();
        }

        //Wenn der Knoten nicht vorhanden ist erstelle ihn und binde ihn ein
    	AstOptNode tmpNode = (AstOptNode)tmpFldVarDec.arg[0];
    	tmpNode.arg[0] = new AST_Modifiers();
    	tmpNode.arg[0].up = tmpNode;
    	tmpNode.arg[0].arg = new AstNode[]{null};
    	return (AST_Modifiers)tmpNode.arg[0];
    }

    //Ändert nur die Sichtbarkeits-Modifier
    public void changeVisibility(ModifierInfo[] someModifier)
    	throws TransformationException{

		changeVisibilityLocal(someModifier);

		AST_Modifiers astModifiersNode = getAstModifiers();
		AstCursor cursor = new AstCursor();
		if (astModifiersNode.arg!=null && astModifiersNode.arg[0]!=null)
	    	for (cursor.First(astModifiersNode); cursor.More(); cursor.PlusPlus()) {
				//Wenn schon ein Sichtbarkeits-Modifier vorhanden war
				if (ChangeModifier.isAccessModifier(cursor.node)){
		    		String whitespace = ((AstToken)cursor.node.tok[0]).white_space;
		    		//wenn auf packageprivate gewechselt werden soll
		    		if (someModifier[0]==null){
						//nächste AstToken suchen um whitespace zu setzen
						AstCursor c = new AstCursor();
						AstNode start = cursor.node.up.right!= null ? cursor.node.up.right : astModifiersNode.up.right;
						for (c.First(start); c.More(); c.PlusPlus()) {
			    			if (c.node.tok != null && c.node.tok[0]!=null){
								((AstToken)c.node.tok[0]).white_space = whitespace;
								break;
			    			}
						}

						//Delete the Modifier
						ModifierFactory.deleteNode(cursor.node.up);
						return;
		    		}
		   			else{
						if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC))){
			    			cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((ModifiedFieldInfoAst) this),"public",whitespace);
			    			cursor.node.up.arg[0].up = cursor.node.up;
						}
						else
			    			if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED))){
								cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((ModifiedFieldInfoAst) this),"protected",whitespace);
								cursor.node.up.arg[0].up = cursor.node.up;
			    			}
			    			else
								if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
				    				cursor.node.up.arg[0] = ModifierFactory.getModifier((Modified)((ModifiedFieldInfoAst) this),"private",whitespace);
				    				cursor.node.up.arg[0].up = cursor.node.up;
								}

					return;
		    	}
			}
	    }

		//Wenn das Feld packageprivate war muss ein neuer AST_ModifiersElem-Knoten
		//erstellt werden

		//aber nur wenn nicht auf packageprivate gewechselt erden soll
		if (someModifier[0]==null)
	    	return;

		AST_ModifiersElem astModifiersElemNode = new AST_ModifiersElem();

		String whitespace = "";
		//nächste AstToken suchen um whitespace zu setzen
		AstCursor c = new AstCursor();
		for (c.First(astModifiersNode.up.up); c.More(); c.PlusPlus()) {
	    	if (!(c.node instanceof FldVarDec) && c.node.tok != null && c.node.tok[0]!=null){
				whitespace = ((AstToken)c.node.tok[0]).white_space;
				((AstToken)c.node.tok[0]).white_space = " ";
				break;
	    	}
		}

		if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC))){
	    	astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((ModifiedFieldInfoAst) this,"public",whitespace)};
		}
		else
	    	if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED))){
				astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((ModifiedFieldInfoAst) this,"protected",whitespace)};
	    	}
	    	else
				if (someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
		    		astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((ModifiedFieldInfoAst) this,"private",whitespace)};
				}

		astModifiersElemNode.arg[0].up = astModifiersElemNode;
		ModifierFactory.insertAsFirst(astModifiersNode,astModifiersElemNode);
    }

    //Ändert nur die Sichtbarkeits-Modifier des modifier-Felds des ModifiedFieldInfoAst
    private void changeVisibilityLocal(ModifierInfo[] someModifier)
        throws TransformationException {

        //Ein Feld kann nur einen Sichtbarkeits-Modifier besitzen
        if (someModifier.length!=1)
            throw new TransformationException("only one access modifier is allowed.");

        //nur Sichtbarkeits-Modifier sind in dieser Methode zugelassen
        if (!ChangeModifier.isAccessModifier(someModifier[0]))
            throw new TransformationException(someModifier[0] +
                        " is no access modifier.");

        //wenn es vorher keine Modifier gab
		if (modifier == null){
	    	if (someModifier[0]!=null)
				modifier = someModifier;
	    	return;
		}

        for (int j=0; j<modifier.length; j++)
            if (modifier[j] != null)
                //Wenn schon ein Sichtbarkeits-Modifier vorhanden war
                if (ChangeModifier.isAccessModifier(modifier[j])){
                    if (someModifier[0]!=null){
                		modifier[j] = someModifier[0];
                		return;
                    }
                    //wenn auf packageprivate gewechselt werden soll
                    else {
                		int length = modifier.length-1;
                    	ModifierInfo[] tmpModifier = new ModifierInfo[length];
                    	int l=0;
                    	for (int k=0; k<modifier.length; k++)
                    	    if (!ChangeModifier.isAccessModifier(modifier[k])){
                    		tmpModifier[l] = modifier[k];
                    		l++;
                    	}
                    	modifier = tmpModifier;
                    	return;
                    }
                } 

        //wenn vorher packageprivate war und der neue Modifier auch null
		if (someModifier[0]==null)
	    	return;

		int length = modifier.length+1;
		ModifierInfo[] tmpModifier = new ModifierInfo[length];

		for (int j=0; j<modifier.length; j++)
	    	tmpModifier[j+1] = modifier[j];
		tmpModifier[0] = someModifier[0];

		modifier = tmpModifier;
    }

    public void changeModifier(ModifierInfo[] someModifier)
        throws TransformationException {
    }

}
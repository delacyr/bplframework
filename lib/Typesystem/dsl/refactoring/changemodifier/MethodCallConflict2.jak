layer refactoring_changemodifier;


class MethodCallConflict2 extends Conflict {

    private MethodInvocation call;

    private MethodInfo method;

    private ModifierInfo modifier;

    public MethodCallConflict2(MethodInvocation aCall, ModifierInfo aModifier) {
        super();
        call = aCall;
        method = aCall.getMethod();
        modifier = aModifier;
    }

    public String getDescription() {
        StringBuilder tmpDesc = new StringBuilder();
        tmpDesc.append("After refactoring, call of ");
        tmpDesc.append(modifier + " ");
        tmpDesc.append("method ");
        tmpDesc.append(method.signature());
        return tmpDesc.toString();
    }

    public int startLine() {
        return call.startLineNum();
    }

    public int endLine() {
        return call.endLineNum();
    }

    public String getFile() {
        return ((ClassInfoAst) TypesysUtil.getDeclaringClass(call))
                .getSrcFile().getAbsolutePath();
    }

}
layer refactoring_changemodifier;


class ModificationConflict extends Conflict{

    private AstElement anElement;

    private ModifierInfo modifier;


    public ModificationConflict(AstElement aModifiedElement, ModifierInfo aModifier) {
        super();
        anElement = aModifiedElement;
        modifier = aModifier;
    }

    public String getDescription() {
        StringBuilder tmpDesc = new StringBuilder();
        tmpDesc.append("The ");

        for(int i=0; i<((Modified)anElement).getModifier().length; i++){
            tmpDesc.append(((Modified)anElement).getModifier()[i] + " ");
        }

        if (anElement instanceof ClassInfo)
            tmpDesc.append("class ");
        if (anElement instanceof MethodInfo)
            tmpDesc.append("method ");
        if (anElement instanceof FieldInfo)
            tmpDesc.append("field ");

        tmpDesc.append(((Named)anElement).getName());
        tmpDesc.append(" can not be changed to ");
        tmpDesc.append(modifier.toString() );
        tmpDesc.append(".");
        return tmpDesc.toString();
    }

    public int startLine() {
        return anElement.startLineNum();
    }

    public int endLine() {
        return anElement.endLineNum();
    }

    public String getFile() {
        return ((ClassInfoAst) TypesysUtil.getDeclaringClass((Scope)anElement))
                .getSrcFile().getAbsolutePath();
    }

}
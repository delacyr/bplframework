layer refactoring_changemodifier;


import java.util.ArrayList;
import java.util.List;


/**
 * @layer<refactoring_extrmethod>
 * @author Stephan Kauschka
 * 
 */
class ChangeModifierConflictFactory implements ConflictFactory {

    ChangeModifier transformation;
	boolean changeAll;

    ChangeModifierConflictFactory(ChangeModifier aTransformation, boolean inAllRefinements) {
        transformation = aTransformation;
        changeAll = inAllRefinements;
    }

    public Conflict[] getConflicts() {
		List tmpConflicts = new ArrayList();

		//alle durch eingeschränkte Sichtbarkeit entstehende Konflikte
		if (visibilityGetsRestricted()){

	    	//Methodenaufrufe aus anderen Klassen, die nicht mehr möglich sind
	    	tmpConflicts.addAll(getMethodCallsFromOtherClasses());

	    	//Feldzugriffe aus anderen Klassen, die nicht mehr möglich sind
	    	tmpConflicts.addAll(getFieldReferencesFromOtherClasses());

	    	//Abstrakte Methoden, die nicht mehr erreichbar sind
	    	tmpConflicts.addAll(getNotVisibleAbstractMethods());

		}

		return (Conflict[]) tmpConflicts.toArray(new Conflict[tmpConflicts.size()]);
    }

    private boolean visibilityGetsRestricted(){

		Modified elem = transformation.getModifiedElement();
		ModifierInfo[] mods = transformation.getModifier();

		if (elem.isPrivate())
	    	return false;
		if (mods[0] == null)
	    	return !elem.isPackagePrivate();
		if (elem.isPackagePrivate())
	    	if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)))
				return true;
		if (elem.isProtected())
	    	if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)))
				return true;
		if (elem.isPublic())
	    	if (!mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC)))
				return true;

		return false;
    }

    private List getMethodCallsFromOtherClasses() {
		List tmpConflicts = new ArrayList();
		Modified elem = transformation.getModifiedElement();
		ModifierInfo[] mods = transformation.getModifier();

		//Einschränkungen auf packageprivate ergeben keine Konflikte
		if (mods[0] == null)
	   		return tmpConflicts;

		//alle Methodenaufrufe aus anderen Klassen
		if (elem instanceof MethodInfo){

	    	//baseClass ist die Basisklasse der Klasse, in der die Methode definiert wird
	    	ClassInfo baseClass = (ClassInfo) ((MethodInfo) elem).getContext();
	    	if (changeAll)
	    		while (baseClass instanceof RefinementInfoAst){
					baseClass = baseClass.getSuperClass();
	    		}

	    	LayerInfo aLayer = (LayerInfo) baseClass.getContext();

	    	while (aLayer != null){
				ClassInfo[] classes = aLayer.getClasses();
				for (int i=0; i<classes.length; i++){

		    		//die Klasse, in der die Methode definiert wird, stellt kein Problem dar
		    		if (!classes[i].equals(((MethodInfo) elem).getContext())){

						//verfeinert classes[i] baseClass oder erbt sie von baseClass ?
						boolean isRefiningOrInheritingClass = false;
						ClassInfo superClass = classes[i].getSuperClass();
						while (superClass != null){
			    			if (superClass.getName().equals(baseClass.getName())){
								isRefiningOrInheritingClass = true;
								break;
			    			}
			    			superClass = superClass.getSuperClass();
						}

						MethodInvocation[] invos = ((ClassInfoAst) classes[i]).getMethodInvocations();
						for (int j=0; j<invos.length; j++){

							String contextName1 = "";
							String contextName2 = "";
							if (changeAll){
								contextName1 = invos[j].getMethod().getContext().getName();
								contextName2 = ((MethodInfo)elem).getContext().getName();
							}
							else{
								//auch den Layernamen vergleichen
								if ( invos[j].getMethod().getContext().getContext() != null )
							        contextName1 = invos[j].getMethod().getContext().getContext().getName()+invos[j].getMethod().getContext().getName();
							    else
							        contextName1 = invos[j].getMethod().getContext().getName();
								if ( ((MethodInfo)elem).getContext().getContext() != null )
								    contextName2 = ((MethodInfo)elem).getContext().getContext().getName()+((MethodInfo)elem).getContext().getName();
								else 
								    contextName2 = ((MethodInfo)elem).getContext().getName();
							}

			    			if (invos[j].getMethod().signature().equals(((MethodInfo)elem).signature()) &&
			    			    contextName1.equals(contextName2)){

								//wenn auf protected eingeschränkt wird, stellen nur Aufrufe aus
								//nichtverfeinernenden und nichterbenden Klassen ein Problem dar
								if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED))){
				    				if (!isRefiningOrInheritingClass){
										tmpConflicts.add(new MethodCallConflict2(invos[j], mods[0]));
				    				}
								}
								//wenn auf private eingeschränkt wird, stellen alle Aufrufe aus
								//anderen Klassen ein Problem dar
								if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
				    				tmpConflicts.add(new MethodCallConflict2(invos[j], mods[0]));
								}
			    			}
						}
		    		}
				}

				aLayer = aLayer.getNext();
	    	}
		}

		return tmpConflicts;
    }

    private List getFieldReferencesFromOtherClasses() {
		List tmpConflicts = new ArrayList();
		Modified elem = transformation.getModifiedElement();
		ModifierInfo[] mods = transformation.getModifier();

		//Einschränkungen auf packageprivate ergeben keine Konflikte
		if (mods[0] == null)
	    	return tmpConflicts;

		//alle Feldzugriffe aus anderen Klassen
		if (elem instanceof FieldInfo){

	    	//baseClass ist die Basisklasse der Klasse, in der das Feld definiert wird
	    	ClassInfo baseClass = (ClassInfo) ((FieldInfo) elem).getContext();
	    	if (changeAll)
	    		while (baseClass instanceof RefinementInfoAst){
					baseClass = baseClass.getSuperClass();
	    		}

	    	LayerInfo aLayer = (LayerInfo) baseClass.getContext();

	    	while (aLayer != null){
				ClassInfo[] classes = aLayer.getClasses();
				for (int i=0; i<classes.length; i++){

		    		//die Klasse, in der das Feld definiert wird, stellt kein Problem dar
		    		if (!classes[i].equals(((FieldInfo) elem).getContext())){

						//verfeinert classes[i] baseClass oder erbt sie von baseClass ?
						boolean isRefiningOrInheritingClass = false;
						ClassInfo superClass = classes[i].getSuperClass();
						while (superClass != null){
			    			if (superClass.getName().equals(baseClass.getName())){
								isRefiningOrInheritingClass = true;
								break;
			    			}
			    			superClass = superClass.getSuperClass();
						}

						FieldAccess[] access = ((ClassInfoAst) classes[i]).getFieldAccesses();
						for (int j=0; j<access.length; j++){

							String contextName1 = "";
							String contextName2 = "";
							if (changeAll){
								contextName1 = access[j].getField().getContext().getName();
								contextName2 = ((FieldInfo)elem).getContext().getName();
							}
							else{
								//auch den Layernamen vergleichen
								if ( access[j].getField().getContext().getContext() != null )
									contextName1 = access[j].getField().getContext().getContext().getName()+access[j].getField().getContext().getFullName();
								else
									contextName1 = access[j].getField().getContext().getFullName();
								if ( ((FieldInfo)elem).getContext().getContext() != null )
									contextName2 = ((FieldInfo)elem).getContext().getContext().getName()+((FieldInfo)elem).getContext().getFullName();
								else
									contextName2 = ((FieldInfo)elem).getContext().getFullName();
							}

			    			if (access[j].getField().getName().equals(((FieldInfo)elem).getName()) &&
			    			    access[j].getField().getType().equals(((FieldInfo)elem).getType()) &&
			    			    contextName1.equals(contextName2)){

								//wenn auf protected eingeschränkt wird, stellen nur Zugriffe aus
								//nichtverfeinernenden und nichterbenden Klassen ein Problem dar
								if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED))){
				    				if (!isRefiningOrInheritingClass){
										tmpConflicts.add(new FieldAccessConflict2(access[j], mods[0]));
				    				}
								}
								//wenn auf private eingeschränkt wird, stellen alle Zugriffe aus
								//anderen Klassen ein Problem dar
								if (mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE))){
				    				tmpConflicts.add(new FieldAccessConflict2(access[j], mods[0]));
								}
			    			}
						}
		   			}
				}

				aLayer = aLayer.getNext();
	    	}
		}

		return tmpConflicts;
    }

    private List getNotVisibleAbstractMethods(){
		List tmpConflicts = new ArrayList();
		Modified elem = transformation.getModifiedElement();
		if (!(elem instanceof MethodInfoAst))
			return tmpConflicts;

		ModifierInfo[] mods = transformation.getModifier();

		//baseClass ist die Basisklasse der Klasse, in der das Feld oder die Methode 
		//definiert wird
		ClassInfo baseClass = (ClassInfo) ((Declaration) elem).getContext();
		if (changeAll)
			while (baseClass instanceof RefinementInfoAst){
	    		baseClass = baseClass.getSuperClass();
			}
		LayerInfo aLayer = (LayerInfo) baseClass.getContext();

		ClassInfo tmpClass = baseClass;
		while ( aLayer != null ){

	    	//find abstract method-instance of elem in tmpClass
			MethodInfoAst method = (MethodInfoAst) elem;
			MethodInfo tmpMeth = tmpClass.findMethod(method.getName(),method.getParameters());
			if (tmpMeth != null && tmpMeth.getContext() == tmpClass){
		    	if (isAbstract(tmpMeth) && mods[0] != null && mods[0].equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)))
					tmpConflicts.add(new ModificationConflict((MethodInfoAst)tmpMeth, mods[0]));
			}

			if (!changeAll) return tmpConflicts;

	    	//find next layer with a refining class of baseClass
	    	aLayer = aLayer.getNext();
	    	if ( aLayer != null ) tmpClass = aLayer.findClass(baseClass.getName());
	    	while (aLayer != null && tmpClass.getContext() != aLayer ){
				aLayer = aLayer.getNext();
				if ( aLayer != null ) tmpClass = aLayer.findClass(baseClass.getName());
	    	}
		}

		return tmpConflicts;
    }

    private boolean isAbstract(Modified elem){
		ModifierInfo[] mods = null;

		if (elem instanceof ModifiedFieldInfoAst)
	    	mods = ((ModifiedFieldInfoAst) elem).getModifier();
		if (elem instanceof MethodInfoAst)
	    	mods = ((MethodInfoAst) elem).getModifier();

		if (mods != null && mods.length > 0){
	    	for (int i=0; i<mods.length; i++){
				if (mods[i].equals(ModifierInfo.valueOf(ModifierInfo.ABSTRACT)))
		    		return true;
	    	}
		}

		return false;
    }

}
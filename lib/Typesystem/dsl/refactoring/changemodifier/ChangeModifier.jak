layer refactoring_changemodifier;

import mixin.AstNode;
import mixin.ModPrivate;
import mixin.ModProtected;
import mixin.ModPublic;
import java.util.ArrayList;


/**
 * Modifikatoren einer Deklaration ändern.
 * 
 * @layer<refactoring_changemodifier>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
public class ChangeModifier implements Transformation {

	private Conflict[] conflicts;

    private Modified modifiedElem;
    
    private ModifierInfo[] modifier;
    
    private ArrayList modifiedClasses = new ArrayList();
    
    private boolean changeAll;

    public ChangeModifier(Modified aModifiedElem, ModifierInfo[] someNewModifier, boolean changeInAllRefinements) {
        modifiedElem = aModifiedElem;
        modifier = someNewModifier;
        changeAll = changeInAllRefinements;
    }

    public Modified getModifiedElement(){
		return modifiedElem;
    }

    public ModifierInfo[] getModifier(){
		return modifier;
    }

    public void transform() throws TransformationException {
    	if (modifiedElem instanceof ClassInfoAst) {
	    	((ClassInfoAst) modifiedElem).changeModifier(modifier);
	    	modifiedClasses.add(modifiedElem);
    	} else if (modifiedElem instanceof MethodInfoAst) {
    		((MethodInfoAst) modifiedElem).changeModifier(modifier);
    		modifiedClasses.add(TypesysUtil.getDeclaringClass((Scope) modifiedElem));
    	} else if (modifiedElem instanceof ModifiedFieldInfoAst) {
    		((ModifiedFieldInfoAst) modifiedElem).changeModifier(modifier);
    		modifiedClasses.add(TypesysUtil.getDeclaringClass((Declaration) modifiedElem));
    	} else {
    		throw new TransformationException("Unsupported modified element.");
    	}
    }

	public void changeVisibility() throws TransformationException{

		if (modifier.length!=1)
	    	throw new TransformationException("only one access modifier is allowed.");

		if (!isAccessModifier(modifier[0]))
	    	throw new TransformationException(modifier[0] +
		    	" is no access modifier.");

		ArrayList modifiedElements = getModifiedElementsFromAllRefinements(modifiedElem);

		if (modifiedElem instanceof ClassInfoAst) {
			for (int i=0; i<modifiedElements.size(); i++){
	    		((ClassInfoAst) modifiedElements.get(i)).changeVisibility(modifier);
	    		modifiedClasses.add(modifiedElements.get(i));
	    	}
		} else if (modifiedElem instanceof MethodInfoAst) {
			for (int i=0; i<modifiedElements.size(); i++){
	    		((MethodInfoAst) modifiedElements.get(i)).changeVisibility(modifier);
	    		modifiedClasses.add(TypesysUtil.getDeclaringClass((Scope) modifiedElements.get(i)));
	    	}
		} else if (modifiedElem instanceof ModifiedFieldInfoAst) {
			for (int i=0; i<modifiedElements.size(); i++){
	    		((ModifiedFieldInfoAst) modifiedElements.get(i)).changeVisibility(modifier);
	    		modifiedClasses.add(TypesysUtil.getDeclaringClass((Declaration) modifiedElements.get(i)));
	    	}
		} else {
	    	throw new TransformationException(modifiedElem + " - Unsupported modified element.");
		}

    }

    public static boolean isAccessModifier(ModifierInfo aModifier){
		return (aModifier==null ||
				aModifier.equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC)) ||
				aModifier.equals(ModifierInfo.valueOf(ModifierInfo.PROTECTED)) ||
				aModifier.equals(ModifierInfo.valueOf(ModifierInfo.PRIVATE)));
    }

    public static boolean isAccessModifier(AstNode aModifier){
		return (aModifier == null || aModifier instanceof ModPrivate   ||
				aModifier instanceof ModProtected ||
				aModifier instanceof ModPublic);
    }

    public Conflict[] getConflicts() {
		if ( conflicts == null ) {
	    	ConflictFactory cf = new ChangeModifierConflictFactory( this, changeAll );
	    	conflicts = cf.getConflicts();
		}
		return conflicts;
    }

    public Saveable[] modifiedClasses() {
    	Saveable[] save = new Saveable[modifiedClasses.size()];
    	return (Saveable[]) modifiedClasses.toArray(save);
    }

	private ArrayList getModifiedElementsFromAllRefinements (Modified element) throws TransformationException{
		ArrayList list = new ArrayList();

		if (changeAll){
			if (!((element instanceof Scope) || (element instanceof Declaration)))
				throw new TransformationException(modifiedElem + " - Unsupported modified element.");

			Scope scope = null;
			if (element instanceof Scope)
				scope = (Scope) element;
			else
				scope = ((Declaration) element).getContext();

			while (!(scope instanceof ClassInfo))
				scope = scope.getContext();

		   	//baseClass ist die Basisklasse des modifizierten Elements
	    	ClassInfo baseClass = (ClassInfo) scope;
	    	while (baseClass instanceof RefinementInfoAst)
				baseClass = baseClass.getSuperClass();

			LayerInfo aLayer = (LayerInfo) baseClass.getContext();

	    	while ( aLayer != null ){
				ClassInfo clazz = aLayer.findClass(baseClass.getName());
				if ( clazz != null ){
					if (element instanceof ClassInfo)
						list.add(clazz);
					if (element instanceof MethodInfo){
						MethodInfo method = clazz.findMethod(((MethodInfo)element).getName(),((MethodInfo)element).getParameters());
						if ( method != null && method.getContext().equals(clazz))
							list.add(method);
					}
					if (element instanceof FieldInfo){
						FieldInfo field = clazz.getField(((FieldInfo)element).getName());
						if ( field != null && field.getContext().equals(clazz))
							list.add(field);
					}
				}
				aLayer = aLayer.getNext();
	    	}
		}
		else
			list.add(element);

		return list;
	}

}
layer refactoring_changemodifier;

import mixin.AST_Modifiers;
import mixin.AST_ModifiersElem;
import mixin.ModPublic;


/**
 * 
 * @layer<refactoring_changemodifier>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
refines class ClassInfoAst {

    //Sucht den Node AST_Modifiers und übergibt ihn.
    //Wenn dieser nicht existiert, wird er erstellt und in den AST eingebunden.
    public AST_Modifiers getAstModifiers(){

	AstNode tmpNode = getAstNode();

	//Suche den Knoten ModTypeDecl
	AstCursor c = new AstCursor();
	for (c.First(tmpNode); c.More(); c.PlusPlus()) {
	    if(c.node instanceof ModTypeDecl){
		tmpNode = c.node;
		break;
	    }
	}

	//Suche den Knoten AST_Modifiers
	if(tmpNode.arg[0].arg != null && tmpNode.arg[0].arg[0]!=null)
	    return (AST_Modifiers)tmpNode.arg[0].arg[0];

	//Wenn der Knoten nicht vorhanden ist erstelle ihn und binde ihn ein
	tmpNode = tmpNode.arg[0];
	tmpNode.arg = new AstNode[]{new AST_Modifiers()};
	tmpNode.arg[0].up = tmpNode;
	tmpNode.arg[0].arg = new AstNode[]{null};
	return (AST_Modifiers)tmpNode.arg[0];
    }

    //Ändert nur die Sichtbarkeits-Modifier
    public void changeVisibility(ModifierInfo[] someModifier)
    throws TransformationException{

	changeVisibilityLocal(someModifier);

	AST_Modifiers astModifiersNode = getAstModifiers();
	AstCursor cursor = new AstCursor();
	if(astModifiersNode.arg!=null && astModifiersNode.arg[0]!=null)
	    for (cursor.First(astModifiersNode); cursor.More(); cursor.PlusPlus()) {
		//Wenn schon ein Public-Modifier vorhanden war
		if(cursor.node instanceof ModPublic){
		    //wenn auf packageprivate gewechselt werden soll
		    if(someModifier[0]==null){
			String whitespace = ((AstToken)cursor.node.tok[0]).white_space;

			//nächste AstToken suchen um whitespace zu setzen
			AstCursor c = new AstCursor();
			AstNode start = cursor.node.up.right!= null ? cursor.node.up.right : astModifiersNode.up.right;
			for (c.First(start); c.More(); c.PlusPlus()) {
			    if(c.node.tok != null && c.node.tok[0]!=null){
				((AstToken)c.node.tok[0]).white_space = whitespace;
				break;
			    }
			}

			//Delete the Modifier
			ModifierFactory.deleteNode(cursor.node.up);
			return;
		    }
		    //wenn public bleiben soll
		    return;
		}
	    }

	//Wenn die Klasse packageprivate war muss ein neuer AST_ModifiersElem-Knoten
	//erstellt werden

	//aber nur wenn nicht auf packageprivate gewechselt erden soll
	if(someModifier[0]==null)
	    return;

	AST_ModifiersElem astModifiersElemNode = new AST_ModifiersElem();

	String whitespace = "";
	//nächste AstToken suchen um whitespace zu setzen
	AstCursor c = new AstCursor();
	for (c.First(astModifiersNode.up.up); c.More(); c.PlusPlus()) {
	    if(c.node.tok != null && c.node.tok[0]!=null){
		whitespace = ((AstToken)c.node.tok[0]).white_space;
		((AstToken)c.node.tok[0]).white_space = " ";
		break;
	    }
	}

	astModifiersElemNode.arg = new AstNode[] {ModifierFactory.getModifier((Modified)((ClassInfoAst) ((ClassInfoAst) this)),"public",whitespace)};
	astModifiersElemNode.arg[0].up = astModifiersElemNode;

	ModifierFactory.insertAsFirst(astModifiersNode,astModifiersElemNode);
    }

    //Ändert nur die Sichtbarkeits-Modifier des modifier-Felds des ClassInfoAst
    private void changeVisibilityLocal(ModifierInfo[] someModifier)
    throws TransformationException {

	//Eine Klasse kann nur einen Sichtbarkeits-Modifier besitzen
	if(someModifier.length!=1)
	    throw new TransformationException("only one access modifier is allowed.");

	//nur Public-Modifier und packageprivate sind in dieser Methode zugelassen
	if(someModifier[0]!=null && !someModifier[0].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC)))
	    throw new TransformationException(someModifier[0] +
	    " is no public modifier.");

	//wenn es vorher keine Modifier gab
	if(modifier == null){
	    if(someModifier[0]!=null)
		modifier = someModifier;
	    return;
	}

	for(int j=0; j<modifier.length; j++)
	    //Wenn schon ein Sichtbarkeits-Modifier vorhanden war
	    if(modifier[j].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC))){
		//Wenn der neue Modifier auch public ist
		if(someModifier[0]!=null)
		    return;
		else{
		    //wenn auf packageprivate gewechselt werden soll
		    int length = modifier.length-1;
		    ModifierInfo[] tmpModifier = new ModifierInfo[length];
		    int l=0;
		    for(int k=0; k<modifier.length; k++)
			if(!modifier[k].equals(ModifierInfo.valueOf(ModifierInfo.PUBLIC))){
			    tmpModifier[l] = modifier[k];
			    l++;
			}
		    modifier = tmpModifier;
		    return;
		}
	    }

	//wenn vorher packageprivate war und der neue Modifier auch null
	if(someModifier[0]==null)
	    return;

	int length = modifier.length+1;
	ModifierInfo[] tmpModifier = new ModifierInfo[length];

	for(int j=0; j<modifier.length; j++)
	    tmpModifier[j+1] = modifier[j];
	tmpModifier[0] = someModifier[0];

	modifier = tmpModifier;
    }


    public void changeModifier(ModifierInfo[] someModifier)
    	throws TransformationException {
    }

}

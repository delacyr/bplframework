layer refactoring_changemodifier;

import mixin.AstNode;
import mixin.AstToken;
import mixin.Modifier;
import mixin.ModPrivate;
import mixin.ModProtected;
import mixin.ModPublic;


public class ModifierFactory{

    public static Modifier getModifier(Modified modified, String modifier){

	if (modifier.equalsIgnoreCase("public"))
	    return new ModPublic().setParms(new AstToken().setParms("\t","public",((AstElement)modified).startLineNum()));

	if (modifier.equalsIgnoreCase("protected"))
	    return new ModProtected().setParms(new AstToken().setParms("\t","protected",((AstElement)modified).startLineNum()));

	if (modifier.equalsIgnoreCase("private"))
	    return new ModPrivate().setParms(new AstToken().setParms("\t","private",((AstElement)modified).startLineNum()));

	return null;
    }

    public static Modifier getModifier(Modified modified, String modifier, String whitespace){

	if (modifier.equalsIgnoreCase("public"))
	    return new ModPublic().setParms(new AstToken().setParms(whitespace,"public",((AstElement)modified).startLineNum()));

	if (modifier.equalsIgnoreCase("protected"))
	    return new ModProtected().setParms(new AstToken().setParms(whitespace,"protected",((AstElement)modified).startLineNum()));

	if (modifier.equalsIgnoreCase("private"))
	    return new ModPrivate().setParms(new AstToken().setParms(whitespace,"private",((AstElement)modified).startLineNum()));

	return null;
    }

    public static void deleteNode(AstNode node){
	if(node.right==null && node.left==null){
	    node.up.arg = new AstNode[]{null};
	    return;
	}

	if(node.left==null){
	    if(contains(node.up.arg, node)){
		if(node.up.arg.length==1){
		    node.up.arg[0]=node.right;
		    node.right.left = null;
		    return;
		}
		AstNode[] newArgs = new AstNode[node.up.arg.length-1];
		int j=0;
		for(int i=0; i<node.up.arg.length; i++)
		    if(!node.equals(node.up.arg[i]))
			newArgs[j++]=node.up.arg[i];
		    else{
			if(node.up.arg[i].left!=null) 
			    node.up.arg[i].left.right = node.up.arg[i].right;
			if(node.up.arg[i].right!=null)
			    node.up.arg[i].right.left = node.up.arg[i].left;
		    }
		node.up.arg = newArgs;
		return;
	    }

	    node.right.left = null;
	    return;
	}

	if(node.right==null){
	    if(contains(node.up.arg, node)){
		if(node.up.arg.length==1){
		    node.up.arg[0]=node.left;
		    node.left.right = null;
		    return;
		}
		AstNode[] newArgs = new AstNode[node.up.arg.length-1];
		int j=0;
		for(int i=0; i<node.up.arg.length; i++)
		    if(!node.equals(node.up.arg[i]))
			newArgs[j++]=node.up.arg[i];
		    else{
			if(node.up.arg[i].left!=null) 
			    node.up.arg[i].left.right = node.up.arg[i].right;
			if(node.up.arg[i].right!=null)
			    node.up.arg[i].right.left = node.up.arg[i].left;
		    }
		node.up.arg = newArgs;
		return;
	    }

	    node.left.right = null;
	    return;
	}

	if(contains(node.up.arg, node)){
	    if(node.up.arg.length==1){
		node.up.arg[0]=node.left;
		node.left.right = null;
		return;
	    }
	    AstNode[] newArgs = new AstNode[node.up.arg.length-1];
	    int j=0;
	    for(int i=0; i<node.up.arg.length; i++)
		if(!node.equals(node.up.arg[i]))
		    newArgs[j++]=node.up.arg[i];
		else{
		    if(node.up.arg[i].left!=null) 
			node.up.arg[i].left.right = node.up.arg[i].right;
		    if(node.up.arg[i].right!=null)
			node.up.arg[i].right.left = node.up.arg[i].left;
		}
	    node.up.arg = newArgs;
	    return;
	}

	node.left.right = node.right;
	node.right.left = node.left;
	return;
    }

    public static void insertAsFirst(AstNode parentt, AstNode node){

	node.up = parentt;

	if(parentt.arg!=null)
	    node.right = parentt.arg[0];
	if(node.right!=null)
	    node.right.left = node;

	if(parentt.arg==null){
	    parentt.arg = new AstNode[]{node};
	}
	else
	    if(parentt.arg.length==1 && parentt.arg[0]==null){
		parentt.arg[0] = node;
	    }
	    else{
		AstNode[] newArgs = new AstNode[parentt.arg.length+1];
		newArgs[0]=node;
		for(int i=1; i<newArgs.length; i++)
		    newArgs[i]=parentt.arg[i-1];
		parentt.arg = newArgs;
	    }
    }

    private static boolean contains(Object[] array, Object o){
	for(int i=0; i<array.length; i++){
	    if(array[i] == o) return true;
	    if(array[i]!=null && array[i].equals(o)) return true;
	}

	return false;
    }

}

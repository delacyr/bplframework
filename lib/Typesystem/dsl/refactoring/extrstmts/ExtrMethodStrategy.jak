layer refactoring_extrstmts;

import java.io.File;

abstract class ExtrMethodStrategy implements ExtrStmtsStrategy {

    ClassInfoAst srcClazz;
    BlockScope blockOfStmts;
    int start, end;

    protected String destinationLayer;
    protected String destinationFile;

    RefinementInfoAst destinationRef;

    public ExtrMethodStrategy(BlockScope aBlockOfStmts, int aStartLine,
            int anEndLine, String aDestinationLayer, String aDestinationFolder) {
        blockOfStmts = aBlockOfStmts;
        srcClazz = (ClassInfoAst) TypesysUtil
                .getDeclaringClass((Scope) blockOfStmts);
        start = aStartLine;
        end = anEndLine;
        destinationLayer = aDestinationLayer;
        destinationFile = aDestinationFolder + RefUtil.FILE_SEP + srcClazz.getName()
                + RefUtil.FILE_SUF;
    }

    public void transform() throws TransformationException {
        createRefinement();
        createMethods();
        moveStatements();
    }
    
    abstract MethodInfoAst destinationMethod();

    private void moveStatements() {
        ((BlockCScope) blockOfStmts).move(start, end,
                getBlockOfMethod(destinationMethod()));
    }


    abstract void createMethods() throws TransformationException;

    private void createRefinement() throws TransformationException {
        // existiert vll. bereits?
        ClassInfo tmpClass = TypesysUtil.getTypeSystem(srcClazz).getClazz(new File(destinationFile));
        if ( tmpClass != null && !(tmpClass instanceof RefinementInfoAst))
            throw new TransformationException("The destination-class is no refinement.");

        destinationRef = (RefinementInfoAst) tmpClass;

        // wenn nicht, Verfeinerung erzeugen
        if (destinationRef == null) {
            CreateRefinement tmpCreateRef = new CreateRefinement(TypesysUtil.getTypeSystem(srcClazz),srcClazz,
                    destinationLayer, destinationFile);
            tmpCreateRef.transform();
            destinationRef = (RefinementInfoAst) tmpCreateRef.getCreatedClass();
        }
    }

    BlockCScope getBlockOfMethod(MethodInfoAst aMethod) {
        if (aMethod.getBlockScopes().length > 0
                && aMethod.getBlockScopes()[0] instanceof BlockCScope) {
            return (BlockCScope) aMethod.getBlockScopes()[0];
        }
        return null;
    }

    public Conflict[] getConflicts() {
        return new Conflict[] {};
    }

    public Saveable[] modifiedClasses() {
        return new Saveable[] { srcClazz, destinationRef };
    }
}

layer refactoring_extrstmts;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import mixin.AST_Stmt;
import mixin.AsgExpr;
import mixin.AstCursor;
import mixin.AstNode;
import mixin.BlockC;
import mixin.BlockStatement;
import mixin.ConditionalExpression;

// Je nach Anzahl referenzierter und geänderter lokaler Variablen 
// und der Position der Statements ist unterschiedliche 
// Vorgehensweise erforderlich. 
// Die Factory entscheidet über die Vorgehensweise.
class ExtrStmtsStrategyFactory {

    private BlockScope blockOfStmts;
    private int start, end;
    private String destinationLayer, destinationFolder;

    public ExtrStmtsStrategyFactory(BlockScope aBlockOfStmts, int aStart,
            int anEnd, String aDestinationLayer, String aDestinationFolder) {
        blockOfStmts = aBlockOfStmts;
        start = aStart;
        end = anEnd;
        destinationLayer = aDestinationLayer;
        destinationFolder = aDestinationFolder;
    }

    public ExtrStmtsStrategy getStrategy() {
        FieldInfo[] tmpFields = getLocalVarsChangedInAndReferencedAfterStmts();

        if (tmpFields.length > 1) {
            boolean needsHookInMethodObj = inTheMiddle();
            MethodObjStrategy strategy = new MethodObjStrategy(blockOfStmts, start, end,
                    destinationLayer, destinationFolder);
            strategy.setNeedsHook(needsHookInMethodObj);
            return strategy;
        } else if (needHook()) {
            return new ExtrToHookStrategy(blockOfStmts, start, end,
                    destinationLayer, destinationFolder,
                    (tmpFields.length == 1) ? tmpFields[0] : null,
                    getReferencedLocalVarsInStmts());
        } else {
            return new ExtrToMethodRefStrategy(blockOfStmts, start, end,
                    destinationLayer, destinationFolder, first());
        }
    }

    // alle lokalen Variablen, die von vorhergehenden Statements geändert werden
    private FieldInfo[] getChangedLocalVarsBeforeStmts() {
        Set tmpFields = new HashSet();
        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            if (!((FieldInfoAst) tmpField).isLocalVar()
                    || !isAssignment(tmpAccess)) {
                continue;
            }
            // Zuweisung vor den zu extrahierenden Statements?
            if (tmpAccess.startLineNum() >= start) {
                continue;
            }
            tmpFields.add(tmpField);
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    // alle lokalen Variablen, die in vorherigen Statements geändert und von den
    // zu extrahierenden Statements referenziert werden
    private FieldInfo[] getChangedBeforeAndReferencedInStmts() {
        Set tmpFields = new HashSet(Arrays
                .asList(getReferencedLocalVarsInStmts()));
        tmpFields.retainAll(Arrays.asList(getChangedLocalVarsBeforeStmts()));
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    // referenzieren die Statements vorher geänderte lokale Variablen?
    private boolean referencesChangedLocalVars() {
        return getChangedBeforeAndReferencedInStmts().length > 0;
    }

    // alle lokalen Variablen, die innerhalb der Statements geändert werden
    private FieldInfo[] getChangedLocalVarsInStmts() {
        Set tmpFields = new HashSet();
        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            if (!((FieldInfoAst) tmpField).isLocalVar()
                    || !isAssignment(tmpAccess)) {
                continue;
            }
            // Zuweisung außerhalb der zu extrahierenden Statements?
            if (tmpAccess.startLineNum() < start
                    || tmpAccess.startLineNum() > end) {
                continue;
            }
            tmpFields.add(tmpField);
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    private boolean isAssignment(FieldAccess aFieldAccess) {
        AstNode tmpNode = aFieldAccess.getAstNode();
        // handelt es sich um AsgExpr?
        while (!(tmpNode == null || tmpNode instanceof BlockStatement)) {
            tmpNode = tmpNode.up;
            if (isCondExprOfAsgExpr(tmpNode)) {
                return true;
            }
        }
        return false;
    }

    // ist aNode ConditionalExpression einer AsgExpr?
    private boolean isCondExprOfAsgExpr(AstNode aNode) {
        if (!(aNode instanceof ConditionalExpression && aNode.up instanceof AsgExpr)) {
            return false;
        }
        return ((AsgExpr) aNode.up).getConditionalExpression() == aNode;
    }

    // alle lokalen Variablen, die von nachfolgenden Statements
    // (nach den zu extrahierenden Statements) referenziert werden
    private FieldInfo[] getReferencedLocalVarsAfterStmts() {
        Set tmpFields = new HashSet();
        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            if (!((FieldInfoAst) tmpField).isLocalVar()) {
                continue;
            }
            if (tmpAccess.startLineNum() > end) {
                tmpFields.add(tmpField);
            }
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    // alle lokalen Variablen, die innerhalb der Statements geändert und von
    // nachfolgenden Statements referenziert werden
    private FieldInfo[] getLocalVarsChangedInAndReferencedAfterStmts() {
        Set tmpIntersection = new HashSet(Arrays
                .asList(getReferencedLocalVarsAfterStmts()));
        tmpIntersection.retainAll(Arrays.asList(getChangedLocalVarsInStmts()));
        return (FieldInfo[]) tmpIntersection
                .toArray(new FieldInfo[tmpIntersection.size()]);
    }

    // hook-Methode oder Verfeinerung erzeugen?
    private boolean needHook() {
        return inTheMiddle() || referencesTemporaryVarsDeclaredBefore()
                || changesReferencedVar() || referencesChangedLocalVars();
    }

    // Statements von anderen umschlossen?
    private boolean inTheMiddle() {
        return !(first() || last());
    }

    // Statements befinden sich am Ende der Methode?
    private boolean last() {
        boolean tmpLast = true;
        AstCursor c = new AstCursor();
        for (c.FirstElement(getAST_StmtNode()); c.MoreElement(); c
                .NextElement()) {
            BlockStatement tmpStmt = (BlockStatement) c.node;
            int tmpLine = TypesysUtil.findLastToken(tmpStmt).lineNum();

            if (tmpLine > end) {
                tmpLast = false;
            }
        }
        return tmpLast;
    }

    // Statements befinden sich am Anfang der Methode?
    private boolean first() {
        AstCursor c = new AstCursor();
        for (c.FirstElement(getAST_StmtNode()); c.MoreElement(); c
                .NextElement()) {
            BlockStatement tmpStmt = (BlockStatement) c.node;

            int tmpLine = TypesysUtil.findLastToken(tmpStmt).lineNum();
            int tmpStartLine = tmpStmt.findToken().lineNum();

            // tmpStmt befindet sich vor den zu extrahierenden Statements
            if (tmpLine < start) {
                return false;
            }
            if (tmpLine > end) {
        		if (tmpStartLine < start)
        	    	return false;
        		else
        	    	break;
            }
        }
        return true;
    }

    // Referenzen zu temporären Variablen, die in vorigen Statements deklariert
    // wurden?
    private boolean referencesTemporaryVarsDeclaredBefore() {
        return getReferencedTempVarsDeclaredBeforeStmts().length > 0;
    }

    // ändern die Anweisungen eine lokale Variable, die von nachfolgenden
    // Anweisungen referenziert wird?
    private boolean changesReferencedVar() {
        return getLocalVarsChangedInAndReferencedAfterStmts().length == 1;
    }

    // referenzierte temporäre Variablen, die in vorigen Statements deklariert
    // wurden
    private FieldInfo[] getReferencedTempVarsDeclaredBeforeStmts() {
        Set tmpFields = new HashSet();

        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            // Referenzierung innerhalb der Statements?
            if (tmpAccess.startLineNum() > end
                    || tmpAccess.endLineNum() < start) {
                continue;
            }
            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            FieldInfoAst tmpFieldAst = (FieldInfoAst) tmpField;
            // temporäre Variable und in vorhergehenden Statements deklariert?
            if (tmpFieldAst.isTemporaryVar()
                    && tmpFieldAst.endLineNum() < start) {
                tmpFields.add(tmpField);
            }
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    // alle von den Stmts referenzierten lokalen Variablen
    private FieldInfo[] getReferencedLocalVarsInStmts() {
        Set tmpFields = new HashSet();

        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            // Referenzierung innerhalb der Statements?
            if (tmpAccess.startLineNum() > end
                    || tmpAccess.endLineNum() < start) {
                continue;
            }

            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            FieldInfoAst tmpFieldAst = (FieldInfoAst) tmpField;
            if (tmpFieldAst.isLocalVar()) {
                tmpFields.add(tmpFieldAst);
            }
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    private AST_Stmt getAST_StmtNode() {
        // BlockC?
        if (blockOfStmts instanceof BlockCScope) {
            Scope tmpBlockScope = blockOfStmts;
            while (!(tmpBlockScope.getContext() instanceof MethodInfoAst)){
        		tmpBlockScope = tmpBlockScope.getContext();
        		if ( tmpBlockScope == null )
            		throw new IllegalArgumentException("Statements are not in a method.");
            }
            if (!(tmpBlockScope instanceof BlockCScope))
        		throw new IllegalArgumentException("Statements are not in a method.");

            return ((BlockC) ((BlockCScope) tmpBlockScope).getAstNode())
                    .getAST_Stmt();
        }
        throw new IllegalArgumentException("Statements are not in a method.");
    }

}

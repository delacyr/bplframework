layer refactoring_extrstmts;

import java.io.StringReader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mixin.ArrInit;
import mixin.AsgExpr;
import mixin.AST_Stmt;
import mixin.AST_VarInit;
import mixin.AstOptNode;
import mixin.BlockStmt;
import mixin.ExprStmt;
import mixin.ParseException;
import mixin.Parser;
import mixin.VarAssignC;
import mixin.VarInitExpr;

/**
 * @layer<refactoring_extrstmts>
 * @author Stephan Klapproth
 * 
 */
refines class FieldInfoAst {
    
    private static final Log LOG = LogFactory
            .getLog("refactoring.extrstmts.FieldInfoAst");

    boolean isInitialized() {
        return ((VarDecl) getAstNode().up).getVarAssign() instanceof VarAssignC;
    }

    void delete() {
        // Statement löschen
        BlockStmt tmpBlockStmt = getBlockStmt(getAstNode());
        if (tmpBlockStmt != null) {
            tmpBlockStmt.Delete();
        }
    }

    void transformToVarAssign() {
        AST_VarInit tmpInit = ((VarAssignC) getVarDecl().getVarAssign())
                .getAST_VarInit();

        AST_Stmt tmpStmt = createVarAssign(tmpInit);
        if (tmpStmt == null) {
            // nicht unterstütztes VarInit (ViEscape)
            return;
        }
        ExprStmt tmpAsgExprStmt = (ExprStmt) tmpStmt.arg[0].arg[0];
        int tmpLineNum = tmpInit.findToken().lineNum();
        correctLineNums(tmpLineNum, tmpAsgExprStmt);
        // alte Variablendeklaration durch Variablenzuweisung ersetzen
        BlockStmt tmpBlockStmt = getBlockStmt(getAstNode());
        if (tmpBlockStmt != null) {
            tmpBlockStmt.Replace(tmpAsgExprStmt);
        }
    }
    
    private void correctLineNums(int aLineNum, ExprStmt anExpr) {
        RefUtil.setLineNum(aLineNum, anExpr.findToken());
        RefUtil.setLineNum(aLineNum, TypesysUtil.findLastToken(anExpr));
        
        AsgExpr tmpAsg = (AsgExpr) anExpr.getAST_Exp();
        RefUtil.setLineNum(aLineNum, tmpAsg.getConditionalExpression()
                .findToken());
        RefUtil.setLineNum(aLineNum, tmpAsg.getAssignmentOperator()
                .findToken());
        RefUtil.setLineNum(aLineNum, tmpAsg.getExpression()
                .findToken());
    }

    private AST_Stmt createVarAssign(AST_VarInit aVarInit) {
        StringBuilder tmpBuilder = new StringBuilder();
        tmpBuilder.append("\n");
        tmpBuilder.append(RefUtil.indent(2));
        tmpBuilder.append(getName());
        tmpBuilder.append(" = ");
        if (aVarInit instanceof VarInitExpr) {
            tmpBuilder.append(((VarInitExpr) aVarInit).getExpression());
        } else if (aVarInit instanceof ArrInit) {
            tmpBuilder.append("new ").append(getType().getFullName()).append(
                    aVarInit);
        } else {
            return null;
        }
        tmpBuilder.append(";");
        return AST_Stmt.MakeAST(tmpBuilder.toString());
    }

    private BlockStmt getBlockStmt(AstNode aNode) {
        AstNode tmpBlockStmt = aNode;
        while (tmpBlockStmt != null && !(tmpBlockStmt instanceof BlockStmt)) {
            tmpBlockStmt = tmpBlockStmt.up;
        }
        return (BlockStmt) tmpBlockStmt;
    }

    void setVarInit(String anInitExpr) throws TransformationException {
        Parser tmpParser = Parser.getInstance(new StringReader(" = "
                + anInitExpr));
        try {
            AstOptNode anAssign = new AstOptNode().setParms(tmpParser
                    .parse("VarAssign"));
            getVarDecl().setParms(getVarDecl().getVariableDeclaratorId(),
                    anAssign);
        } catch (ParseException e) {
            LOG.error(e);
            throw new TransformationException(e);
        }
    }
}

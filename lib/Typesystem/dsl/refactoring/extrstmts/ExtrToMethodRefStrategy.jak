layer refactoring_extrstmts;

import mixin.AST_Stmt;

class ExtrToMethodRefStrategy extends ExtrMethodStrategy {

    private boolean first;

    private MethodInfoAst methodRef;

    public ExtrToMethodRefStrategy(BlockScope aBlockOfStmts, int startLine,
            int anEndLine, String destinationLayer, String destinationFolder,
            boolean isFirst) {
        super(aBlockOfStmts, startLine, anEndLine, destinationLayer,
                destinationFolder);
        first = isFirst; // befinden sich die Statements am Anfang oder am
        // Ende?
    }

    public void transform() throws TransformationException {
        super.transform();
        createSuperCall();
    }

    MethodInfoAst destinationMethod() {
        return methodRef;
    }

    void createMethods() throws TransformationException {
        MethodInfoAst tmpMethod = (MethodInfoAst) TypesysUtil
                .getParentMethodOrClass(blockOfStmts);

 		MethodInfo tmpMeth = destinationRef.getMethod(tmpMethod.getName(), RefUtil.getTypes(tmpMethod.getParams()));
        if ( tmpMeth != null )
            throw new TransformationException("The method " + tmpMethod.signature() + " already exists in " + destinationRef.getContext()+"."+destinationRef.getName()+".");

        CreateMethod tmpCreate = new CreateMethod(tmpMethod.modifier, tmpMethod
                .getReturnType(), tmpMethod.getName(), RefUtil
                .getTypes(tmpMethod.getParams()), RefUtil.getNames(tmpMethod
                .getParams()), destinationRef);
        tmpCreate.transform();
        methodRef = (MethodInfoAst) tmpCreate.getCreatedMethod();
    }

    private void createSuperCall() throws TransformationException {
        AST_Stmt tmpSuper = createAST_StmtForSuperCall();
        getBlockOfMethod(methodRef).addStmt(tmpSuper, !first);
    }

    private AST_Stmt createAST_StmtForSuperCall() {
        StringBuilder tmpBuilder = new StringBuilder("\n");
        tmpBuilder.append(RefUtil.indent(2));
        if (!TypeFactory.primitiveType(TypeFactory.VOID).equals(
                methodRef.getReturnType())) {
            tmpBuilder.append("return ");
        }
        tmpBuilder.append("Super(");
        // Parametertypen
        for (int i = 0; i < methodRef.getParameters().length; i++) {
            if (i > 0) {
                tmpBuilder.append(", ");
            }
            tmpBuilder.append(methodRef.getParameters()[i]);
        }
        tmpBuilder.append(").");
        tmpBuilder.append(methodRef.getName());
        tmpBuilder.append("(");
        // Parameternamen
        for (int i = 0; i < methodRef.getParams().length; i++) {
            if (i > 0) {
                tmpBuilder.append(", ");
            }
            tmpBuilder.append(methodRef.getParams()[i].getName());
        }
        tmpBuilder.append(");");

        return AST_Stmt.MakeAST(tmpBuilder.toString());

    }
}

layer refactoring_extrstmts;

import java.util.List;
import java.util.ArrayList;

import mixin.AST_Stmt;
import mixin.AST_StmtElem;
import mixin.AstCursor;
import mixin.AstOptNode;
import mixin.BlockStatement;

/**
 * @layer<refactoring_extrstmts>
 * @author Stephan Klapproth
 * 
 */
refines class BlockCScope {

    private BlockCScope destination;

    /**
     * Verschiebt alle Statements, deren Zeilennummern im Bereich von
     * <code>aStart</code> und <code>anEnd</code> liegen, in den BlockCScope
     * <code>aDestination</code>.
     * 
     * @param aStart
     *            Zeilennummer des ersten Statements, das verschoben werden
     *            soll.
     * @param anEnd
     *            Zeilennummer des letzten Statements, das verschoben werden
     *            soll.
     * @param aDestination
     *            der Ziel <code>BlockCScope</code>.
     */
    public void move(int aStart, int anEnd, BlockCScope aDestination) {
        if (node.getAST_Stmt() == null) {
            return;
        }

        destination = aDestination;

        BlockStatement[] tmpStmts = getStatements(aStart, anEnd, node
                .getAST_Stmt());

        moveStatements(tmpStmts, aDestination.createOrGetAST_Stmt());

    }

    // fügt aStmt in der Zeile aLineNum ein
    void addStmt(int aLineNum, AST_Stmt aStmt) {
        AstCursor c = new AstCursor();
        for (c.FirstElement(createOrGetAST_Stmt()); c.MoreElement(); c
                .NextElement()) {
            BlockStatement tmpAddBefore = (BlockStatement) c.node;
            if (TypesysUtil.findLastToken(tmpAddBefore).lineNum() > aLineNum) {
                tmpAddBefore.up.AddBefore(aStmt);
                return;
            }
        }
        // falls aLineNum die letzte Zeile der Methode ist:
        createOrGetAST_Stmt().add(aStmt);
    }

    private BlockStatement[] getStatements(int aStart, int anEnd,
            AST_Stmt someStmts) {
        List tmpStmts = new ArrayList();
        AstCursor c = new AstCursor();
        for (c.FirstElement(someStmts); c.MoreElement(); c.NextElement()) {
            BlockStatement tmpStmt = (BlockStatement) c.node;
            if (between(tmpStmt, aStart, anEnd)) {
                tmpStmts.add(tmpStmt);
            }
        }
        return (BlockStatement[]) tmpStmts.toArray(new BlockStatement[tmpStmts
                .size()]);
    }

    private void moveStatements(BlockStatement[] someStmts,
            AST_Stmt aDestination) {

        int tmpBlockCnt = 0;
        for (int i = 0; i < someStmts.length; i++) {
            moveAstNode(someStmts[i], aDestination);
            if (AbstractBlockScope.isBlockScope(someStmts[i])) {
                getBlockScopes()[tmpBlockCnt++].move(destination);
            }
        }
    }

    void addStmt(AST_Stmt aStmt, boolean atFirst) {
        AST_Stmt tmpBlockCStmts = createOrGetAST_Stmt();
        if (atFirst) {
            tmpBlockCStmts.addHead(aStmt);
        } else {
            tmpBlockCStmts.add(aStmt);
        }
    }

    AST_Stmt createOrGetAST_Stmt() {
        if (node.getAST_Stmt() == null) {
            node.arg[0] = new AstOptNode().setParms(new AST_Stmt());
        }
        return node.getAST_Stmt();
    }

    private void moveAstNode(BlockStatement aBlockStmt, AST_Stmt aDestination) {
        aBlockStmt.Delete();
        aDestination.add(new AST_StmtElem().setParms(aBlockStmt));
    }

    private boolean between(BlockStatement aStmt, int aStart, int anEnd) {
        int tmpLine = TypesysUtil.findLastToken(aStmt).lineNum();
        return tmpLine >= aStart && tmpLine <= anEnd;
    }
}
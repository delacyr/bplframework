layer refactoring_extrstmts;

/**
 * Extrahieren von einzelnen Statements aus einer Methode.
 * 
 * @layer<refactoring_extrstmts>
 * @author Stephan Klapproth
 * 
 */
public class ExtractStatements implements Transformation {

    private ClassInfoAst srcClazz;
    private BlockScope blockOfStmts;

    private int start, end;

    private String destinationLayer;
    private String destinationFolder;

    private ExtrStmtsStrategy strategy;

    private final TypeSystem TS;

    public ExtractStatements(TypeSystem aTypeSystem, String aLayer, String aClass, int aStartLineNum,
            int anEndLineNum, String aDestinationLayer, String aDestFolder) throws TransformationException{
		TS = aTypeSystem;

        if (aStartLineNum > anEndLineNum) {
            throw new IllegalArgumentException(
                    "The start can't be greater than the end.");
        }

        srcClazz = (ClassInfoAst) TS.getClazz(aLayer, aClass);
        start = aStartLineNum;
        end = anEndLineNum;
        destinationLayer = aDestinationLayer;
        LayerInfo tmpDestLayer = TS.getLayer(destinationLayer);
        LayerInfo tmpSrcLayer = (LayerInfo) srcClazz.getContext();
        if (tmpSrcLayer.equals(tmpDestLayer))
            throw new TransformationException("The destination-layer has to be different from the source-layer.");
        while ( tmpDestLayer != null ){
            tmpDestLayer = tmpDestLayer.getNext();
            if(tmpSrcLayer.equals(tmpDestLayer))
        	throw new TransformationException("The destination-layer has to be defined after the source-layer.");
        }
        blockOfStmts = getBlockOfStmts();
        if ( blockOfStmts == null )
            throw new TransformationException("The scope of the statements is inconclusive.");
        destinationFolder = aDestFolder;
        strategy = new ExtrStmtsStrategyFactory(blockOfStmts, start, end,
                destinationLayer, destinationFolder).getStrategy();
    }

    public ExtractStatements(TypeSystem aTypeSystem, String aLayer, String aClass, int aStartLineNum,
            int anEndLineNum, String aDestinationLayer) throws TransformationException{
        this(aTypeSystem, aLayer, aClass, aStartLineNum, anEndLineNum, aDestinationLayer, TypesysUtil
                .getLayerLocation(aTypeSystem.getLayer(aDestinationLayer)));
    }

    ClassInfoAst getSrcClass() {
        return srcClazz;
    }

    ExtrStmtsStrategy getUsedStrategy() {
        return strategy;
    }

    int getStartLine() {
        return start;
    }

    int getEndLine() {
        return end;
    }

    private BlockScope getBlockOfStmts() {
        BlockScope tmpBlockOfStart = TypesysUtil.findScopeOfLine(start,
                srcClazz);
        BlockScope tmpBlockOfEnd = TypesysUtil.findScopeOfLine(end, srcClazz);
        if (tmpBlockOfStart != tmpBlockOfEnd) {
            return null;
        }
        return tmpBlockOfStart;
    }

    public void transform() throws TransformationException {
        strategy.transform();
    }

    public Conflict[] getConflicts() {
        return new ExtractStmtsConflictFactory(((ExtractStatements) this))
                .getConflicts();
    }

    public Saveable[] modifiedClasses() {
        return strategy.modifiedClasses();
    }

    public boolean needsHook(){
		return strategy instanceof ExtrToHookStrategy;
    }

    public void setHookName(String aName) throws TransformationException{
    	if (needsHook()){
    		((ExtrToHookStrategy) strategy).setHookName(aName);
    	}
    }
}

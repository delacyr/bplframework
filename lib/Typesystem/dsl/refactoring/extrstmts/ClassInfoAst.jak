layer refactoring_extrstmts;

import mixin.FldVarDec;


/**
 * @layer<refactoring_extrstmts>
 * @author Stephan Klapproth
 * 
 */
refines class ClassInfoAst {
	
    private String buildFieldDecl(ModifierInfo[] someModifier, ClassInfo aType,
            String aName) {

        StringBuilder tmpStr = new StringBuilder("\n\n");
        tmpStr.append(RefUtil.indent(1));
        if (someModifier != null && someModifier.length > 0) {
            for (int i = 0; i < someModifier.length; i++) {
                if (i > 0) {
                    tmpStr.append(" ");
                }
                tmpStr.append(someModifier[i]);
            }
            tmpStr.append(" ");
        }
        tmpStr.append(aType.getFullName());
        tmpStr.append(" ");
        tmpStr.append(aName);
        tmpStr.append(";");
        return tmpStr.toString();
    }

    FieldInfo addField(ModifierInfo[] someModifier, ClassInfo aType,
            String aName) {
        if (aType == null || aName == null || someModifier == null) {
            throw new IllegalArgumentException("All parameters are mandatory!");
        }
        AST_FieldDecl tmpDecls = AST_FieldDecl.MakeAST(buildFieldDecl(
                someModifier, aType, aName));
        FldVarDec tmpDec = (FldVarDec) tmpDecls.last.arg[0];

        addFieldDecl(tmpDecls);
        
        ModifiedFieldInfoAst tmpField = new ModifiedFieldInfoAst(
                tmpDec.getAST_TypeName(), (VarDecl) tmpDec.getAST_VarDecl()
                .last.arg[0], tmpDec.getAST_Modifiers());
        addDeclaration(tmpField);
        return tmpField;
    }
    
    private void addFieldDecl(AST_FieldDecl aDecl) {
        if (getClsBody().getAST_FieldDecl() == null) {
            getClsBody().arg[0] = new AstOptNode().setParms(aDecl);
        } else {
            getClsBody().getAST_FieldDecl().add(aDecl);
        }
    }
    
    void addConstructor(ClassInfo[] someParamTypes, String[] someParamNames) {
        StringBuilder tmpConstr = new StringBuilder("\n");
        tmpConstr.append(RefUtil.indent(1));
        tmpConstr.append(getName());
        tmpConstr.append("(");
        for (int i = 0; i < someParamTypes.length; i++) {
            if (i > 0) {
                tmpConstr.append(", ");
            }
            tmpConstr.append(someParamTypes[i].getFullName());
            tmpConstr.append(" ");
            tmpConstr.append(someParamNames[i]);
        }
        tmpConstr.append(") {\n");
        for (int i = 0; i < someParamTypes.length; i++) {
            tmpConstr.append(RefUtil.indent(2));
            tmpConstr.append("this.");
            tmpConstr.append(someParamNames[i]);
            tmpConstr.append(" = ");
            tmpConstr.append(someParamNames[i]);
            tmpConstr.append(";\n");
        }
        tmpConstr.append("\n");
        tmpConstr.append(RefUtil.indent(1));
        tmpConstr.append("}");
        
        AST_FieldDecl tmpDecl = AST_FieldDecl.MakeAST(tmpConstr.toString());
        addFieldDecl(tmpDecl);
    }
}

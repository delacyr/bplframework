layer refactoring_extrstmts;

import mixin.AST_Stmt;
import mixin.AstCursor;
import mixin.ReturnStm;

import java.io.File;


class ExtrToHookStrategy extends ExtrMethodStrategy {

    private static String HOOK_NAME = "hook";

    private FieldInfo referencedChangedField;

    private FieldInfo[] hookParams;

    private MethodInfoAst hookInBase, hookInRef;

    public ExtrToHookStrategy(BlockScope aBlockOfStmts, int aStartLine,
            int anEndLine, String aDestinationLayer, String aDestinationFolder,
            FieldInfo aReferencedChangedField, FieldInfo[] someHookParams) {
        super(aBlockOfStmts, aStartLine, anEndLine, aDestinationLayer,
                aDestinationFolder);
        referencedChangedField = aReferencedChangedField;
        hookParams = someHookParams;
    }

    public void transform() throws TransformationException {
        if (returnStatementExtracted())
            throw new TransformationException("Return-statements can not be extracted into a hook-method.");
        super.transform();
        if (referencedChangedField != null) {
            createReturnStmtsInHooks();
        }
        createHookCall();
    }

    private void createHookCall() {
        ((BlockCScope) blockOfStmts).addStmt(start, createHookCallStmt());
    }

    private AST_Stmt createHookCallStmt() {
        StringBuilder tmpBuilder = new StringBuilder("\n");
        tmpBuilder.append(RefUtil.indent(2));
        if (referencedChangedField != null) {
            tmpBuilder.append(referencedChangedField.getName());
            tmpBuilder.append(" = ");
        }
        tmpBuilder.append(hookInBase.getName());
        tmpBuilder.append("(");
        for (int i = 0; i < hookParams.length; i++) {
            if (i > 0) {
                tmpBuilder.append(", ");
            }
            tmpBuilder.append(hookParams[i].getName());
        }
        tmpBuilder.append(");");
        return AST_Stmt.MakeAST(tmpBuilder.toString());
    }

    // Name der hook-Methode ermitteln
    private String hookMethodName() {
        int i = 0;
        ClassInfo[] tmpParams = RefUtil.getTypes(hookParams);
        if ( destinationRef.findMethod(HOOK_NAME, tmpParams) == null && 
        	 srcClazz.findMethod(HOOK_NAME, tmpParams) == null ){
            return HOOK_NAME;
        }
        while ( destinationRef.findMethod(HOOK_NAME + i, tmpParams) != null ) {
            i++;
        }
        while ( srcClazz.findMethod(HOOK_NAME + i, tmpParams) != null ) {
            i++;
        }
        return HOOK_NAME + i;
    }

    void createMethods() throws TransformationException {
        String tmpHookName = hookMethodName();
        ClassInfo tmpReturn = (referencedChangedField == null) ? new ClassInfoReflAdapter(
                void.class)
                : referencedChangedField.getType();

        // in Base
        CreateMethod tmpCreate = new CreateMethod(new ModifierInfo[0],
                tmpReturn, tmpHookName, RefUtil.getTypes(hookParams),
                RefUtil.getNames(hookParams), srcClazz);
        tmpCreate.transform();
        hookInBase = (MethodInfoAst) tmpCreate.getCreatedMethod();

        // in Verfeinerung
        tmpCreate = new CreateMethod(new ModifierInfo[] { ModifierInfo
                .valueOf(ModifierInfo.OVERRIDES) }, tmpReturn, tmpHookName,
                RefUtil.getTypes(hookParams), RefUtil.getNames(hookParams), destinationRef);
        tmpCreate.transform();
        hookInRef = (MethodInfoAst) tmpCreate.getCreatedMethod();
    }

    MethodInfoAst destinationMethod() {
        return hookInRef;
    }

    // geänderte Variable muss zurückgegeben werden
    private void createReturnStmtsInHooks() {
        getBlockOfMethod(hookInBase).addStmt(createReturnStmt(), false);
        getBlockOfMethod(hookInRef).addStmt(createReturnStmt(), false);
    }

    private AST_Stmt createReturnStmt() {
        StringBuilder tmpBuilder = new StringBuilder("\n");
        tmpBuilder.append(RefUtil.indent(2));
        tmpBuilder.append("return ");
        tmpBuilder.append(referencedChangedField.getName());
        tmpBuilder.append(";");
        return AST_Stmt.MakeAST(tmpBuilder.toString());
    }

    public void setHookName(String aName) throws TransformationException{
    	ClassInfo[] tmpParams = RefUtil.getTypes(hookParams);

    	//check whether this name is possible in the sourceClass
		if ( srcClazz.findMethod(aName, tmpParams) != null ) 
			throw new TransformationException("A method with the name " + aName +
    		" and the specified parameters allready exists in " + srcClazz.getName());

		//check whether this name is possible in the destinationClass
    	ClassInfo destClass = TypesysUtil.getTypeSystem(srcClazz).getClazz(new File(destinationFile));
    	if ( destClass != null )
    		if ( destClass.findMethod(aName, tmpParams) != null ) 
				throw new TransformationException("A method with the name " + aName +
    			" and the specified parameters allready exists in " + destClass.getName());

    	HOOK_NAME = aName;
    }

    private boolean returnStatementExtracted(){
        Scope aScope = TypesysUtil.getParentMethodOrClass(blockOfStmts);
        if (aScope instanceof MethodInfoAst){
            AstCursor c = new AstCursor();
            for (c.First(((MethodInfoAst)aScope).getAstNode()); c.More(); c.PlusPlus()) {
        		if (c.node instanceof ReturnStm){
        	    	int startLine = ((ReturnStm) c.node).findToken().lineNum();
                    if (startLine>= start && startLine <=end){
                		return true;
                    }
                }
            }
        }
        return false;
    }

}
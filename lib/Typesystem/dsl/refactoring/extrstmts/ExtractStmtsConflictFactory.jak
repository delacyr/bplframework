layer refactoring_extrstmts;

import mixin.AST_Stmt;
import mixin.AstCursor;
import mixin.BlockC;
import mixin.BlockStatement;
import mixin.ReturnStm;
import mixin.Statement;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * @layer<refactoring_extrstmts>
 * @author Stephan Klapproth
 * 
 */
class ExtractStmtsConflictFactory implements ConflictFactory {

    private ClassInfoAst srcClass;
    private ExtrStmtsStrategy usedStrategy;
    private int start, end;
    private MethodInfoAst methodOfStmts;
    private BlockScope blockOfStmts;

    public ExtractStmtsConflictFactory(ExtractStatements aTransformation) {
        srcClass = aTransformation.getSrcClass();
        usedStrategy = aTransformation.getUsedStrategy();
        start = aTransformation.getStartLine();
        end = aTransformation.getEndLine();

        BlockScope tmpBlockOfStart = TypesysUtil.findScopeOfLine(start,srcClass);
        BlockScope tmpBlockOfEnd = TypesysUtil.findScopeOfLine(end, srcClass);
        blockOfStmts = (tmpBlockOfStart == tmpBlockOfEnd) ?  tmpBlockOfStart : null; 

        methodOfStmts = (MethodInfoAst) TypesysUtil.getParentMethodOrClass(blockOfStmts);
    }
    
    public Conflict[] getConflicts() {
        List tmpConflicts = new ArrayList();

		tmpConflicts.addAll(getDeclaredAndAfterwardsReferencedTempVarsConflicts());
		tmpConflicts.addAll(getFieldAccessConflicts());
		tmpConflicts.addAll(getMethodCallConflicts());
		tmpConflicts.addAll(getExtractReturnStatementConflict());

        return (Conflict[]) tmpConflicts.toArray(new Conflict[tmpConflicts
                .size()]);
    }

    // Referenzen zu private Methoden
    private List getMethodCallConflicts() {
        AstElement[] tmpCalls = TypesysUtil.getTypeSystem(srcClass)
                .getCallsToPrivateMethods(methodOfStmts);
        if (usedStrategy instanceof ExtrMethodStrategy) {
            tmpCalls = filter(tmpCalls);
        }
        List tmpConflicts = new ArrayList();
        for (int i = 0; i < tmpCalls.length; i++) {
            tmpConflicts.add(new MethodCallConflict(
                    (MethodInvocation) tmpCalls[i]));
        }
        return tmpConflicts;
    }

    // Referenzen zu private Objektattributen
    private List getFieldAccessConflicts() {
        AstElement[] tmpRefs = TypesysUtil.getTypeSystem(srcClass).getRefsToPrivateFields(
                methodOfStmts);
        if (usedStrategy instanceof ExtrMethodStrategy) {
            tmpRefs = filter(tmpRefs);
        }
        List tmpConflicts = new ArrayList();
        for (int i = 0; i < tmpRefs.length; i++) {
            tmpConflicts.add(new FieldAccessConflict((FieldAccess) tmpRefs[i]));
        }
        return tmpConflicts;
    }

    // nur die Elemente zurückgeben, die innerhalb der zu extrahierenden
    // Statements liegen
    private AstElement[] filter(AstElement[] someElements) {
        List tmpInStmts = new ArrayList();
        for (int i = 0; i < someElements.length; i++) {
            if (someElements[i].startLineNum() >= start
                    && someElements[i].endLineNum() <= end) {
                tmpInStmts.add(someElements[i]);
            }
        }
        return (AstElement[]) tmpInStmts.toArray(new AstElement[tmpInStmts
                .size()]);
    }

    // Deklarationen von temp. Variablen, die von nachfolgenden Statements 
	// referenziert werden
    private List getDeclaredAndAfterwardsReferencedTempVarsConflicts() {
        Set tmpIntersection = new HashSet(Arrays.asList(getReferencedLocalVarsAfterStmts()));
        tmpIntersection.retainAll(Arrays.asList(getDeclaredLocalVarsInStmts()));

        List tmpConflicts = new ArrayList();
        FieldAccess[] tmpAccesses = blockOfStmts.getFieldAccesses();
        Iterator it =  tmpIntersection.iterator();
        while (it.hasNext()) {
        	FieldAccess tmpAccess = null;
        	FieldInfo tmpReferencedField = (FieldInfo)it.next();
        	for (int j = 0; j < tmpAccesses.length; j++) {
            	FieldInfo tmpAccessedField = tmpAccesses[j].getField();
    			if (tmpAccessedField == tmpReferencedField){
    				tmpAccess = tmpAccesses[j];
    				break;
    			} 
            }
            tmpConflicts.add(new VariableReferenceConflict(tmpAccess));
        }
        return tmpConflicts;
    }

    // alle lokalen Variablen, die innerhalb der Statements deklariert werden
    private FieldInfo[] getDeclaredLocalVarsInStmts() {
        Set tmpFields = new HashSet();
		for (int i = 0; i < blockOfStmts.getFields().length; i++) {
	    	FieldInfo tmpField = blockOfStmts.getFields()[i];
	    	if (!(tmpField instanceof FieldInfoAst)) {
				continue;
	    	}
	    	if (!((FieldInfoAst) tmpField).isLocalVar()) {
				continue;
	    	}
	    	// Deklaration außerhalb der zu extrahierenden Statements?
	    	if (((FieldInfoAst)tmpField).startLineNum() < start
		    	|| ((FieldInfoAst)tmpField).startLineNum() > end) {
				continue;
	    	}
	    	tmpFields.add(tmpField);
	    }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    // alle lokalen Variablen, die von nachfolgenden Statements
    // (nach den zu extrahierenden Statements) referenziert werden
    private FieldInfo[] getReferencedLocalVarsAfterStmts() {
        Set tmpFields = new HashSet();
        for (int i = 0; i < blockOfStmts.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = blockOfStmts.getFieldAccesses()[i];
            FieldInfo tmpField = tmpAccess.getField();
            if (!(tmpField instanceof FieldInfoAst)) {
                continue;
            }
            if (!((FieldInfoAst) tmpField).isLocalVar()) {
                continue;
            }
            if (tmpAccess.startLineNum() > end) {
                tmpFields.add(tmpField);
            }
        }
        return (FieldInfo[]) tmpFields.toArray(new FieldInfo[tmpFields.size()]);
    }

    //Return-Statements innerhalb der zu extrahierenden Statements
    private List getExtractReturnStatementConflict() {
        List tmpConflicts = new ArrayList();

 		if (usedStrategy instanceof ExtrToHookStrategy){
	    	Scope aScope = TypesysUtil.getParentMethodOrClass(blockOfStmts);
	    	if (aScope instanceof MethodInfoAst){
				AstCursor c = new AstCursor();
				for (c.First(((MethodInfoAst)aScope).getAstNode()); c.More(); c.PlusPlus()) {
		    		if (c.node instanceof ReturnStm){
						int startLine = ((ReturnStm) c.node).findToken().lineNum();
						if (startLine>= start && startLine <=end){
			    			String description = "Return-Statements can not be extracted into a hook-method.";
			    			String file = ((ClassInfoAst) TypesysUtil.getDeclaringClass(aScope)).getSrcFile().getAbsolutePath();
			    			int endLine = TypesysUtil.findLastToken(c.node).lineNum();
			    			tmpConflicts.add(new Conflict(description,file,startLine,endLine));
						}
		    		}
				}//endfor
				return tmpConflicts;
	    	}
		}

 		if (usedStrategy instanceof MethodObjStrategy){
	    	Scope aScope = TypesysUtil.getParentMethodOrClass(blockOfStmts);
	    	if (aScope instanceof MethodInfoAst){
				if (((MethodObjStrategy)usedStrategy).needsHookInMethodObject()){
		    		AstCursor c = new AstCursor();
		    		for (c.First(((MethodInfoAst)aScope).getAstNode()); c.More(); c.PlusPlus()) {
						if (c.node instanceof ReturnStm){
			    			int startLine = ((ReturnStm) c.node).findToken().lineNum();
			    			if (startLine>= start && startLine <=end && inTheMiddle()){
								String description = "Return-Statements can not be extracted into a hook-method, which is necessary after the methodobject has been created.";
								String file = ((ClassInfoAst) TypesysUtil.getDeclaringClass(aScope)).getSrcFile().getAbsolutePath();
								int endLine = TypesysUtil.findLastToken(c.node).lineNum();
								tmpConflicts.add(new Conflict(description,file,startLine,endLine));
			    			}
						}
		    		}//endfor
		    		return tmpConflicts;
				}//endif (((MethodObjStrategy)usedStrategy).needsHookInMethodObject())
	    	}
		}

		Scope aScope = TypesysUtil.getParentMethodOrClass(blockOfStmts);
		if (aScope instanceof MethodInfoAst){
	    	//the last statement to be extracted must not be a return-statement
	    	boolean lastStmtIsReturnStmt = false;
	    	ReturnStm lastReturnStmt = null;
	    	AstCursor c = new AstCursor();
	    	AST_Stmt stmt = ((BlockC) ((BlockCScope) blockOfStmts).getAstNode()).getAST_Stmt();
	    	for (c.FirstElement(stmt); c.MoreElement(); c.NextElement()) {
				if (c.node instanceof Statement){
		    		int startLine = c.node.findToken().lineNum();
		    		//node may belong to the extractet statements
		    		if (startLine>= start){
						//node belongs to the extractet statements
						if (startLine <=end){
			    			if (c.node instanceof ReturnStm){
								lastStmtIsReturnStmt = true;
								lastReturnStmt = (ReturnStm) c.node;
			    			}
			    			else{
								lastStmtIsReturnStmt = false;
			    			}
						}
						//node is located after the extractet statements
						else
			    			break;
		    		}//endif (startLine>= start)
				}//endif (c.node instanceof Statement)
	    	}//endfor
	    	if (lastStmtIsReturnStmt){
				String description = "The last statement to be extracted must not be a return-statement.";
				String file = ((ClassInfoAst) TypesysUtil.getDeclaringClass(aScope)).getSrcFile().getAbsolutePath();
				int startLine = lastReturnStmt.findToken().lineNum();
				int endLine = TypesysUtil.findLastToken(lastReturnStmt).lineNum();
				tmpConflicts.add(new Conflict(description,file,startLine,endLine));
	    	}
		}

        return tmpConflicts;
    }

    // Statements von anderen umschlossen?
    private boolean inTheMiddle() {
        return !(first() || last());
    }

    // Statements befinden sich am Ende der Methode?
    private boolean last() {
        AST_Stmt astm = ((BlockC) ((BlockCScope) blockOfStmts).getAstNode()).getAST_Stmt();
        boolean tmpLast = true;
        AstCursor c = new AstCursor();
        for (c.FirstElement(astm); c.MoreElement(); c
                .NextElement()) {
            BlockStatement tmpStmt = (BlockStatement) c.node;
            int tmpLine = TypesysUtil.findLastToken(tmpStmt).lineNum();

            if (tmpLine > end) {
                tmpLast = false;
            }
        }
        return tmpLast;
    }

    // Statements befinden sich am Anfang der Methode?
    private boolean first() {
    	AST_Stmt astm = ((BlockC) ((BlockCScope) blockOfStmts).getAstNode()).getAST_Stmt();
        AstCursor c = new AstCursor();
        for (c.FirstElement(astm); c.MoreElement(); c
                .NextElement()) {
            BlockStatement tmpStmt = (BlockStatement) c.node;
            int tmpLine = TypesysUtil.findLastToken(tmpStmt).lineNum();

            // tmpStmt befindet sich vor den zu extrahierenden Statements
            if (tmpLine < start) {
                return false;
            }
            if (tmpLine > end) {
                break;
            }
        }
        return true;
    }

}
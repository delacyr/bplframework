layer refactoring_extrstmts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import mixin.AST_Stmt;

class MethodObjStrategy implements ExtrStmtsStrategy {

    private final static String CLASS_SUF = "MethodObj";

    private final static String SOURCE_ATTRIB = "SOURCE";

    private final static String METHOD_NAME = "compute";

    private int start, end;
    private boolean needsHook = false;

    private ClassInfoAst srcClass;

    private MethodInfoAst srcMethod, compute;
    private BlockCScope blockOfStmts;

    private FieldInfo[] fieldsInSrcMethod;
    private FieldAccess[] referencesInSrcMethod;
    private MethodInvocation[] callsInSrcMethod;

    private ClassInfoAst methodObj;

    private String destinationLayer, destinationFolder;

    private Set modifiedClasses = new HashSet();

    public MethodObjStrategy(BlockScope aBlockOfStmts, int aStartLine,
            int anEndLine, String aDestinationLayer, String aDestinationFolder) {
        srcClass = (ClassInfoAst) TypesysUtil
                .getDeclaringClass((Scope) aBlockOfStmts);
        srcMethod = (MethodInfoAst) TypesysUtil
                .getParentMethodOrClass(aBlockOfStmts);
        blockOfStmts = (BlockCScope) aBlockOfStmts;
        start = aStartLine;
        end = anEndLine;
        fieldsInSrcMethod = blockOfStmts.getFields();
        callsInSrcMethod = blockOfStmts.getMethodInvocations();
        referencesInSrcMethod = blockOfStmts.getFieldAccesses();
        destinationLayer = aDestinationLayer;
        destinationFolder = aDestinationFolder;
    }

    public void transform() throws TransformationException {
        createMethodObj();
        createSourceAttrib();
        addAttributesToMethodObj();
        addConstructorToMethodObj();
        createComputeMethod();
        moveStmtsToMethodObj();
        createMethodObjCall();
        changeAttributeReferences();
        changeMethodInvocations();
        changeDeclToAssignments();

        extractStatements();
    }

    private void extractStatements() throws TransformationException {
        ExtrStmtsStrategyFactory tmpFactory = new ExtrStmtsStrategyFactory(
                (BlockCScope) compute.getBlockScopes()[0], start, end,
                destinationLayer, destinationFolder);
        ExtrStmtsStrategy tmpStrategy = tmpFactory.getStrategy();
        tmpStrategy.transform();
        modifiedClasses.addAll(Arrays.asList(tmpStrategy.modifiedClasses()));
    }

    private void changeMethodInvocations() {
        for (int i = 0; i < callsInSrcMethod.length; i++) {
            MethodInvocation tmpInv = callsInSrcMethod[i];
            if (tmpInv.getMethod() == srcClass.findMethod(tmpInv.getMethod()
                    .getName(), tmpInv.getMethod().getParameters())) {
                tmpInv.addQName(SOURCE_ATTRIB);
            }
        }
    }

    private void changeAttributeReferences() {
        for (int i = 0; i < referencesInSrcMethod.length; i++) {
            FieldAccess tmpAccess = referencesInSrcMethod[i];
            if (tmpAccess.getField() == srcClass.findField(tmpAccess.getField()
                    .getName())) {
                tmpAccess.addQName(SOURCE_ATTRIB);
            }
        }
    }

    private void createMethodObjCall() {

        ((BlockCScope) srcMethod.getBlockScopes()[0]).addStmt(
                createMethodObjCallNode(), true);
    }

    private AST_Stmt createMethodObjCallNode() {
        StringBuilder tmpBuilder = new StringBuilder("\n");
        tmpBuilder.append(RefUtil.indent(2));
        if (!srcMethod.getReturnType().equals(TypeFactory.primitiveType(TypeFactory.VOID)))
            tmpBuilder.append("return ");
        tmpBuilder.append("new ");
        tmpBuilder.append(methodObj.getName());
        tmpBuilder.append("(");
        tmpBuilder.append("this");
        for (int i = 0; i < srcMethod.getParams().length; i++) {
            tmpBuilder.append(", ");
            tmpBuilder.append(srcMethod.getParams()[i].getName());
        }
        tmpBuilder.append(").");
        tmpBuilder.append(METHOD_NAME);
        tmpBuilder.append("();");

        return AST_Stmt.MakeAST(tmpBuilder.toString());
    }

    private void changeDeclToAssignments() {
        for (int i = 0; i < fieldsInSrcMethod.length; i++) {
            FieldInfoAst tmpField = (FieldInfoAst) fieldsInSrcMethod[i];
            if (tmpField.isInitialized()) {
                tmpField.transformToVarAssign();
            }
        }
    }

    private void addConstructorToMethodObj() {
        List tmpParams = new ArrayList();
        List tmpNames = new ArrayList();

        tmpParams.add(srcClass);
        tmpNames.add(SOURCE_ATTRIB);
        tmpParams.addAll(Arrays.asList(srcMethod.getParameters()));
        tmpNames.addAll(Arrays.asList(RefUtil.getNames(srcMethod.getParams())));

        methodObj.addConstructor((ClassInfo[]) tmpParams
                .toArray(new ClassInfo[tmpParams.size()]), (String[]) tmpNames
                .toArray(new String[tmpNames.size()]));
    }

    private void createMethodObj() throws TransformationException {
        String tmpLayer = srcClass.getContext().getName();
        String tmpName = srcMethod.getName() + CLASS_SUF;
        tmpName = RefUtil.firstCharToUpperCase(tmpName);
        String tmpFile = srcClass.getSrcFile().getParent() + RefUtil.FILE_SEP
                + tmpName + RefUtil.FILE_SUF;

        CreateBase tmpCreate = new CreateBase(TypesysUtil.getTypeSystem(srcClass), tmpLayer, tmpName, tmpFile);
        tmpCreate.transform();
        methodObj = (ClassInfoAst) tmpCreate.getCreatedClass();
    }

    private void createSourceAttrib() {
        ModifierInfo tmpFinal = ModifierInfo.valueOf(ModifierInfo.FINAL);

        methodObj.addField(new ModifierInfo[] { tmpFinal }, srcClass,
                SOURCE_ATTRIB);
    }

    private void addAttributesToMethodObj() throws TransformationException {
        FieldInfo[] tmpAttributes = getLocalVars();
        for (int i = 0; i < tmpAttributes.length; i++) {
            methodObj.addField(new ModifierInfo[0], tmpAttributes[i].getType(),
                    tmpAttributes[i].getName());
        }
    }

    private void createComputeMethod() throws TransformationException {
        ModifierInfo[] tmpModifier = new ModifierInfo[0];
        ClassInfo tmpReturn = srcMethod.getReturnType();
        CreateMethod tmpCreate = new CreateMethod(tmpModifier, tmpReturn,
                METHOD_NAME, new ClassInfo[0], new String[0], methodObj);
        tmpCreate.transform();
        compute = (MethodInfoAst) tmpCreate.getCreatedMethod();
    }

    private void moveStmtsToMethodObj() {
        blockOfStmts.move(srcMethod.startLineNum() + 1,
                srcMethod.endLineNum() - 1, (BlockCScope) compute
                        .getBlockScopes()[0]);
    }

    // Methodenparameter und referenzierte temporäre Variablen
    private FieldInfo[] getLocalVars() {
        Set tmpLocalVars = new HashSet();
        tmpLocalVars.addAll(Arrays.asList(srcMethod.getParams()));
        FieldInfo[] tmpTempVars = srcMethod.getBlockScopes()[0].getFields();
        tmpLocalVars.addAll(Arrays.asList(tmpTempVars));
        return (FieldInfo[]) tmpLocalVars.toArray(new FieldInfo[tmpLocalVars
                .size()]);
    }

    public Conflict[] getConflicts() {
        throw new UnsupportedOperationException();
    }

    public Saveable[] modifiedClasses() {
        modifiedClasses.add(srcClass);
        modifiedClasses.add(methodObj);
        return (Saveable[]) modifiedClasses
                .toArray(new Saveable[modifiedClasses.size()]);
    }

    public void setNeedsHook(boolean hook){
		needsHook = hook;
    }

    public boolean needsHookInMethodObject(){
		return needsHook;
    }

}
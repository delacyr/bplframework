layer refactoring_createclass;

import java.io.File;

/**
 * @layer<refactoring_createclass>
 * @author Stephan Klapproth
 * 
 */
class CreateBase implements Transformation {

	protected final TypeSystem ts;

    String _layer;

    String file;

    String className;

    CreateBase(TypeSystem aTypeSystem, String aLayer, String aClassName, String aFile) {
        file = aFile;
        _layer = aLayer;
        className = aClassName;
        ts = aTypeSystem;
    }

    boolean classExists() {
        return ts.getClazz(_layer, className) != null;
    }

    public void transform() throws TransformationException {
        if (_layer == null || ts.getLayer(_layer) == null) {
            throw new TransformationException(
                    "Destination layer does not exist.");
        }

        if (className == null) {
            throw new TransformationException("Missing name of the class.");
        }

        if (classExists()) {
            throw new TransformationException("Class already exists.");
        }

        createClass();
    }

    void createClass() throws TransformationException {
        ClassInfoAst.createEmptyClass(
                ts.getLayer(_layer), new ModifierInfo[0],
                className, null, null, new File(file));
    }

    public Conflict[] getConflicts() {
        return new Conflict[0];
    }

    ClassInfo getCreatedClass() {
        return ts.getClazz(_layer, className);
    }
    
    public Saveable[] modifiedClasses() {
        return new Saveable[] { (Saveable) getCreatedClass() };
    }
}

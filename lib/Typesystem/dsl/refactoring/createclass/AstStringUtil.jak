layer refactoring_createclass;

/**
 * @layer<refactoring_createclass>
 * @author Stephan Klapproth
 * 
 */
class AstStringUtil {
    
    private String layerName;
    
    private String className;
    
    private ModifierInfo[] modifier;
    
    private ClassInfo[] implementedInterfaces;
    
    private ClassInfo[] extendingClasses;

	
    public String getInterface(String aLayer, String aClass, ClassInfo[] someInterfaces, ModifierInfo[] someModifier) {
        if (aLayer == null || aClass == null) {
            throw new NullPointerException("Layer name and class name are mandatory!");
        }
        layerName = aLayer;
        className = aClass;
        modifier = someModifier;
        extendingClasses = someInterfaces;
        implementedInterfaces = null;
        return buildDecl(false, true);
	}
	
	public String getInterfaceRefinement(String aLayer, String aClass, ClassInfo[] someInterfaces, ModifierInfo[] someModifier) {
        if (aLayer == null || aClass == null) {
            throw new NullPointerException("Layer name and class name are mandatory!");
        }	    
        layerName = aLayer;
        className = aClass;
        modifier = someModifier;
        extendingClasses = someInterfaces;
        implementedInterfaces = null;
        return buildDecl(true, true);
	}
	
	public String getBaseClass(String aLayer, String aClass, ClassInfo aSuper, ClassInfo[] someInterfaces, ModifierInfo[] someModifier) {
        if (aLayer == null || aClass == null) {
            throw new NullPointerException("Layer name and class name are mandatory!");
        }	    
        layerName = aLayer;
        className = aClass;
        modifier = someModifier;
        implementedInterfaces = someInterfaces;
        if (aSuper != null) {
            extendingClasses = new ClassInfo[] { aSuper };
        }
		return buildDecl(false, false);
	}
	
	public String getRefinement(String aLayer, String aClass, ClassInfo[] someInterfaces, ModifierInfo[] someModifier) {
        if (aLayer == null || aClass == null) {
            throw new NullPointerException("Layer name and class name are mandatory!");
        }
        layerName = aLayer;
        className = aClass;
        modifier = someModifier;
        implementedInterfaces = someInterfaces;
        extendingClasses = null;
        return buildDecl(true, false);
	}
	
	private String buildDecl(boolean aRefinement, boolean anInterface) {
		StringBuilder tmpBuffer = new StringBuilder();
		
		tmpBuffer.append(createLayerStmt());
		tmpBuffer.append("\n");
		
		tmpBuffer.append(createImportStmt(extendingClasses));
		tmpBuffer.append(createImportStmt(implementedInterfaces));
		tmpBuffer.append("\n");
		
		tmpBuffer.append(createModifierString(modifier));
		
		if (aRefinement) {
		    tmpBuffer.append("refines ");
		}
		
		if (anInterface) {
		    tmpBuffer.append("interface ");
		} else {
		    tmpBuffer.append("class ");
		}
		tmpBuffer.append(className);
		tmpBuffer.append(" ");
		
		if (extendingClasses != null && extendingClasses.length > 0) {
		    tmpBuffer.append("extends ");
		    tmpBuffer.append(createCommaSeperatedList(extendingClasses));
		}
		
		if (implementedInterfaces != null && implementedInterfaces.length > 0) {
		    tmpBuffer.append("implements ");
		    tmpBuffer.append(createCommaSeperatedList(implementedInterfaces));
		}
		tmpBuffer.append("{\n\n}");
	    return tmpBuffer.toString();
	}
	
    private String createLayerStmt() {
        StringBuilder tmpBuffer = new StringBuilder("layer ");
        tmpBuffer.append(layerName);
        tmpBuffer.append(";\n");
        return tmpBuffer.toString();
    }
    
    private String createImportStmt(ClassInfo[] someClasses) {
        if (someClasses == null) {
            return "";
        }

        StringBuffer tmpBuffer = new StringBuffer("");
        for (int i = 0; i < someClasses.length; i++) {
            String tmpImport = createImportStmt(someClasses[i]);
            tmpBuffer.append(tmpImport);
        }
        return tmpBuffer.toString();
    }
    
    private static String createImportStmt(ClassInfo aClass) {
        if (aClass == null) {
            return "";
        }

        StringBuffer tmpBuffer = new StringBuffer("");
        if (aClass.getName().equals(aClass.getFullName())
                || aClass.getFullName().startsWith("java.lang.")) {
            // kein import erforderlich
            return "";
        }
        tmpBuffer.append("import ");
        tmpBuffer.append(aClass.getFullName());
        tmpBuffer.append(";\n");
        return tmpBuffer.toString();

    }     
	
    private String createModifierString(ModifierInfo[] someModifier) {
        if (someModifier == null) {
            return "";
        }
        StringBuffer tmpBuffer = new StringBuffer();
        for (int i = 0; i < someModifier.length; i++) {
            tmpBuffer.append(someModifier[i]);
            tmpBuffer.append(" ");
        }
        return tmpBuffer.toString();
    }
    
    private String createCommaSeperatedList(ClassInfo[] someClasses) {
        StringBuffer tmpBuffer = new StringBuffer();
        for (int i=0; i < extendingClasses.length; i++) {
            if (i > 0) {
                tmpBuffer.append(", ");
            }
            tmpBuffer.append(extendingClasses[i].getName());
        }
        tmpBuffer.append(" ");
        return tmpBuffer.toString();
    }
}

layer refactoring_createclass;

import java.io.File;

/**
 * @layer<refactoring_createclass>
 * @author Stephan Klapproth
 * 
 */
class CreateRefinement extends CreateBase {

    private ClassInfo baseClass;

    CreateRefinement(TypeSystem ts, ClassInfo aBaseClass, String aLayer, String aFile) {
        super (ts, aLayer, (aBaseClass != null) ? aBaseClass.getName() : null, aFile);
        baseClass = aBaseClass;
    }

    private boolean layerExists(String aName) {
        return (ts.getLayer(aName) != null);
    }

    private LayerInfo createLayer(String aName, LayerInfo aPrevLayer) {
        if (!layerExists(aName)) {
            ts.addLayer(new LayerInfoImpl(aName, ts, (new File(TypesysUtil.getLayerLocation(aPrevLayer))).getParent()+"\\"+aName),aPrevLayer);
        }
        return ts.getLayer(aName);
    }

    public void transform() throws TransformationException {
        if (!layerExists(_layer)) {
            createLayer(_layer, (LayerInfo) baseClass.getContext());
        }
        if (baseClass == null) {
            throw new TransformationException("No base class specified.");
        }
        super.transform();
    }

    void createClass() throws TransformationException {
        RefinementInfoAst.createEmptyRefinement(ts.getLayer(_layer),
        		((ClassInfoAst) baseClass).getModifier(),
                baseClass.getName(), null, new File(file));
    }
}

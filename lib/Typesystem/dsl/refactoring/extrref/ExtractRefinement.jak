layer extrref;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import mixin.program;

public class ExtractRefinement extends AbstractTransformation {

    private ClassInfoAst refinement;

    private String destinationLayer;
    private String destinationFile;

    private ClassInfoAst movedClass;

    public ExtractRefinement(TypeSystem aTypeSystem, String aSrcLayer, String aSrcRefinement,
            String aDestLayer, String aDestFile) {
		super(aTypeSystem);
        ClassInfo tmpClass = ts.getClazz(aSrcLayer, aSrcRefinement);

        refinement = (ClassInfoAst) tmpClass;
        destinationLayer = aDestLayer;
        destinationFile = aDestFile;
    }

    public void transform() throws TransformationException {
        if (getConflicts().length != 0) {
            throw new TransformationException(
                    "Conflicts prevent the correct execution of the refactoring. Use getConflicts() to get more information.");
        }
        moveRefinement();
    }

    private void moveRefinement() throws TransformationException {
        // Layername ändern
        refinement.changeLayerName(destinationLayer);

        // Layer erzeugen
        LayerInfo tmpDestLayer = createLayer();

        // neues Refinement erzeugen
        if (refinement instanceof RefinementInfoAst)
            movedClass = new RefinementInfoAst(new File(destinationFile),
        	    (program) refinement.getAstNode());
        else
            movedClass = new ClassInfoAst(new File(destinationFile),
        	    (program) refinement.getAstNode());

        // Refinement zu Layer hinzufügen
        tmpDestLayer.addDeclaration(movedClass);

        // alte Klasse löschen
        refinement.delete();
    }

    private LayerInfo createLayer() {
        LayerInfo tmpLayer = ts.getLayer(destinationLayer);
        if (tmpLayer == null) {
            tmpLayer = new LayerInfoImpl(destinationLayer, ts, (new File(((LayerInfoImpl)refinement.getContext()).getLocation())).getParent()+"\\"+destinationLayer);
            // Layer zum Typsystem hinzufügen
            ts.addLayer(tmpLayer, (LayerInfo) refinement.getContext());
        }
        return tmpLayer;
    }

    public Conflict[] getConflicts() {

        // Refinement darf keine neuen Methoden definieren!
        MethodInfo[] tmpMethods = refinement.getMethods();
        List tmpConflicts = new ArrayList();
 		if (refinement instanceof RefinementInfoAst)
            for (int i = 0; i < tmpMethods.length; i++) {
        	MethodInfoAst tmpMethod = (MethodInfoAst) tmpMethods[i];
        	if (tmpMethod.isRefinement()) {
        	    continue;
        	}
        	String tmpDescr = "Refinement introduces new method: "
        	    + tmpMethod.signature();
        	Conflict tmpConflict = new Conflict(tmpDescr,
        		((ClassInfoAst) refinement).getSrcFile().getAbsolutePath(),
        		tmpMethod.startLineNum(), tmpMethod.endLineNum());
        	tmpConflicts.add(tmpConflict);
            }
        return (Conflict[]) tmpConflicts.toArray(new Conflict[tmpConflicts
                .size()]);
    }

    public Saveable[] modifiedClasses() {
        return new Saveable[] { movedClass, refinement };
    }

    ConflictFactory getConflictFactory() {
        throw new UnsupportedOperationException();
    }
}

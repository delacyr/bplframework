layer refactoring_extrmethod;

import java.util.ArrayList;
import java.util.List;

/**
 * @layer<refactoring_extrmethod>
 * @author Stephan Klapproth
 * 
 */
class ExtractMethodConflictFactory implements ConflictFactory {

    ExtractMethod transformation;

    ExtractMethodConflictFactory(ExtractMethod aTransformation) {
        transformation = aTransformation;
    }

    public Conflict[] getConflicts() {
        List tmpConflicts = new ArrayList();
        
        // Zugriffe auf private Objektattribute
        tmpConflicts.addAll(getPrivateFieldAccessConflicts());
        
        // Zugriffe auf private Methoden
        tmpConflicts.addAll(getPrivateMethodCallConflicts());

        return (Conflict[]) tmpConflicts.toArray(new Conflict[tmpConflicts
                .size()]);
    }

    private List getPrivateFieldAccessConflicts() {
        FieldAccess[] tmpRefs = TypesysUtil.getTypeSystem(transformation.getSrcMethod())
                .getRefsToPrivateFields(
                        (MethodInfoAst) transformation.getSrcMethod());
        List tmpConflicts = new ArrayList();
        for (int i = 0; i < tmpRefs.length; i++) {
            tmpConflicts.add(new FieldAccessConflict(tmpRefs[i]));
        }
        return tmpConflicts;
    }
    
    private List getPrivateMethodCallConflicts() {
        MethodInvocation[] tmpCalls = TypesysUtil.getTypeSystem(transformation.getSrcMethod())
                .getCallsToPrivateMethods(
                        (MethodInfoAst) transformation.getSrcMethod());
        List tmpConflicts = new ArrayList();
        for (int i = 0; i < tmpCalls.length; i++) {
            tmpConflicts.add(new MethodCallConflict(tmpCalls[i]));
        }
        return tmpConflicts;
    }
}

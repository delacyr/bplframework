layer refactoring_extrmethod;

import mixin.AST_FieldDecl;
import mixin.AST_FieldDeclElem;
import mixin.ClsBody;
import mixin.program;
import mixin.TypeDeclaration;


/**
 * @layer<refactoring_extrmethod>
 * @author Stephan Klapproth
 * 
 */
refines class MethodInfoAst {

    public void remove() {
        astClassBodyDcl.Delete();
        ((ClassInfoAst) getContext()).removeMethod(signature());
    }

    ClsBody getClassBody(ClassInfoAst aDestClass) {
        TypeDeclaration tmpDecl = ClassInfoAst.getFirstClass((program) aDestClass
                .getAstNode());
        AstCursor c = new AstCursor();
        for (c.First(tmpDecl); c.More(); c.PlusPlus()) {
            if (c.node instanceof ClsBody) {
                return (ClsBody) c.node;
            }
        }
        return null;
    }

    public void move(ClassInfoAst aDestClass){

		////update the AST and the ClassInfo of the Source-Class

		//get the number of empty lines before the method (which will also be extracted)
        AstCursor c = new AstCursor();
        int begin = ((ClassInfoAst)this.getContext()).startLineNum();
        for (c.First(getClassBody((ClassInfoAst)this.getContext()).arg[0]); c.More(); c.PlusPlus()) {
            if (c.node == astClassBodyDcl)
        		break;

            if (c.node.tok!=null && c.node.tok.length!=0){
        		for (int i=0; i<c.node.tok.length; i++){
        	    	if (c.node.tok[i] instanceof AstToken){
        				AstToken t = (AstToken)c.node.tok[i];
        					if (t.lineNum()>begin)
        		   				begin = t.lineNum();
        	    	}
        		}
            }
        }
		int numOfEmptyLines = startLineNum()-begin;

		//temporarily save lineinformation
		begin = endLineNum();
		int methodBeginOld = startLineNum();
		int delta = endLineNum() - (startLineNum()-numOfEmptyLines);

		//delete old references to this method
        ModifierFactory.deleteNode((AST_FieldDeclElem)this.astClassBodyDcl.up);
        ((ClassInfoAst) getContext()).removeMethod(signature());

        //update all linenumbers representing code, located in the classfile
		//after this method
    	for (c.First(((ClassInfoAst)getContext()).getAstNode()); c.More(); c.PlusPlus()) {
    	    if (c.node.tok!=null && c.node.tok.length!=0){
    			for (int i=0; i<c.node.tok.length; i++){
    		    	if (c.node.tok[i] instanceof AstToken){
    					AstToken t = (AstToken)c.node.tok[i];
    					if (t.lineNum()>= begin)
    			    		t.setParms(t.white_space, t.name, t.lineNum()-delta);
    		    	}
    			}
    	    }
    	}

    	//set scope of this method
    	this.setContext(aDestClass);


        ////update the AST and the ClassInfo of the Destination-Class

    	//get the ClsBody-Node and from there the AST_FieldDecl-Node 
		//of the Destination-Class (and if it not exists, create it)
        ClsBody tmpClsBody = getClassBody(aDestClass);
        AST_FieldDecl tmpFieldDecl = tmpClsBody.getAST_FieldDecl();
        if (tmpFieldDecl == null) {
            tmpClsBody.arg[0].arg[0] = new AST_FieldDecl();
            tmpClsBody.arg[0].arg[0].up = tmpClsBody.arg[0];
            tmpFieldDecl = tmpClsBody.getAST_FieldDecl();
        }

        //find the linenumber of the destination class where the method will
        //be inserted
        begin = aDestClass.startLineNum();
        for (c.First(getClassBody(aDestClass).arg[0]); c.More(); c.PlusPlus()) {
            if (c.node.tok!=null && c.node.tok.length!=0){
        		for (int i=0; i<c.node.tok.length; i++){
        	    	if (c.node.tok[i] instanceof AstToken){
        				AstToken t = (AstToken)c.node.tok[i];
        				if (t.lineNum()>begin)
        		    		begin = t.lineNum();
        	    	}
        		}
            }
        }

        //update the linenumbers of this method
        int delta2 = begin-methodBeginOld+numOfEmptyLines;
        for (c.First(this.astClassBodyDcl); c.More(); c.PlusPlus()) {
            if (c.node.tok!=null && c.node.tok.length!=0){
        		for (int i=0; i<c.node.tok.length; i++){
        	    	if (c.node.tok[i] instanceof AstToken){
        				AstToken t = (AstToken)c.node.tok[i];
        				t.setParms(t.white_space, t.name, t.lineNum()+delta2);
        	    	}
        		}
            }
        }

        //use the location to update all linenumbers representing code,
        //located in the destination-file after the inserted method (normally just
        //the end of the class)
    	for (c.First(aDestClass.getAstNode()); c.More(); c.PlusPlus()) {
    	    if (c.node.tok!=null && c.node.tok.length!=0){
    			for (int i=0; i<c.node.tok.length; i++){
    		    	if (c.node.tok[i] instanceof AstToken){
    					AstToken t = (AstToken)c.node.tok[i];
    					if (t.lineNum()>begin)
    			    		t.setParms(t.white_space, t.name, t.lineNum()+delta);
    		    	}
    			}
    	    }
    	}

    	//add the MethodDcl-Node of the extracted Method to the AST_FieldDecl-Node
        //of the Destination-Class and update the ClassInfo of the Destination-Class
    	tmpFieldDecl.add((AST_FieldDeclElem) astClassBodyDcl.up);
    	aDestClass.addDeclaration(((MethodInfoAst) this));
    }

}
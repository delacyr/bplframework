layer refactoring_extrmethod;

/**
 * <b>Refactoring</b>: Extrahieren einer Methode in einen anderen Layer.
 * <p>
 * Sollte die Zielklasse nicht existieren, wird sie angelegt. Dazu muss der
 * Dateiname übergeben werden (siehe
 * {@link #ExtractMethod(String, String, String, String[], String, String)}.
 * 
 * @layer<refactoring_extrmethod>
 * @author Stephan Klapproth
 * 
 */
public class ExtractMethod extends AbstractTransformation {

    private String destinationLayer;

    private String destinationFile;

    private MethodInfo srcMethod;

    /**
     * Konstruktor.
     * <p>
     * Kann verwendet werden, falls die Zielklasse noch nicht existiert.
     * 
     * @param aSrcLayer
     * @param aSrcClass
     * @param aSrcMethod
     * @param someMethodParams
     * @param aDestLayer
     * @param aDestFile
     */
    public ExtractMethod(TypeSystem aTypeSystem, String aSrcLayer, String aSrcClass, String aSrcMethod,
            String[] someMethodParams, String aDestLayer, String aDestFile) {

        this(aTypeSystem, aSrcLayer, aSrcClass, aSrcMethod, someMethodParams, aDestLayer);

        destinationFile = aDestFile;
    }

    /**
     * Konstruktor.
     * <p>
     * Kann verwendet werden, falls die Zielklasse bereits existiert.
     * 
     * @param aSrcLayer
     * @param aSrcClass
     * @param aSrcMethod
     * @param someMethodParams
     * @param aDestLayer
     */
    public ExtractMethod(TypeSystem aTypeSystem, String aSrcLayer, String aSrcClass, String aSrcMethod,
            String[] someMethodParams, String aDestLayer) {
		super(aTypeSystem);
        setSrcMethod(aSrcLayer, aSrcClass, aSrcMethod, someMethodParams);
        destinationLayer = aDestLayer;
    }

    public MethodInfo getSrcMethod() {
        return srcMethod;
    }

    private void setSrcMethod(String aLayer, String aClass, String aMethod,
            String[] someParams) {
        srcMethod = ts.getMethod(aLayer, aClass, aMethod,
                someParams);
        
        if (srcMethod == null) {
            throw new IllegalArgumentException("Method does not exist.");
        }
        
        if (!((MethodInfoAst) srcMethod).isRefinement()) {
            throw new IllegalArgumentException("Method is not a refinement!");
        }
        
        if (srcMethod instanceof ConstructorInfoAst) {
            throw new IllegalArgumentException("Extraction of constructors/constructor refinements currently not supported!");
        }
    }

    public void transform() throws TransformationException {
        ClassInfo tmpDestination = createOrGetExistingRef(
                (ClassInfo) srcMethod.getContext(), 
                destinationLayer, 
                destinationFile);

        MethodInfo[] methods = tmpDestination.getMethods();
		String sig = srcMethod.signature();
		for (int i=0; i<methods.length; i++){
	    	if (sig.equals(methods[i].signature())){
				throw new TransformationException("The method allready exists in the destined class.");
	    	}
		}

        addModifiedClass((Saveable) tmpDestination);
        addModifiedClass((Saveable) srcMethod.getContext());
        ((MethodInfoAst) srcMethod).move((ClassInfoAst) tmpDestination);
    }

    ConflictFactory getConflictFactory() {
        return new ExtractMethodConflictFactory(this);
    }
}

layer refactoring_createmethod;

import java.io.StringReader;

import mixin.MethodDcl;
import mixin.ParseException;
import mixin.Parser;

/**
 * @layer<refactoring_createmethod>
 * @author Stephan Klapproth
 * 
 */
class CreateMethod implements Transformation {

    private ClassInfo clazz;

    private ModifierInfo[] modifier;

    private ClassInfo returnType;

    private String name;

    private ClassInfo[] paramTypes;
    
    private String[] paramNames;

    private MethodInfo createdMethod;

    CreateMethod(ModifierInfo[] someModifier, ClassInfo aReturnType,
            String aMethodName, ClassInfo[] someParamTypes,
            String[] someParamNames, ClassInfo aClass) {
        modifier = someModifier;
        returnType = aReturnType;
        name = aMethodName;
        paramTypes = someParamTypes;
        paramNames = someParamNames;
        clazz = aClass;
    }

    public void transform() throws TransformationException {
        if (!(clazz instanceof ClassInfoAst)) {
            throw new TransformationException("Class cannot be modified.");
        }
        createdMethod = ((ClassInfoAst) clazz).addMethod(getAstNode());
    }

    private MethodDcl getAstNode() throws TransformationException {
        try {
            return (MethodDcl) Parser
                    .getInstance(new StringReader(getMethod())).parse(
                            "MethodDeclaration");
        } catch (ParseException e) {
            throw new TransformationException(e);
        }

    }

    private String getMethod() {
        StringBuilder tmpBuilder = new StringBuilder();
        tmpBuilder.append("\n\n" + RefUtil.indent(1));
        tmpBuilder.append(getModifier());
        tmpBuilder.append(returnType.getFullName());
        tmpBuilder.append(" ");
        tmpBuilder.append(name);
        tmpBuilder.append(getParams());
        tmpBuilder.append("{");
        tmpBuilder.append("\n");
        tmpBuilder.append(RefUtil.indent(1));
        tmpBuilder.append("}\n\n");
        return tmpBuilder.toString();
    }

    private String getModifier() {
        StringBuilder tmpBuilder = new StringBuilder();
        for (int i = 0; i < modifier.length; i++) {
            if (i > 0) {
                tmpBuilder.append(", ");
            }
            tmpBuilder.append(modifier[i].toString());
        }
        if (modifier.length > 0) {
            tmpBuilder.append(" ");
        }
        return tmpBuilder.toString();
    }

    private String getParams() {
        StringBuilder tmpBuilder = new StringBuilder();
        tmpBuilder.append("(");
        for (int i = 0; i < paramTypes.length; i++) {
            if (i > 0) {
                tmpBuilder.append(", ");
            }
            tmpBuilder.append(paramTypes[i].getFullName());
            tmpBuilder.append(" ");
            tmpBuilder.append(paramNames[i]);
        }
        tmpBuilder.append(") ");
        return tmpBuilder.toString();
    }

    public Conflict[] getConflicts() {
        return new Conflict[0];
    }

    public MethodInfo getCreatedMethod() {
        return createdMethod;
    }

    public Saveable[] modifiedClasses() {
        return new Saveable[] { (Saveable) clazz };
    }
}

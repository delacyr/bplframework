layer typesys;

import java.util.ArrayList;
import java.util.List;

import mixin.AST_Modifiers;
import mixin.AstCursor;
import mixin.AstList;
import mixin.AstNode;
import mixin.AstOptNode;
import mixin.AstOptToken;
import mixin.AstToken;
import mixin.Modifier;


/**
 * Utitity Klasse.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 *
 */
public class TypesysUtil {

    /**
     * '.' 
     */
    public static final char DOT = '.';

    public static TypeSystem getTypeSystem(Scope aScope) {
        LayerInfo theLayer = getLayer(aScope);
        if ( theLayer != null ) return theLayer.getTypeSystem();
        return null;
    }

    public static LayerInfo getLayer(Scope aScope) {
        Scope tmpScope = aScope;
        while (tmpScope != null) {
            if (tmpScope instanceof LayerInfo) {
                return (LayerInfo) tmpScope;
            }
            tmpScope = tmpScope.getContext();
        }
        return null;
    }

    public static String getLayerLocation(LayerInfo aLayer){
		if (aLayer instanceof LayerInfoImpl)
			return ((LayerInfoImpl) aLayer).getLocation();
	    throw new IllegalArgumentException("Only layer represented by LayerInfoImpl.jak supported.");
    }

    public static ClassInfo getDeclaringClass(Scope aScope) {
        Scope tmpScope = aScope;
        while (tmpScope != null) {
            if (tmpScope instanceof ClassInfo) {
                return (ClassInfo) tmpScope;
            }
            tmpScope = tmpScope.getContext();
        }
        return null;
    }
    
    public static ClassInfo getDeclaringClass(Declaration aDecl) {
        if (aDecl instanceof Scope) {
            return getDeclaringClass((Scope) aDecl);
        } else {
        	return getDeclaringClass(aDecl.getContext());
        }
    }
    
    public static Scope getParentMethodOrClass(Scope aScope) {
        Scope tmpScope = aScope;
        while (tmpScope != null) {
            if (tmpScope instanceof MethodInfo || tmpScope instanceof ClassInfo) {
                return tmpScope;
            }
            tmpScope = tmpScope.getContext();
        }
        return null;
    }
    
    public static ClassInfo getBaseClass(Scope aScope) {
        ClassInfo tmpClassInfo = TypesysUtil.getDeclaringClass(aScope);
        
        while (tmpClassInfo instanceof RefinementInfoAst) {
            tmpClassInfo = tmpClassInfo.getSuperClass();
        }
        return tmpClassInfo;
    }

    public static ModifierInfo[] getModifierFromAst(AST_Modifiers aModifiers) {
        if (aModifiers == null) {
            return new ModifierInfo[0];
        }
        List tmpModifier = new ArrayList();
        
        AstCursor c = new AstCursor();
        for (c.FirstElement(aModifiers); c.MoreElement(); c.NextElement()) {
            if (c.node instanceof Modifier) {
                tmpModifier.add(ModifierInfo.valueOf(
                        ((Modifier) c.node).GetName()));
            }
        }
        return (ModifierInfo[]) tmpModifier.toArray(
                new ModifierInfo[tmpModifier.size()]);
    }
    
    private static AstToken findLastToken(AstOptNode anOptNode) {
        return (anOptNode.arg[0] != null) ? findLastToken(anOptNode.arg[0])
                : null;
    }

    private static AstToken findLastToken(AstList anAstList) {
        AstToken tmpResult = null;

        for (AstNode l = anAstList.arg[0]; l != null; l = l.right) {
            if (l.arg[0] != null) {
                AstToken tmpTok = findLastToken(l.arg[0]);
                if (tmpTok != null)
                    tmpResult = tmpTok;
            }
        }
        return tmpResult;
    }

    private static AstToken findLastToken(AstOptToken anOptToken) {
        if (anOptToken.tok[0] instanceof AstToken) {
            return (AstToken) anOptToken.tok[0];
        } else if (anOptToken.tok[0] instanceof AstOptToken) {
            return findLastToken((AstOptToken) anOptToken.tok[0]);
        }
        return null;
    }

    // das am weitesten rechts stehende Token des AST finden
    public static AstToken findLastToken(AstNode aNode) {
        if (aNode instanceof AstOptNode) {
            return findLastToken((AstOptNode) aNode);
        }

        if (aNode instanceof AstList) {
            return findLastToken((AstList) aNode);
        }
        
        if (aNode instanceof AstOptToken) {
            return findLastToken((AstOptToken) aNode);
        }

        boolean[] tmpOrder = aNode.printorder();

        int tmpArg = 0;
        int tmpTok = 0;

        AstToken tmpResult = null;

        for (int i = 0; i < tmpOrder.length; i++) {
            if (tmpOrder[i]) {
                // AstToken oder AstOptToken

                if (aNode.tok[tmpTok] instanceof AstToken) {
                    tmpResult = (AstToken) aNode.tok[tmpTok++];
                } else {
                    AstToken tmpToken = findLastToken((AstOptToken) aNode.tok[tmpTok++]);
                    if (tmpToken != null) {
                        tmpResult = tmpToken;
                    }
                }
            } else {
                // AstNode
                AstToken tmpToken = findLastToken(aNode.arg[tmpArg++]);
                if (tmpToken != null) {
                    tmpResult = tmpToken;
                }
            }
        }
        return tmpResult;
    }
    
    public static BlockScope findScopeOfLine(int aLineNum, ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getMethods().length; i++) {
            MethodInfoAst tmpMethod = (MethodInfoAst) aClass.getMethods()[i];
            if (!lineInScope(aLineNum, tmpMethod)) {
                continue;
            }
            return findScopeOfLine(aLineNum, tmpMethod);
        }
        return null;
    }

    private static BlockScope findScopeOfLine(int aLineNum, MethodInfoAst aMethod) {
        for (int i = 0; i < aMethod.getBlockScopes().length; i++) {
            BlockScope tmpBlock = aMethod.getBlockScopes()[i];
            if (!lineInScope(aLineNum, (AstElement) tmpBlock)) {
                continue;
            }
            return findScopeOfLine(aLineNum, tmpBlock);
        }
        return null;
    }
    
    private static BlockScope findScopeOfLine(int aLineNum, BlockScope aBlock) {
        for (int i = 0; i < aBlock.getBlockScopes().length; i++) {
            BlockScope tmpBlock = aBlock.getBlockScopes()[i];
            if (!lineInScope(aLineNum, (AstElement) tmpBlock)) {
                continue;
            }
            return findScopeOfLine(aLineNum, tmpBlock);
        }
        return aBlock;
    }

    private static boolean lineInScope(int aLineNum, AstElement anAstElement) {
        return aLineNum > anAstElement.startLineNum()
                && aLineNum < anAstElement.endLineNum();
    }
    
    
    /*
     * Instanzierung verbieten.
     */
    private TypesysUtil() {
    }
}

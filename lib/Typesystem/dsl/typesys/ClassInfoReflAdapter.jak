layer typesys;

import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Array;
import java.lang.reflect.Method;

/**
 *
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class ClassInfoReflAdapter extends AbstractClassInfo {

    private Class clazz;

    /**
     * Konstruktor.
     * 
     * @param aClass
     *            die Klasse.
     */
    public ClassInfoReflAdapter(Class aClass) {
        clazz = aClass;
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getInterfaces()
     */
    public ClassInfo[] getInterfaces() {
        List tmpInterfaces = new ArrayList();
        for (int i = 0; i < clazz.getInterfaces().length; i++) {
            tmpInterfaces
                    .add(new ClassInfoReflAdapter(clazz.getInterfaces()[i]));
        }
        return (ClassInfo[]) tmpInterfaces.toArray(new ClassInfo[tmpInterfaces
                .size()]);
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#isInterface()
     */
    public boolean isInterface() {
        return clazz.isInterface();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getFullName()
     */
    public String getFullName() {
        return clazz.getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getName()
     */
    public String getName() {
        return clazz.getSimpleName();
    }

    /**
     * UnsupportedOperation.
     * 
     * @param aDeclaration
     *            Declaration.
     * @throws UnsupportedOperationException
     *             bei jedem Aufruf der Methode
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        throw new UnsupportedOperationException();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#getContext()
     */
    public Scope getContext() {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        throw new UnsupportedOperationException();
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getSuperClass()
     */
    public ClassInfo getSuperClass() {
        if (clazz.getSuperclass() == null) {
            return null;
        }
        return new ClassInfoReflAdapter(clazz.getSuperclass());
    }
    
	private Class convertToClass(ArrayType anArray) {
		Class tmpElements = convertToClass(anArray.getTypeOfElements());
		int tmpDim = anArray.getDim();
		return Array.newInstance(tmpElements, new int[tmpDim]).getClass();
	}

	private Class convertToClass(ClassInfo aType) {
		if (aType instanceof ArrayType) {
			return convertToClass((ArrayType) aType);
		}

		if (aType instanceof ClassInfoReflAdapter) {
			return ((ClassInfoReflAdapter) aType).clazz;
		}
		throw new IllegalArgumentException("Illegal type: " + aType.getName());
	}

    private Class[] convertToClassArray(ClassInfo[] someTypes) {
        List tmpParams = new ArrayList();
        for (int i = 0; i < someTypes.length; i++) {
            tmpParams.add(convertToClass(someTypes[i]));
        }
        return (Class[]) tmpParams.toArray(new Class[tmpParams.size()]);
    }

    public MethodInfo findMethod(String aName, ClassInfo[] someParams) {
        if (!validClasses(someParams)) {
            return null;
        }
        
        try {
            return new MethodInfoReflAdapter(clazz.getMethod(aName,
                    convertToClassArray(someParams)));
        } catch (SecurityException e) {
            e.printStackTrace();
            return null;
        } catch (NoSuchMethodException e) {
            return null;
        }
    }
    
    private boolean validClasses(ClassInfo[] someClasses) {
        for (int i = 0; i < someClasses.length; i++) {
            if (!(someClasses[i] instanceof ClassInfoReflAdapter)) {
                return false;
            }
        }
        return true;
    }
	
    public MethodInfo[] getMethods() {
        Method[] tmpMethods = clazz.getDeclaredMethods();
        List userGeneratedMethods = new java.util.LinkedList();

        //Compiler-generierte Methoden sollen nicht übernommen werden, da
        //es sonst zu Ambiguitäten kommen kann (Beispiel: Methode append in
        //der Klasse StringBuilder)
        for (int i = 0; i < tmpMethods.length; i++) {
            if (!(tmpMethods[i].isBridge() || tmpMethods[i].isSynthetic())){
        		userGeneratedMethods.add(tmpMethods[i]);
            }
        }

        MethodInfo[] tmpResult = new MethodInfo[userGeneratedMethods.size()];
        for (int i = 0; i < userGeneratedMethods.size(); i++) {
            tmpResult[i] = new MethodInfoReflAdapter((Method)userGeneratedMethods.get(i));
        }

        return tmpResult;
    }
    
    
    public FieldInfo getField(String aName) {
        try {
            //wenn es sich bei der Klasse um ein Array handelt wird das Feld
            //length durch getDeclaredFields() oder getFields() nicht
            //erfasst
            if (clazz.isArray() && aName.equals("length"))
        		return new LengthFieldInfoReflAdapter(clazz);

            return new ModifiedFieldInfoReflAdapter(clazz.getDeclaredField(aName));
        } catch (SecurityException e) {
            // ignore
        } catch (NoSuchFieldException e) {
            // ignore
        }
        return null;
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getFields()
     */
    public FieldInfo[] getFields() {
        FieldInfo[] tmpFields = new FieldInfo[clazz.getDeclaredFields().length];

        for (int i = 0; i < clazz.getDeclaredFields().length; i++) {
            tmpFields[i] = new ModifiedFieldInfoReflAdapter(
                    clazz.getDeclaredFields()[i]);
        }
        return tmpFields;
    }    
}

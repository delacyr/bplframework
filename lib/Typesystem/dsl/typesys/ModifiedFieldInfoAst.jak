layer typesys;

import java.util.Arrays;

import mixin.AST_Modifiers;
import mixin.AST_TypeName;
import mixin.VarDecl;


/**
 * ModifiedFieldInfoAst erweitert FieldInfoAst um ein zusätzliches Attribut für
 * Modifikatoren (z. B. public, private, protected...).
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class ModifiedFieldInfoAst extends FieldInfoAst implements Modified {

    ModifierInfo[] modifier;
    
    /**
     * Konstruktor.
     * 
     * @param aTypeName
     *            AstNode, der den Typ der Variablen beschreibt.
     * @param aVarDecl
     *            AstNode, der den Namen der Variablen beinhaltet.
     * @param aModifiers
     *            AstNode, der die Modifikatoren beinhaltet.
     */
    public ModifiedFieldInfoAst(AST_TypeName aTypeName, VarDecl aVarDecl,
            AST_Modifiers aModifiers) {
        super(aTypeName, aVarDecl);
        modifier = TypesysUtil.getModifierFromAst(aModifiers);
    }
    
    public ModifierInfo[] getModifier() {
        return modifier;
    }

    /* (non-Javadoc)
     * @see Modified#isPublic()
     */
    public boolean isPublic() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PUBLIC));
    }

    /* (non-Javadoc)
     * @see Modified#isPrivate()
     */
    public boolean isPrivate() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PRIVATE));
    }

    /* (non-Javadoc)
     * @see Modified#isProtected()
     */
    public boolean isProtected() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PROTECTED));
    }

    /* (non-Javadoc)
     * @see Modified#isPackagePrivate()
     */
    public boolean isPackagePrivate() {
        return !(isPublic() || isPrivate() || isProtected());
    }
}

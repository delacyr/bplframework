layer typesys;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

class ModifiedFieldInfoReflAdapter implements FieldInfo, Modified {

    private Field field;

    public ModifiedFieldInfoReflAdapter(Field aField) {
        field = aField;
    }

    public ClassInfo getType() {
        int tmpArrayDim = 0;

        String tmpName = field.getType().getCanonicalName();
        while (tmpName.endsWith("[]")) {
            tmpArrayDim++;
            tmpName = tmpName.substring(0, tmpName.length() - 2);
        }

        Class tmpType = field.getType();
        while (tmpType.isArray()){
            tmpType = tmpType.getComponentType();
        }

        if (tmpArrayDim>0) 
	    	return new ArrayType(new ClassInfoReflAdapter(tmpType), tmpArrayDim);
		else 
	    	return new ClassInfoReflAdapter(tmpType);
    }

    public Scope getContext() {
        int tmpArrayDim = 0;

        String tmpName = field.getDeclaringClass().getCanonicalName();
        while (tmpName.endsWith("[]")) {
            tmpArrayDim++;
            tmpName = tmpName.substring(0, tmpName.length() - 2);
        }

        Class tmpType = field.getDeclaringClass();
        while (tmpType.isArray()){
            tmpType = tmpType.getComponentType();
        }

        if (tmpArrayDim>0) 
	    	return new ArrayType(new ClassInfoReflAdapter(tmpType), tmpArrayDim);
		else 
	    	return new ClassInfoReflAdapter(tmpType);
    }

    public void setContext(Scope scope) {
        throw new UnsupportedOperationException();
    }

    public String getFullName() {
        return getContext().getFullName() + "." + getName();
    }

    public String getName() {
        return field.getName();
    }

    public boolean isPackagePrivate() {
        return !(isPrivate() || isProtected() || isPublic());
    }

    public boolean isPrivate() {
        return java.lang.reflect.Modifier.isPrivate(field.getModifiers());
    }

    public boolean isProtected() {
        return java.lang.reflect.Modifier.isProtected(field.getModifiers());
    }

    public boolean isPublic() {
        return java.lang.reflect.Modifier.isPublic(field.getModifiers());
    }

    public ModifierInfo[] getModifier() {
		List modifier = new ArrayList();
		int mod = field.getModifiers();

		if (java.lang.reflect.Modifier.isAbstract(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.ABSTRACT));
		if (java.lang.reflect.Modifier.isFinal(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.FINAL));
		if (java.lang.reflect.Modifier.isNative(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.NATIVE));
		if (java.lang.reflect.Modifier.isPrivate(mod))
	   		modifier.add(ModifierInfo.valueOf(ModifierInfo.PRIVATE));
		if (java.lang.reflect.Modifier.isProtected(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.PROTECTED));
		if (java.lang.reflect.Modifier.isPublic(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.PUBLIC));
		if (java.lang.reflect.Modifier.isStatic(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.STATIC));
		if (java.lang.reflect.Modifier.isSynchronized(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.SYNCHRONIZED));
		if (java.lang.reflect.Modifier.isTransient(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.TRANSIENT));
		if (java.lang.reflect.Modifier.isVolatile(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.VOLATILE));

		return	(ModifierInfo[]) modifier.toArray(new ModifierInfo[modifier.size()]);
    }

}
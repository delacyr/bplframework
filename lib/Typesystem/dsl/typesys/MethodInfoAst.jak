layer typesys;

import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

import mixin.AST_FieldDecl;
import mixin.AST_FieldDeclElem;
import mixin.AST_Modifiers;
import mixin.AST_ModifiersElem;
import mixin.AST_ParList;
import mixin.AstCursor;
import mixin.AstNode;
import mixin.AstOptNode;
import mixin.AstToken;
import mixin.ClassBodyDeclaration;
import mixin.ClsBody;
import mixin.DecNameDim;
import mixin.FormParDecl;
import mixin.MDSBlock;
import mixin.MethodDcl;
import mixin.ModAbstract;
import mixin.MthDector;
import mixin.QName;
import mixin.TypeDeclaration;
import mixin.program;


/**
 * Implementiert das Interface MethodInfo und bezieht die Informationen aus dem
 * AST.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class MethodInfoAst extends AbstractMethodInfo implements AstElement {

    private ClassInfo clazz;

    private ClassInfo returnType;

    private FieldInfo[] params;

    ModifierInfo[] modifier;

    ClassBodyDeclaration astClassBodyDcl;

    private BlockCScope blockScope;
    
    /**
     * Konstruktor.
     * 
     * @param aDecl
     *            MethodDcl AST Knoten.
     */
    public MethodInfoAst(ClassBodyDeclaration aDecl) {
        astClassBodyDcl = aDecl;
        modifier = TypesysUtil.getModifierFromAst(getModifiersASTNode());
        initName();
        initStatements();
    }
    
    void isValidClassBodyDcl() {
        if (!(astClassBodyDcl instanceof MethodDcl)) {
            throw new IllegalArgumentException("aDecl has to be of type MethodDcl");
        }
    }
    
    AST_Modifiers getModifiersASTNode() {
        return ((MethodDcl) astClassBodyDcl).getAST_Modifiers();
    }
	
    public ModifierInfo[] getModifier() {
        return modifier;
    }
    
    void initStatements() {
        MethodDcl tmpDcl = (MethodDcl) astClassBodyDcl;
        if (!(tmpDcl.getMethodDeclSuffix() instanceof MDSBlock)) {
            return;
        }
        MDSBlock tmpMDSBlock = (MDSBlock) tmpDcl.getMethodDeclSuffix();
        blockScope = (BlockCScope) AbstractBlockScope.newInstance(tmpMDSBlock
                .getBlock());
        blockScope.setContext(this);
    }
    
    private boolean isAbstract() {
        if (clazz.isInterface()) {
            return true;
        }
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.ABSTRACT));
    }

    public AstNode getAstNode() {
        return astClassBodyDcl;
    }

    /*
     * (non-Javadoc)
     * 
     * @see AstElement#startLineNum()
     */
    public int startLineNum() {
        AstToken tmpTok = getAstNode().findToken();
        if (tmpTok == null) {
            throw new TypesysException("Can't get the first token of "
                    + getAstNode().className());
        }
        return tmpTok.lineNum();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AstElement#endLineNum()
     */
    public int endLineNum() {
        AstToken tmpTok = TypesysUtil.findLastToken(getAstNode());
        if (tmpTok == null) {
            throw new TypesysException("Can't get the last token of "
                    + getAstNode().className());
        }
        return tmpTok.lineNum();
    }
    
    BlockScope[] getBlockScopes() {
        if (!isAbstract() && blockScope != null) {
            return new BlockScope[] { blockScope };
        }
        return new BlockScope[0];
    }
    
    /**
     * Gibt zurück, ob es sich um eine Methodenverfeinerung handelt.
     * 
     * @return true, wenn es sich um eine Methodenverfeinerung handelt.
     */
    public boolean isRefinement() {
        // wenn Methode in einer Basisklasse, kann sie keine Verfeinerung sein
        if (!(clazz instanceof RefinementInfoAst)) {
            return false;
        }
        ClassInfo tmpClass = clazz;
        while (tmpClass instanceof RefinementInfoAst) {
            tmpClass = tmpClass.getSuperClass();
            // in Klasse nach Methode suchen:
            if (((ClassInfoAst) tmpClass).getMethod(getName(), getParameters()) != null) {
                return true;
            }
        }
        return false;
    }

    /**
     * Gibt alle Methodenaufrufe zurück, die sich innerhalb der Methode,
     * repräsentiert durch dieses Objekt, befinden.
     * 
     * <p>
     * Falls sich in der Methode kein Methodenaufruf befindet, wird ein Array
     * der Länge 0 zurückgegeben.
     * 
     * @return Array mit allen Methodenaufrufen.
     */
    public MethodInvocation[] getMethodInvocations() {
        if (isAbstract() || blockScope == null) {
            return new MethodInvocation[0];
        }
        return blockScope.getMethodInvocations();
    }
    
    /**
     * Gibt alle Referenzen auf Klassen zurück, die sich innerhalb der Methode,
     * repräsentiert durch dieses Objekt, befinden.
     * 
     * <p>
     * Falls sich in der Methode keine Klassenreferenzen befinden, wird ein Array
     * der Länge 0 zurückgegeben.
     * 
     * @return Array mit allen Klassenreferenzen.
     */
    public ClassReference[] getClassReferences() {
        if (isAbstract() || blockScope == null) {
            return new ClassReference[0];
        }
        return blockScope.getClassReferences();
    }

    /**
     * Gibt alle Objektattributzugriffe zurück, die sich innerhalb der Methode,
     * repräsentiert durch dieses Objekt, befinden.
     * 
     * <p>
     * Falls sich in der Methode kein Attributzugriff befindet, wird ein Array
     * der Länge 0 zurückgegeben.
     * 
     * @return Array mit allen Attributzugriffen.
     */
    public FieldAccess[] getFieldAccesses() {
        if (isAbstract() || blockScope == null) {
            return new FieldAccess[0];
        }
        return blockScope.getFieldAccesses();
    }

    private ClassInfo initReturnType() {
        if (getContext() == null) {
            throw new IllegalStateException("Decl. scope for " + getFullName() + " not set!");
        }

        int tmpDim = ArrayType.getDimCount(((MethodDcl) astClassBodyDcl).getAST_TypeName());
        return TypeFactory.valueOf(((MethodDcl) astClassBodyDcl).getAST_TypeName().GetName(),
                getContext(), tmpDim);
    }
    
    AST_ParList getAST_ParListNode() {
        return ((MthDector) ((MethodDcl) astClassBodyDcl)
                .getMethodDeclarator()).getAST_ParList();
    }
    
    private void initParams() {
        AST_ParList tmpParList = getAST_ParListNode();
        if (tmpParList == null) {
            params = new FieldInfo[0];
            return;
        }

        List tmpParams = new ArrayList();
        AstCursor c = new AstCursor();
        for (c.FirstElement(tmpParList); c.MoreElement(); c.NextElement()) {
            FormParDecl tmpParDecl = (FormParDecl) c.node;
            FieldInfo tmpParam = new FieldInfoAst(tmpParDecl.getAST_TypeName(),
                    (DecNameDim) tmpParDecl.getVariableDeclaratorId());
            tmpParams.add(tmpParam);
            tmpParam.setContext(this);
        }
        params = (FieldInfo[]) tmpParams
                .toArray(new FieldInfo[tmpParams.size()]);
    }
    
    QName getQNameNode() {
        return ((MthDector) ((MethodDcl) astClassBodyDcl).getMethodDeclarator()).getQName();
    }

    private void initName() {
        name = getQNameNode().GetName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#getContext()
     */
    public Scope getContext() {
        return clazz;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        if (!(aScope instanceof ClassInfo)) {
            throw new IllegalArgumentException(aScope.getClass().getName()
                    + " is not a valid Scope for a method!");
        }
        clazz = (ClassInfo) aScope;
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getFullName()
     */
    public String getFullName() {
        return clazz.getFullName() + TypesysUtil.DOT + getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        throw new UnsupportedOperationException("Can't add declarations "
                + "to a method.");
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#getReturnType()
     */
    public ClassInfo getReturnType() {
        if (returnType == null) {
            returnType = initReturnType();
        }
        return returnType;
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#getParameters()
     */
    public ClassInfo[] getParameters() {
        List tmpTypes = new ArrayList();
        for (int i = 0; i < getParams().length; i++) {
            tmpTypes.add(getParams()[i].getType());
        }
        return (ClassInfo[]) tmpTypes.toArray(new ClassInfo[tmpTypes.size()]);
    }

    FieldInfo[] getParams() {
        if (params == null) {
            initParams();
        }
        return params;
    }

    public String signature() {
        return getSignature(getName(), getParameters());
    }

    public FieldInfo findField(String aName) {
        for (int i = 0; i < getParams().length; i++) {
            if (getParams()[i].getName().equals(aName)) {
                return getParams()[i];
            }
        }
        if (clazz == null) {
            throw new IllegalStateException("Declaring class of " + getFullName() + " not set.");
        }
        return clazz.findField(aName);
    }

    public boolean isPublic() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PUBLIC));
    }

    public boolean isPrivate() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PRIVATE));
    }

    public boolean isProtected() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PROTECTED));
    }
}

layer typesys;

import java.util.HashMap;
import java.util.Map;

import mixin.AstNode;


/**
 * Implementierung von {@link LayerInfo}.
 * 
 * Initialisierung kann entweder über den öffentlichen Konstruktor erfolgen,
 * oder über die Fabrikmethode {@link LayerInfoImpl#newInstance(AstNode)}.
 * Bei letzterer wird der Name des Layers aus dem AST ermittelt.
 * 
 * @layer typesys
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 */
class LayerInfoImpl extends AbstractNamed implements LayerInfo {

    Map classes; // Elemente vom Typ ClassInfo,

    // Schlüssel ist der Klassenname als String

	private String location;

    private LayerInfo next;

    private LayerInfo prev;
    
    private TypeSystem ts;

    /**
     * Konstruktor.
     * 
     * @param aName
     *            Der Name des Layers.
     * @param aTypeSystem
     *            Das assoziierte Typsystem.
	 * @param theLocation
     *            Der Verzeichnispfad des Layers.
     */
    public LayerInfoImpl(String aName, TypeSystem aTypeSystem, String theLocation) {
        name = aName;
        ts = aTypeSystem;
        location = theLocation;
        classes = new HashMap();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getFullName()
     */
    public String getFullName() {
        return getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#getTypeSystem()
     */
	public TypeSystem getTypeSystem() {
		return ts;
	}

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#getClasses()
     */
    public ClassInfo[] getClasses() {
        return (ClassInfo[]) classes.values().toArray(
                new ClassInfo[classes.size()]);
    }

	public String getLocation(){
		return location;
	}

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#findClass(java.lang.String)
     */
    public ClassInfo findClass(String aName) {

        if (classes.containsKey(aName)) {
            return (ClassInfo) classes.get(aName);
        }

        LayerInfo tmpLayer = getPrev();
        while (tmpLayer != null) {
            ClassInfo tmpClass = tmpLayer.findClass(aName);
            if (tmpClass != null) {
                return tmpClass;
            }
            tmpLayer = tmpLayer.getPrev();
        }
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#addDeclaration(typesysapi.Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {

        if (aDeclaration instanceof ClassInfo) {
            classes.put(aDeclaration.getName(), aDeclaration);
            aDeclaration.setContext(this);

        } else {
            throw new IllegalArgumentException("LayerInfo can't contain a "
                    + "declaration of type "
                    + aDeclaration.getClass().getName());
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#getContext()
     */
    public Scope getContext() {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#setContext(typesysapi.Scope)
     */
    public void setContext(Scope aScope) {
        throw new UnsupportedOperationException();
    }

    /**
     * Statische Fabrikmethode, die ein leeres LayerInfo Objekt erzeugt
	 * (d.h. das Layer enthält noch keine jak-Dateien)
     * 
     * @param aTypeSystem
     *            Das dem Layer assossiierte Typsystem.
	 * @param layerName
     *            Der Name des neuen Layers.
	 * @param theLocation
     *            Der Verzeichnispfad des Layers.
     * @return Layer, der in dem AST definiert wird.
     */
    public static LayerInfo newInstance(TypeSystem aTypeSystem, String layerName, String theLocation) {
       return new LayerInfoImpl(layerName, aTypeSystem, theLocation);
    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#first()
     */
    public LayerInfo first() {
        LayerInfo tmpLayer = this;
        while (tmpLayer.getPrev() != null) {
            tmpLayer = tmpLayer.getPrev();
        }
        return tmpLayer;
    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#getNext()
     */
    public LayerInfo getNext() {
        return next;
    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#getPrev()
     */
    public LayerInfo getPrev() {
        return prev;
    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#setNext(typesysapi.LayerInfo)
     */
    public void setNext(LayerInfo aLayer) {
        next = aLayer;

    }

    /*
     * (non-Javadoc)
     * 
     * @see LayerInfo#setPrev(typesysapi.LayerInfo)
     */
    public void setPrev(LayerInfo aLayer) {
        prev = aLayer;
    }
    
    public FieldInfo findField(String name) {
        return null;
    }    
}

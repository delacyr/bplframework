layer typesys;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mixin.AstNode;
import mixin.AstToken;
import mixin.MthCall;


/**
 * Repräsentiert einen Methodenaufruf.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class MethodInvocation implements Declaration, AstElement {

    private Scope callingFrom;

    private String methodName;

    private ClassInfo methodClass;

    private ClassInfo[] methodParams;

    private MethodInfo method;
    
    private MthCall node;
    
    private static final Log LOG = 
            LogFactory.getLog("typesys.MethodInvocation");
    
    /**
     * Konstruktor.
     * 
     * @param aName
     *            der Name der aufzurufenden Methode.
     * @param someParams
     *            die Typen der Methodenargumente.
     * @param aMethodClass
     *            die Klasse/ das Interface, in der die Methode gesucht wird.
     * @param aNode
     *            MthCall Knoten 
     */
    public MethodInvocation(String aName, ClassInfo[] someArgumenttypes,
            ClassInfo aMethodClass, MthCall aNode) {
        methodName = aName;
        methodParams = someArgumenttypes;
        methodClass = aMethodClass;
        node = aNode;
    }

    /**
     * Ermittelt die aufgerufene Methode.
     * 
     * @return die Methode, die aufgerufen wird.
     */
    public MethodInfo getMethod() {
        if (method == null) {
            initMethod();
        }
        return method;
    }

    private boolean isAmbiguous(MethodInfo aMethod1, MethodInfo aMethod2) {
        if (aMethod1.isMoreSpecific(aMethod2)
                && aMethod2.isMoreSpecific(aMethod1)) {
            return true;
        }
        
        if (!aMethod1.isMoreSpecific(aMethod2)
                && !aMethod2.isMoreSpecific(aMethod1)) {
            return true;
        }
        return false;
    }

    private void initMethod() {
        ClassInfo tmpClass = methodClass;
        boolean tmpAmbiguous = false;
        while (tmpClass != null) {
            for (int i = 0; i < tmpClass.getMethods().length; i++) {
                MethodInfo tmpMethod = tmpClass.getMethods()[i];
                if (tmpMethod.isApplicable(methodName, methodParams)
                        && tmpMethod.isAccessible(TypesysUtil
                                .getDeclaringClass(callingFrom))) {
                    if (method == null) {
                        method = tmpMethod;
                        continue;
                    }
                    
                    if (isAmbiguous(method, tmpMethod)) {
                        tmpAmbiguous = true;
                        continue;
                    }

                    if (tmpMethod.isMoreSpecific(method)) {
                        tmpAmbiguous = false;
                        method = tmpMethod;
                    }
                }
            }
            tmpClass = tmpClass.getSuperClass();
        }

        if ( method == null ){
            for (int i=0; i<methodClass.getInterfaces().length; i++)
        		initMethodFromInterfaces(methodClass.getInterfaces()[i]);
        }

        if (method == null) {
        	String message = "Can't determine the corresponding method: " + AbstractMethodInfo.getSignature(methodName,
                    methodParams) + " in " + TypesysUtil.getDeclaringClass(getContext());
            TypesysException ex = new TypesysException(message);
            LOG.error(ex);
            throw ex;
        }

        if (tmpAmbiguous) {
            throw new TypesysException("The method invocation of " + AbstractMethodInfo.getSignature(methodName,
                    methodParams) + " is ambiguous.");
        }
    }

    private void initMethodFromInterfaces(ClassInfo anInterfaceClass){

		//Ambiguitäten können bei Interfaces nicht auftreten.
		//Als MethodInfo wird die erste spezifischste Methode geliefert.
        for (int i = 0; i < anInterfaceClass.getMethods().length; i++) {
            MethodInfo tmpMethod = anInterfaceClass.getMethods()[i];
            if (tmpMethod.isApplicable(methodName, methodParams)
        	    && tmpMethod.isAccessible(TypesysUtil
        		    .getDeclaringClass(callingFrom))) {
        		if ( method == null ) {
        	    	method = tmpMethod;
        	    	continue;
        		}

        		if (tmpMethod.isMoreSpecific(method)) {
        	    	method = tmpMethod;
        		}
            }
        }

        for (int i=0; i<anInterfaceClass.getInterfaces().length; i++){
            ClassInfo tmpClass = anInterfaceClass.getInterfaces()[i];
            initMethodFromInterfaces(tmpClass);
        }
    }

    public Scope getContext() {
        return callingFrom;
    }

    public void setContext(Scope aScope) {
        callingFrom = aScope;
    }

    public String getFullName() {
        return getName();
    }

    public String getName() {
        return AbstractMethodInfo.getSignature(methodName, methodParams);
    }

    public int endLineNum() {
    	return ((AstToken)node.getArguments().tok[1]).lineNum();
    }

    public AstNode getAstNode() {
        return node;
    }

    public int startLineNum() {
        return node.findToken().lineNum();
    }
}

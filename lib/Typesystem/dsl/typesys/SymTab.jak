layer typesys;

import java.util.HashMap;
import java.util.Stack;

/**
 * Symboltabelle.
 * <p>
 * Als Singleton implementiert.
 * <p>
 * Scopes werden auf einem Stack gespeichert. Deklarationen können dann über die
 * Methode {@link #declare(Declaration)} auf einfache Weise dem aktuellen Scope
 * hinzugefügt werden.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
final class SymTab {

    // HashMap, die für jedes TypSystem eine SymTab-Instanz verwaltet
    private static HashMap INSTANCES = new HashMap();

    private Stack scopeStack;

    /*
     * Nicht&ouml;ffentlicher Konstruktor, so dass keine weiteren Instanzen
     * erzeugt werden k&ouml;nnen.
     */
    private SymTab() {
        scopeStack = new Stack();
    }

    /**
     * Gibt den aktuellen Scope zurück.
     * <p>
     * Falls sich kein Scope Element auf dem Stack befindet, wird
     * <code>null</code> zurückgegeben.
     * 
     * @return aktueller Scope.
     */
    public Scope currentScope() {
        return scopeStack.isEmpty() ? null : (Scope) scopeStack.peek();
    }

    /**
     * In den Scope aScope wechseln.
     * 
     * @param aScope
     *            Scope, in den gewechselt werden soll.
     */
    public void enterScope(Scope aScope) {
        scopeStack.push(aScope);
    }

    /**
     * Aktuellen Scope verlassen.
     * 
     * @throws IllegalStateException
     *             wenn vorher kein Scope betreten wurde.
     */
    public void leaveScope() {
        if (scopeStack.isEmpty()) {
            throw new IllegalStateException("No scope to leave.");
        }
        scopeStack.pop();
    }

    /**
     * Fügt die Deklaration <code>aDeclaration</code> dem aktuellen Scope
     * hinzu.
     * 
     * @param aDeclaration
     *            Deklaration, die hinzugefügt werden soll.
     */
    public void declare(Declaration aDeclaration) {
        if (scopeStack.isEmpty()) {
            throw new IllegalStateException(
                    "No scope to add the declaration to. "
                            + "Use enterScope() first.");
        }
        currentScope().addDeclaration(aDeclaration);
    }
    
    /**
     * Fügt die Deklarationen in dem Array dem aktuellen Scope hinzu.
     * 
     * @param someDeclarations
     *            Array mit den Deklarationen, die zu dem aktuellen Scope
     *            hinzugefügt werden sollen.
     */
    public void declare(Declaration[] someDeclarations) {
        if (someDeclarations == null) {
            throw new IllegalArgumentException("No declarations specified.");
        }
        for (int i = 0; i < someDeclarations.length; i++) {
            declare(someDeclarations[i]);
        }
    }
    
    /**
     * Setzt SymTab zurück.
     */
    public void reset() {
        scopeStack.clear();
    }

    /**
     * Zugriff auf die Instanzen von SymTab.
     * 
     * @return Gibt die einzige <code>SymTab</code> Instanz für jedes TypSystem zur&uuml;ck.
     * Wenn sie noch nicht existiert, wird sie angelegt.
     */
    public static SymTab getInstance(TypeSystem t) {
		if (exists(t))
			return (SymTab) INSTANCES.get(t);

		SymTab s = new SymTab();
		INSTANCES.put(t, s);
		return s;
    }

    public static boolean exists (TypeSystem t){
		return INSTANCES.containsKey(t);
    }

   	public static void deleteInstance(TypeSystem t) {
		INSTANCES.remove(t);
    }

}
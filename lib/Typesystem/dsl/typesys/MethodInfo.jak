layer typesys;

/**
 * Dieses Interface beschreibt eine Methode.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
public interface MethodInfo extends Declaration, Scope, Modified {

    /**
     * Gibt den Rückgabetyp der Methode zurück.
     * 
     * @return der Rückgabetyp der Methode.
     */
    public ClassInfo getReturnType();

    /**
     * Gibt die Typen der Parameter der Methode zurück.
     * 
     * <p>
     * Falls eine Methodendeklaration keine Parameter hat, wird ein Array der
     * Länge <code>0</code> zurückgegeben.
     * 
     * @return die Typen der Parameter der Methode.
     */
    public ClassInfo[] getParameters();

    /**
     * Gibt die Signatur der Methode zurück.
     * 
     * @return die Signature der Methode.
     */
    public String signature();

    /**
     * Überprüft, ob ein Methodenaufruf zu der Methode, repräsentiert durch
     * dieses <code>MethodInfo</code> Objekt, passt.
     * 
     * <p>
     * Eine Methode ist passend zu einem Methodenaufruf, wenn folgende
     * Bedingungen erfüllt sind: <br>
     * 1. die Namen müssen übereinstimmen. <br>
     * 2. die Anzahl der Parameter der Methode stimmen mit der Anzahl der
     * Argumente des Aufrufes überein. <br>
     * 3. der Typ eines jeden einzelnen Arguments, kann in den Typ eines jeden
     * Parameters überführt werden.
     * <p>
     * Siehe dazu auch <em>Java Language Specification 1.0</em> Kapitel
     * 15.11.2.1
     * 
     * @param aName
     *            der Name der aufzurufenden Methode
     * @param someArguments
     *            die Argumente des Methodenaufrufes.
     * @return <code>true</code>, wenn die Methode, repräsentiert durch
     *         dieses Objekt, zu dem Methodenaufruf passt, sonst
     *         <code>false</code>.
     */
    public boolean isApplicable(String aName, ClassInfo[] someArguments);

    /**
     * Überprüft, ob die Methode, repräsentiert durch dieses
     * <code>MethodInfo</code> Objekt, von der übergebenen Klasse
     * <code>ClassInfo</code> aus, aufgerufen werden kann.
     * 
     * @param aClass
     *            die Klasse, die auf die Methode zugreifen will.
     * @return <code>true</code> wenn von der Klasse aus, auf die Methode
     *         zugegriffen werden kann, sonst <code>false</code>.
     */
    public boolean isAccessible(ClassInfo aClass);

    /**
     * Überprüft, ob die Methode, repräsentiert durch dieses
     * <code>MethodInfo</code> Objekt, spezifischer ist, als die übergebene
     * Methode.
     * 
     * <p>
     * Sei m ein Name und es gäbe zwei Methodendeklarationen mit dem Namen m mit
     * jeweils n Parametern. T sei die Klasse oder das Interface, in der sich
     * die eine Methodendeklaration befindet und T1, ..., Tn seien die Typen der
     * Parameter. Die Klasse oder das Interface der anderen Deklaration wird mit
     * U bezeichnet, die Typen der Parameter mit U1, ..., Un. Eine Methode m,
     * deklariert in T, ist spezifischer als die Methode m, deklariert in U,
     * wenn gilt:<br>
     * 1. T kann nach U konvertiert werden. <br>
     * 2. Tj kann nach Uj konvertiert werden, für 1 <= j <= n.
     * <p>
     * Siehe dazu auch <em>Java Language Specification 1.0</em> Kapitel
     * 15.11.2.2
     * 
     * @param aMethod
     *            die Methode, gegen die auf höhere Spezialisierung getestet
     *            werden soll.
     * @return <code>boolean</code> der angibt, ob die Methode dieses Objekts
     *         spezifischer ist, als die übergebene Methode.
     */
    public boolean isMoreSpecific(MethodInfo aMethod);

    /**
     * Gibt zurück, ob es sich um eine Methodenverfeinerung handelt.
     * 
     * @return true, wenn es sich um eine Methodenverfeinerung handelt.
     */
    public boolean isRefinement();

}

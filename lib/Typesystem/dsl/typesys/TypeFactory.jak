layer typesys;

import java.util.HashMap;
import java.util.Map;

/**
 * Factory zur Erzeugung von {@link ClassInfo} Instanzen.
 * <p>
 * Mittels der statischen Factory Methoden lassen sich Instanzen von konkreten
 * Implementierungen der {@link ClassInfo} Schnittstelle, etwa für JAVA
 * Datentypen oder FOP Klassen, erzeugen.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class TypeFactory {

    public static final String INT = "int";
    
    public static final String LONG = "long";

    public static final String BOOLEAN = "boolean";

    public static final String FLOAT = "float";

    public static final String DOUBLE = "double";

    public static final String BYTE = "byte";

    public static final String CHAR = "char";

    public static final String SHORT = "short";

    public static final String VOID = "void";

    private static final char ASTERISK = '*';

    private static final String JAVA_LANG = "java.lang";
    
    public static final ClassInfo OBJECT = new ClassInfoReflAdapter(
            Object.class);

    public static final ClassInfo CLONEABLE = new ClassInfoReflAdapter(
            Cloneable.class);
            
    public static final ClassInfo STRING = new ClassInfoReflAdapter(
            String.class);

    private static Map primitiveTypes;

    static {
        addDefault(INT, int.class);
        addDefault(LONG, long.class);
        addDefault(BOOLEAN, boolean.class);
        addDefault(FLOAT, float.class);
        addDefault(DOUBLE, double.class);
        addDefault(BYTE, byte.class);
        addDefault(CHAR, char.class);
        addDefault(SHORT, short.class);
        addDefault(VOID, void.class);
    }

    /**
     * Gibt die {@link ClassInfo} Instanz für den primitiven Datentypen
     * <code>aType</code> zurück.
     * 
     * @param aType
     *            Name des primitiven Datentyps.
     * @return den primitiven Datentyp.
     * @throws IllegalArgumentException
     *             wenn <code>aType</code> kein gültiger primitiver Datentyp
     *             ist.
     */
    public static ClassInfo primitiveType(String aType) {
        if (!primitiveTypes.containsKey(aType)) {
            throw new IllegalArgumentException(aType + " is not a valid primitive.");
        }
        return (ClassInfo) primitiveTypes.get(aType);
    }
    
    /**
     * Ermittelt, ob es sich bei der übergebenen Klasse um einen primitiven
     * Datentypen handelt.
     * 
     * @param aClass
     *            die Klasse, die überprüft werden soll.
     * @return true wenn es sich um einen primitiven Datentyp handelt, sonst
     *         false.
     */
    public static boolean isPrimitive(ClassInfo aClass) {
        return primitiveTypes.containsValue(aClass);
    }

    /**
     * Sucht den Typ mit dem Namen <code>aName</code> innerhalb des
     * Typsystems.
     * 
     * <p> Dabei werden alle primitiven Datentypen durchsucht, alle FOP Klassen und
     * auch Klassen aus externen Bibliotheken.
     * 
     * <p> Arrays sind möglich, indem an den Namen des Elementtyps des Arrays für
     * jede Dimension der Suffix <code>[]</code> angehängt wird.
     *
     * <p> Wenn <code>aName</code> nicht aufgelöst werden kann, wird <code>null</code>
     * zurückgegeben.
     * 
     * @param aName
     *            der Name des Typs, der gesucht wird.
     * @param aScope
     *            der {@link Scope}, in dem der Typ referenziert wird.
     * @return die {@link ClassInfo} Instanz mit dem Namen <code>aName</code>.
     */
    public static ClassInfo valueOf(String aName, Scope aScope) {
        int tmpArrayDim = 0;

        String tmpName = aName;
        while (tmpName.endsWith("[]")) {
            tmpArrayDim++;
            tmpName = tmpName.substring(0, tmpName.length() - 2);
        }

        ClassInfo tmpType;
        if (primitiveTypes.containsKey(tmpName)) {
            tmpType = primitiveType(tmpName);
        } else {
            tmpType = resolveType(tmpName, TypesysUtil
                    .getDeclaringClass(aScope));
        }

        if (tmpType == null) {
            return null;
        }

        if (tmpArrayDim > 0) {
            return new ArrayType(tmpType, tmpArrayDim);
        }
        return tmpType;
    }

    /**
     * Erzeugt ein Array der Dimension <code>aDim</code> und dem
     * Komponententyp mit dem Namen <code>aName</code>.
     * 
     * @param aName
     *            der Name des Typs.
     * @param aScope
     *            der {@link Scope}, in dem der Typ referenziert wird.
     * @param aDim
     *            die Dimension des Arrays.
     * @return {@link ArrayType} mit Dimension <code>aDim</code> und
     *         Komponenttyp <code>aName</code>
     */
    public static ClassInfo valueOf(String aName, Scope aScope, int aDim) {
        if (aDim < 0) {
            throw new IllegalArgumentException(
                    "Dimension has to be greater or equal than 0!");
        }
        ClassInfo tmpType = valueOf(aName, aScope);
        return (aDim > 0) ? new ArrayType(tmpType, aDim) : tmpType;
    }

    private static void addDefault(String aName, Class aClass) {
        if (primitiveTypes == null) {
            primitiveTypes = new HashMap();
        }
        primitiveTypes.put(aName, new ClassInfoReflAdapter(aClass));
    }

    private static ClassInfo resolveType(String aName, ClassInfo aClass) {
        ClassInfo tmpType = resolveFopClass(aName, aClass);

        if (tmpType == null) {
            // wenn nicht gefunden, handelt es sich vll. um externe Klasse
            tmpType = resolveExternalClass(aName, aClass);
        }
        return tmpType;
    }

    private static ClassInfo resolveFopClass(String aName, ClassInfo aClass) {
        if (aClass instanceof ClassInfoAst
                && aClass.getContext() instanceof LayerInfo) {
            LayerInfo tmpLayer = (LayerInfo) aClass.getContext();
            return tmpLayer.findClass(aName);
        }
        return null;
    }

    private static ClassInfo resolveExternalClass(String aName, ClassInfo aClass) {
        ClassInfo tmpType = getClassForName(aName);

        if (tmpType == null && aClass instanceof ClassInfoAst) {
            tmpType = findClassInImports(aName, (ClassInfoAst) aClass);
        }
        if (tmpType == null) {
            tmpType = getClassForName(JAVA_LANG + TypesysUtil.DOT + aName);
        }
        return tmpType;
    }

    private static ClassInfo findClassInImports(String aName, ClassInfoAst aClass) {

        String[] tmpImports = aClass.getImports();
        ClassInfo tmpType = null;
        for (int i = 0; i < tmpImports.length; i++) {
            if (tmpImports[i].endsWith(TypesysUtil.DOT+aName)) {
                // import package.class;
                tmpType = getClassForName(tmpImports[i]);
            } else if (tmpImports[i].endsWith(String.valueOf(TypesysUtil.DOT)
                    + ASTERISK)) {
                // import package.*;
                tmpType = getClassForName(tmpImports[i].substring(0,
                        tmpImports[i].length() - 1)
                        + aName);
            }
            if (tmpType != null) {
                break;
            }
        }
        return tmpType;
    }

    private static ClassInfo getClassForName(String aName) {
        try {
            Class tmpClass = Class.forName(aName);
            return new ClassInfoReflAdapter(tmpClass);
        } catch (ClassNotFoundException e) {
            // ignorieren
        }
        return null;
    }
}

layer typesys;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mixin.AnonClass;
import mixin.AST_VarDecl;
import mixin.AstCursor;
import mixin.AstVisitor;
import mixin.ClassBodyDeclaration;
import mixin.ConDecl;
import mixin.FldVarDec;
import mixin.MethodDcl;
import mixin.RefCons;
import mixin.VarDecl;


/**
 * Visitor durchforstet den AST ClassBody nach Deklarationen.
 * <p> 
 * Klasse muss leider public sein, damit der ast.Dispatcher über Reflection 
 * Methoden aufrufen kann. (Bei package-private ist der Zugriff auf die Methoden nicht
 * erlaubt.)
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
public class ClsBodyDeclVisitor extends AstVisitor {

    private final SymTab SYMTAB;

    private static final Log LOG = LogFactory
            .getLog("typesys.ClsBodyDeclVisitor");


    public ClsBodyDeclVisitor(TypeSystem t){
		Super() ();
		SYMTAB = SymTab.getInstance(t);
    }

    public void visit(ClassBodyDeclaration aDecl) {
        LOG.warn(aDecl.getClass() + " currently not supported by the type system!");
        super.visit(aDecl);
    }
    
    // innerhalb von anonymen Klassen nicht nach Deklarationen suchen 
    // (werden nicht unterstützt)
    public void visit(AnonClass anAnonClass) {
        // weitere Baumtraversierung wird verhindert 
        // (kein super.visit() Aufruf)
    }
    
    // Objektattribute
    public void visit(FldVarDec aFldVarDec) {
        AST_VarDecl tmpDecl = aFldVarDec.getAST_VarDecl();
        // z. B. int a,b,c;
        AstCursor c = new AstCursor();
        for (c.FirstElement(tmpDecl); c.MoreElement(); c.NextElement()) {
            VarDecl tmpVarDecl = (VarDecl) c.node;
            SYMTAB.declare(new ModifiedFieldInfoAst(aFldVarDec
                    .getAST_TypeName(), tmpVarDecl, aFldVarDec
                    .getAST_Modifiers()));
        }
        super.visit(aFldVarDec);
    }
    
    private void addMethodOrConstructor(MethodInfo aMethod, ClassBodyDeclaration aDecl) {
        SYMTAB.declare(aMethod);
        SYMTAB.enterScope(aMethod);
        super.visit(aDecl);
        SYMTAB.leaveScope();        
    }
    
    // Methoden
    public void visit(MethodDcl aDecl) {
        MethodInfo tmpMethod = new MethodInfoAst(aDecl);
        addMethodOrConstructor(tmpMethod, aDecl);
    }

    // Konstruktor
    public void visit(ConDecl aDecl) {
        MethodInfo tmpMethod = new ConstructorInfoAst(aDecl);
        addMethodOrConstructor(tmpMethod, aDecl);
    }

    // Konstruktor-Verfeinerungen
    public void visit(RefCons aDecl) {
        MethodInfo tmpMethod = new ConstructorInfoAst(aDecl);
        addMethodOrConstructor(tmpMethod, aDecl);
    }
}

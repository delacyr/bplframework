layer typesys;

import mixin.AssnExpr;
import mixin.AstCursor;
import mixin.AstNode;
import mixin.ForStmt;
import mixin.FIExprList;
import mixin.LocalVarDecl;
import mixin.PDExpr;
import mixin.PEStmtExpr;
import mixin.StatementExpressionList;
import mixin.StmExprList;


/**
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class ForScope extends AbstractBlockScope {

    private ForStmt node;

    ForScope(ForStmt aNode) {
        node = aNode;
    }
    
    void init() {
        super.init();
        initForInit();
        initExpression();
        initForUpdate();
        initStatement(node.getStatement());
    }

    private void initForInit() {
        if (node.getForInit() instanceof LocalVarDecl) {
            initLocalVarDecl((LocalVarDecl) node.getForInit());
        } else if (node.getForInit() instanceof FIExprList) {
            initStmtExprList(((FIExprList) node.getForInit())
                    .getStatementExpressionList());
        }
    }

    private void initExpression() {
        if (node.getExpression() != null) {
            initExpression(node.getExpression());
        }
    }

    private void initForUpdate() {
        if (node.getForUpdate() instanceof StmExprList) {
            initStmtExprList(((StmExprList) node.getForUpdate())
                    .getStatementExpressionList());
        }
    }

    private void initStmtExprList(StatementExpressionList anExprList) {
        AstCursor c = new AstCursor();
        for (c.FirstElement(anExprList); c.MoreElement(); c.NextElement()) {
            if (c.node instanceof PDExpr) {
                initExpression(((PDExpr) c.node).getPreDecrementExpression());
            } else if (c.node instanceof PEStmtExpr) {
                initExpression(((PEStmtExpr) c.node).getPrimaryExpression());
                if (((PEStmtExpr) c.node).getStmtExprChoices() instanceof AssnExpr) {
                    AssnExpr tmpAssn = (AssnExpr) ((PEStmtExpr) c.node)
                            .getStmtExprChoices();
                    initExpression(tmpAssn.getExpression());
                }
            }
        }
    }

    public AstNode getAstNode() {
        return node;
    }

}

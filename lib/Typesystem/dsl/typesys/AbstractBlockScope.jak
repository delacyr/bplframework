layer typesys;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import mixin.AST_Stmt;
import mixin.AST_VarDecl;
import mixin.AstCursor;
import mixin.AstToken;
import mixin.BlockC;
import mixin.BlockStatement;
import mixin.BlockStmt;
import mixin.DoWhileStm;
import mixin.Expression;
import mixin.ExprStmt;
import mixin.ForStmt;
import mixin.IfStmt;
import mixin.LocalVarDecl;
import mixin.ReturnStm;
import mixin.SwitchStmt;
import mixin.SyncStmt;
import mixin.TryStmt;
import mixin.VarAssignC;
import mixin.VarDecl;
import mixin.WhileStm;


/**
 * Skelettimplementierung für {@link BlockScope}.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
abstract class AbstractBlockScope implements BlockScope, AstElement {

    private Scope context;

    List scopes;
    
    private Map localFields;
    
    private List methodInvocations;
    
    private List fieldAccesses;
    
    private List classReferences;
    
    private boolean initialized = false;

    private SymTab SYMTAB;

    private static final Class[] BLOCKS = { BlockC.class, DoWhileStm.class,
            ForStmt.class, IfStmt.class, SwitchStmt.class, SyncStmt.class,
            TryStmt.class, WhileStm.class };

    AbstractBlockScope() {
        scopes = new ArrayList();
        localFields = new HashMap();
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see AstElement#startLineNum()
     */
    public int startLineNum() {
        AstToken tmpTok = getAstNode().findToken();
        if (tmpTok == null) {
            throw new TypesysException("Can't get the first token of "
                    + getAstNode().className());
        }
        return tmpTok.lineNum();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AstElement#endLineNum()
     */
    public int endLineNum() {
        AstToken tmpTok = TypesysUtil.findLastToken(getAstNode());
        if (tmpTok == null) {
            throw new TypesysException("Can't get the last token of "
                    + getAstNode().className());
        }
        return tmpTok.lineNum();
    }

    /*
     * (non-Javadoc)
     *
     * @see Named#getName()
     */
    public String getName() {
        return getAstNode().className();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Named#getFullName()
     */
    public String getFullName() {
        return getAstNode().className();
    }

    /*
     * (non-Javadoc)
     * 
     * @see BlockScope#getFields()
     */
    public FieldInfo[] getFields() {
        List tmpFields = new ArrayList();
        tmpFields.addAll(localFields.values());

        for (Iterator i = scopes.iterator(); i.hasNext();) {
            tmpFields.addAll(
                    Arrays.asList(((BlockScope) i.next()).getFields()));
        }
        return (FieldInfo[]) tmpFields.toArray(
                new FieldInfo[tmpFields.size()]);
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#findField(java.lang.String)
     */
    public FieldInfo findField(String aName) {
        if (localFields.containsKey(aName)) {
            return (FieldInfo) localFields.get(aName);
        } else {
            return context.findField(aName);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see BlockScope#getBlockScopes()
     */
    public BlockScope[] getBlockScopes() {
    	if (!initialized)
    		init();
        return (BlockScope[]) scopes.toArray(new BlockScope[scopes.size()]);
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        
        aDeclaration.setContext(this);
        
        if (aDeclaration instanceof BlockScope) {
            scopes.add(aDeclaration);
        } else if (aDeclaration instanceof FieldInfo) {
            localFields.put(aDeclaration.getName(), aDeclaration);
        } else if (aDeclaration instanceof MethodInvocation) {
            getMethodInvocationsList().add(aDeclaration);
        } else if (aDeclaration instanceof FieldAccess) {
            getFieldAccessesList().add(aDeclaration);
        } else if (aDeclaration instanceof ClassReference) {
            getClassReferenceList().add(aDeclaration);
        } else {
            throw new TypesysException(aDeclaration
                    + "can't be added to scope (" + this + ")." );
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#getContext()
     */
    public Scope getContext() {
        return context;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        context = aScope;

    }
    
    void init() {
        methodInvocations = new ArrayList();
        fieldAccesses = new ArrayList();
        classReferences = new ArrayList();
        initialized = true;
    }
    
    private List getMethodInvocationsList() {
        if (methodInvocations == null) {
            init();
        }
        return methodInvocations;
    }
    
    private List getClassReferenceList() {
        if (classReferences == null) {
            init();
        }
        return classReferences;
    }
    
    private List getFieldAccessesList() {
        if (fieldAccesses == null) {
            init();
        }
        return fieldAccesses;
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see BlockScope#getMethodInvocations()
     */
    public MethodInvocation[] getMethodInvocations() {

        List tmpInvocations = new ArrayList();
        
        tmpInvocations.addAll(getMethodInvocationsList());

        // in allen geschachtelten Blöcken suchen
        for (Iterator i = scopes.iterator(); i.hasNext();) {
            BlockScope tmpBlock = (BlockScope) i.next();
            tmpInvocations.addAll(Arrays
                    .asList(tmpBlock.getMethodInvocations()));
        }
        return (MethodInvocation[]) tmpInvocations
                .toArray(new MethodInvocation[tmpInvocations.size()]);
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see BlockScope#getClassReferences()
     */
    public ClassReference[] getClassReferences() {

        List tmpReferences = new ArrayList();

        tmpReferences.addAll(getClassReferenceList());

        // in allen geschachtelten Blöcken suchen
        for (Iterator i = scopes.iterator(); i.hasNext();) {
            BlockScope tmpBlock = (BlockScope) i.next();
            tmpReferences.addAll(Arrays
                    .asList(tmpBlock.getClassReferences()));
        }
        return (ClassReference[]) tmpReferences
                .toArray(new ClassReference[tmpReferences.size()]);
    }

    /*
     * (non-Javadoc)
     * 
     * @see BlockScope#getFieldAccesses()
     */
    public FieldAccess[] getFieldAccesses() {

        List tmpFieldAccesses = new ArrayList();
        
        tmpFieldAccesses.addAll(getFieldAccessesList());

        // in allen geschachtelten Blöcken suchen
        for (Iterator i = scopes.iterator(); i.hasNext();) {
            BlockScope tmpBlock = (BlockScope) i.next();
            tmpFieldAccesses.addAll(Arrays.asList(tmpBlock.getFieldAccesses()));
        }
        return (FieldAccess[]) tmpFieldAccesses
                .toArray(new FieldAccess[tmpFieldAccesses.size()]);
    }
    
    /**
     * Fabrikmethode zur Erzeugung von BlockScopes.
     * <p>
     * Je nach übergebenem Statement, wird eine Implementierung von BlockScope
     * ausgewählt.
     * <p>
     * Sollte das Statement keinem BlockScope entsprechen, wird eine
     * {@link IllegalArgumentException} geworfen.
     * 
     * @param aStmt
     *            das BlockStatement.
     * @return BlockScope.
     */
    public static BlockScope newInstance(BlockStatement aStmt) {
        if (aStmt instanceof BlockC) {
            return new BlockCScope((BlockC) aStmt);
        }
        if (aStmt instanceof DoWhileStm) {
            return new DoWhileScope((DoWhileStm) aStmt);
        }
        if (aStmt instanceof ForStmt) {
            return new ForScope((ForStmt) aStmt);
        }
        if (aStmt instanceof IfStmt) {
            return new IfScope((IfStmt) aStmt);
        }
        if (aStmt instanceof SwitchStmt) {
            return new SwitchScope((SwitchStmt) aStmt);
        }
        if (aStmt instanceof SyncStmt) {
            return new SyncScope((SyncStmt) aStmt);
        }
        if (aStmt instanceof TryStmt) {
            return new TryScope((TryStmt) aStmt);
        }
        if (aStmt instanceof WhileStm) {
            return new WhileScope((WhileStm) aStmt);
        }
        
        throw new IllegalArgumentException("Unsupported BlockStatement.");
    }

    public static boolean isBlockScope(BlockStatement aStmt) {
        if (aStmt == null) {
            return false;
        }
        return Arrays.asList(BLOCKS).contains(aStmt.getClass());
    }
    
    public String toString() {
        return getName();
    }
    
    public boolean equals(Object anObject) {
        if (!(anObject instanceof AbstractBlockScope)) {
            return false;
        }
        return getAstNode().equals(((AstElement) anObject).getAstNode());
    }
    
    public int hashcode() {
        return getAstNode().hashCode();
    }
    
    void initStatement(BlockStatement aStmt) {
        if (aStmt == null) {
            throw new IllegalArgumentException("aStmt can't be null.");
        }
        if (AbstractBlockScope.isBlockScope(aStmt)) {
            addDeclaration(AbstractBlockScope.newInstance(aStmt));
        }

        if (aStmt instanceof BlockStmt
                && ((BlockStmt) aStmt).getLocalVariableDeclaration() instanceof LocalVarDecl) {
            initLocalVarDecl((LocalVarDecl) ((BlockStmt) aStmt).getLocalVariableDeclaration());
        }
        
        if (aStmt instanceof ExprStmt
                && ((ExprStmt) aStmt).getAST_Exp() instanceof Expression) {
            ReferenceResolver tmpRes = new ReferenceResolver();
            tmpRes.resolveExpression((Expression) ((ExprStmt) aStmt)
                    .getAST_Exp(), this);
            initReferences(tmpRes);
        }
        
        if (aStmt instanceof ReturnStm && ((ReturnStm) aStmt).getExpression() != null) {
            ReferenceResolver tmpRes = new ReferenceResolver();
            tmpRes.resolveExpression(((ReturnStm) aStmt).getExpression(), this);
            initReferences(tmpRes);
        }
    }
    
    void initStatements(AST_Stmt someStmts) {
        if (someStmts == null) {
            throw new IllegalArgumentException("someStmts can't be null.");
        }
        AstCursor c = new AstCursor();
        for (c.FirstElement(someStmts); c.MoreElement(); c
                .NextElement()) {
            initStatement((BlockStatement) c.node);
        }
    }
    
    void initLocalVarDecl(LocalVarDecl aDecl) {
        AST_VarDecl tmpDecl = aDecl.getAST_VarDecl();
        // z. B. int a,b,c;
        AstCursor c = new AstCursor();
        for (c.FirstElement(tmpDecl); c.MoreElement(); c.NextElement()) {
            VarDecl tmpVarDecl = (VarDecl) c.node;
            addDeclaration(new FieldInfoAst(aDecl.getAST_TypeName(), tmpVarDecl));
            if (tmpVarDecl.getVarAssign() instanceof VarAssignC) {
                ReferenceResolver tmpRes = new ReferenceResolver();
                tmpRes.resolveVarAssign((VarAssignC) tmpVarDecl
                        .getVarAssign(), this);
                initReferences(tmpRes);
            }
        }
    }
    
    void initExpression(Expression anExpr) {
        ReferenceResolver tmpRes = new ReferenceResolver();
        tmpRes.resolveExpression(anExpr, this);
        initReferences(tmpRes);
    }
    
    private void initReferences(ReferenceResolver aRefRes) {
        if ( SYMTAB == null )
        	SYMTAB = SymTab.getInstance(TypesysUtil.getTypeSystem( this ));
        SYMTAB.enterScope(this);
        SYMTAB.declare(aRefRes.getFieldAccesses());
        SYMTAB.declare(aRefRes.getMethodInvocations());
        SYMTAB.declare(aRefRes.getClassReferences());
        SYMTAB.leaveScope();
    }
}

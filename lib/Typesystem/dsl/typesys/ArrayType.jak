layer typesys;

import mixin.AST_TypeName;
import mixin.AstCursor;
import mixin.DecNameDim;
import mixin.Dims;
import mixin.PrimType;
import mixin.QNameType;
import mixin.VariableDeclaratorId;


/**
 * Array Repräsentation, charakterisiert durch die Anzahl der Dimensionen und
 * dem Komponententyp.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
public class ArrayType extends AbstractClassInfo {

    private int dim;

    private ClassInfo type;
    
    public final static String LENGTH_ATTRIB = "length";
    
    private final static String SUFFIX = "[]";

    /**
     * Konstruktor.
     * 
     * Sollte <code>anElementsType</code> selbst ein Array sein, wird die
     * Dimension dieses Arrays dazu addiert.
     * 
     * @param anElementsType
     *            der Typ der Arrayelemente.
     * @param aDim
     *            die Dimension des Arrays.
     */
    public ArrayType(ClassInfo anElementsType, int aDim) {
        if (anElementsType == null) {
            throw new IllegalArgumentException("Type can't be null.");
        }
        if (aDim < 1) {
            throw new IllegalArgumentException(
                    "Dimension can't be smaller than 1");
        }

        dim = aDim;
        type = anElementsType;

        if (type instanceof ArrayType) {
            dim += ((ArrayType) type).getDim();
            type = ((ArrayType) type).getTypeOfElements();
        }
    }

    /**
     * Gibt den Komponententyp zurück.
     * 
     * @return Komponententyp des Arrays.
     */
    public ClassInfo getTypeOfElements() {
        return type;
    }

    /**
     * Gibt die Dimension des Arrays zurück;
     * 
     * @return die Dimension des Arrays.
     */
    public int getDim() {
        return dim;
    }

    /**
     * Util Methode, um die Dimension aus dem AST zu ermitteln.
     * 
     * @param aType
     *            AST Node
     * @return Dimension.
     */
    public static int getDimCount(AST_TypeName aType) {
        if (aType instanceof PrimType) {
            return getDimCount(((PrimType) aType).getDims());
        } else if (aType instanceof QNameType) {
            return getDimCount(((QNameType) aType).getDims());
        }
        throw new IllegalArgumentException("Invalid type.");
    }

    /**
     * Util Methode, um die Dimension aus dem AST zu ermitteln.
     * 
     * @param anId
     *            AST Node
     * @return Dimension.
     */
    public static int getDimCount(VariableDeclaratorId anId) {
        if (!(anId instanceof DecNameDim)) {
            throw new IllegalArgumentException("Invalid id");
        }
        return getDimCount(((DecNameDim) anId).getDims());
    }

    public static int getDimCount(Dims aDims) {
        if (aDims == null) {
            return 0;
        }
        int i = 0;
        AstCursor c = new AstCursor();
        for (c.FirstElement(aDims); c.MoreElement(); c.NextElement()) {
            i++;
        }
        return i;
    }

    /**
     * Gibt den vollqualifizierten Namen des Arrays zurück.
     * <p>
     * Dazu wird an den vollständig qualifizierten Namen des Komponententyps für
     * jede Dimension der String <code>[]</code> angehängt.
     * 
     * @return vollqualifizierter Name des Arrays.
     * 
     * @see Named#getFullName()
     */
    public String getFullName() {
        return type.getFullName() + getSuffix();

    }

    /**
     * Gibt den Namen des Arrays zurück.
     * <p>
     * Dazu wird an den Namen des Komponententyps für jede Dimension der String
     * <code>[]</code> angehängt.
     * 
     * @return Name des Arrays.
     * 
     * @see Named#getName()
     */
    public String getName() {
        return type.getName() + getSuffix();
    }

    private String getSuffix() {
        StringBuilder tmpBuffer = new StringBuilder();
        for (int i = 0; i < dim; i++) {
            tmpBuffer.append(SUFFIX);
        }
        return tmpBuffer.toString();
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#findMethod(java.lang.String, ClassInfo[])
     */
    public MethodInfo findMethod(String aName, ClassInfo[] someParams) {
        return getSuperClass().findMethod(aName, someParams);
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String aName) {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getInterfaces()
     */
    public ClassInfo[] getInterfaces() {
        return new ClassInfo[]{new ClassInfoReflAdapter(Cloneable.class)};
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getMethods()
     */
    public MethodInfo[] getMethods() {
        return new MethodInfo[0];
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getSuperClass()
     */
    public ClassInfo getSuperClass() {
        return TypeFactory.OBJECT;
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#isInterface()
     */
    public boolean isInterface() {
        return false;
    }

    /**
     * UnsupportedOperation
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        throw new UnsupportedOperationException();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#getContext()
     */
    public Scope getContext() {
        return null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        throw new UnsupportedOperationException();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#equals(java.lang.Object)
     */
    public boolean equals(Object anObject) {
        if (anObject == ((ArrayType) this)) {
            return true;
        }

        if (!(anObject instanceof ArrayType)) {
            return false;
        }

        return (((ArrayType) anObject).getTypeOfElements().equals(type) && dim == ((ArrayType) anObject)
                .getDim());
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#hashCode()
     */
    public int hashCode() {
        int tmpResult = 17;
        tmpResult = 37 * tmpResult + dim;
        tmpResult = 37 * tmpResult + type.hashCode();
        return tmpResult;
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractClassInfo#toString()
     */
    public String toString() {
        return type + getSuffix();
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getFields()
     */
    public FieldInfo[] getFields() {
        return new FieldInfo[0];
    }
}

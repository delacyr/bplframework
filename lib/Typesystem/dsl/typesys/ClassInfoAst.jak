layer typesys;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import mixin.AST_Class;
import mixin.AST_Imports;
import mixin.AST_TypeNameList;
import mixin.AstCursor;
import mixin.AstNode;
import mixin.AstToken;
import mixin.ClsBody;
import mixin.ExtClause;
import mixin.ExtendsClause;
import mixin.ImplClause;
import mixin.ImportDeclaration;
import mixin.ImpQual;
import mixin.IntExtClauseC;
import mixin.ModTypeDecl;
import mixin.program;
import mixin.TName;
import mixin.TypeDeclaration;
import mixin.UmInterDecl;
import mixin.UmodClassDecl;
import mixin.UnmodifiedInterfaceDeclaration;
import mixin.UnmodifiedTypeDeclaration;
import mixin.Ute;
import mixin.VarAssignC;
import mixin.VarDecl;


/**
 * Implementierung von ClassInfo, die den AST zur Ermittlung der Informationen
 * nutzt.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class ClassInfoAst extends AbstractClassInfo implements AstElement, Modified {

    LayerInfo _layer;

    private File srcFile;

    private program astProgram;

    protected ModifierInfo[] modifier;

    private Map fields;

    private Map methods;

    private Map interfaces;

    private List methodInvocations;

    private List fieldAccesses;
    
    private List classReferences;

    private SymTab SYMTAB;

    /**
     * Konstruktor.
     * 
     * @param aSource
     *            die Quelldatei.
     * @param aProgram
     *            Ast <code>program</code> node.
     */
    public ClassInfoAst(File aSource, program aProgram) {
        srcFile = aSource;
        astProgram = aProgram;
    }
    
    private void initNestedDeclarations() {
    	if ( SYMTAB == null )
	    	SYMTAB = SymTab.getInstance(TypesysUtil.getTypeSystem( ((ClassInfoAst) this) ));
        fields = new HashMap();
        methods = new HashMap();

        SYMTAB.enterScope(this);
        new ClsBodyDeclVisitor(TypesysUtil.getTypeSystem( this )).visit(astProgram);
        SYMTAB.leaveScope();
    }
    
    private void initReferences() {
        if ( SYMTAB == null )
	    	SYMTAB = SymTab.getInstance(TypesysUtil.getTypeSystem( ((ClassInfoAst) this) ));
        methodInvocations = new ArrayList();
        fieldAccesses = new ArrayList();
        classReferences = new ArrayList();
    
        ReferenceResolver tmpRes = new ReferenceResolver();
        for (int i = 0; i < getFields().length; i++) {
            VarDecl tmpDecl = ((FieldInfoAst) getFields()[i]).getVarDecl();
            if (tmpDecl.getVarAssign() instanceof VarAssignC) {
                tmpRes.resolveVarAssign((VarAssignC) tmpDecl.getVarAssign(), this);
            }
        }
        SYMTAB.enterScope(this);
        SYMTAB.declare(tmpRes.getFieldAccesses());
        SYMTAB.declare(tmpRes.getMethodInvocations());
        SYMTAB.declare(tmpRes.getClassReferences());
        SYMTAB.leaveScope();
    }

    /**
     * Gibt den AST <code>program</code> node zurück.
     * 
     * @return AstNode program.
     */
    public AstNode getAstNode() {
        return astProgram;
    }

    public int startLineNum() {
        AstToken tmpTok = ClassInfoAst.getFirstClass(astProgram).findToken();
        if (tmpTok == null) {
            throw new TypesysException("Can't get the first token of "
                    + ClassInfoAst.getFirstClass(astProgram).className());
        }
        return tmpTok.lineNum();
    }

    public int endLineNum() {
        AstToken tmpTok = TypesysUtil.findLastToken(ClassInfoAst
                .getFirstClass(astProgram));

        if (tmpTok == null) {
            throw new TypesysException("Can't get the last token of "
                    + ClassInfoAst.getFirstClass(astProgram).className());
        }
        return tmpTok.lineNum();
    }

    public ModifierInfo[] getModifier() {
        if ( modifier == null ) {
            initModifier();
        }
        return modifier;
    }
    
    Map getMethodMap() {
        if (methods == null) {
            initNestedDeclarations();
        }
        return methods;
    }

    public MethodInfo[] getMethods() {
        return (MethodInfo[]) getMethodMap().values().toArray(
                new MethodInfo[getMethodMap().size()]);
    }

    ClsBody getClsBody() {
        AstCursor c = new AstCursor();
        for (c.First(getFirstClass(astProgram)); c.More(); c.PlusPlus()) {
            if (c.node instanceof ClsBody) {
                return (ClsBody) c.node;
            }
        }
        return null;
    }

    private Map getFieldsMap() {
        if (fields == null) {
            initNestedDeclarations();
        }
        return fields;
    }

    public FieldInfo[] getFields() {
        return (FieldInfo[]) getFieldsMap().values().toArray(
                new FieldInfo[getFieldsMap().size()]);
    }

    static TypeDeclaration getFirstClass(program aProgram) {
        AST_Class tmpClass = aProgram.getAST_Class();
        if (tmpClass != null) {
            AstCursor c = new AstCursor();
            c.FirstElement(tmpClass);
            if (c.node instanceof TypeDeclaration) {
                return (TypeDeclaration) (c.node);
            }
        }
        throw new TypesysException("No class found.");
    }

    UnmodifiedTypeDeclaration getUtd() {
        if (!(getFirstClass(astProgram) instanceof ModTypeDecl)) {
            throw new TypesysException(srcFile.getName() + " is an invalid class. No ModTypeDecl found.");
        }

        return ((ModTypeDecl) getFirstClass(astProgram))
                .getUnmodifiedTypeDeclaration();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getFullName()
     */
    public String getFullName() {
        return getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getName()
     */
    public String getName() {
        if (getUtd() instanceof UmodClassDecl) {
            return ((UmodClassDecl) getUtd()).getQName().GetName();
        } else if (getUtd() instanceof UmInterDecl) {
            return ((UmInterDecl) getUtd()).getQName().GetName();
        }
        return "";
    }

    /**
     * Gibt die Quelldatei der Klasse zurück.
     * 
     * @return Quelldatei.
     */
    public File getSrcFile() {
        return srcFile;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        aDeclaration.setContext(this);

        if (aDeclaration instanceof ModifiedFieldInfoAst) {
            getFieldsMap().put(aDeclaration.getName(), aDeclaration);
        } else if (aDeclaration instanceof MethodInfoAst) {
            getMethodMap().put(((MethodInfo) aDeclaration).signature(), aDeclaration);
        } else if (aDeclaration instanceof MethodInvocation) {
            getMethodInvocationList().add(aDeclaration);
        } else if (aDeclaration instanceof FieldAccess) {
            getFieldAccessList().add(aDeclaration);
        } else if (aDeclaration instanceof ClassReference) {
            getClassReferenceList().add(aDeclaration);
        } else {
            throw new IllegalArgumentException(aDeclaration.getName()
                    + "can't be added to " + getFullName());
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#getContext()
     */
    public Scope getContext() {
        return _layer;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        if (!(aScope instanceof LayerInfo)) {
            throw new IllegalArgumentException("Class can't be added to scope "
                    + aScope.getFullName() + "!");
        }
        _layer = (LayerInfo) aScope;
    }

    /**
     * Gibt alle importierten Klassen zurück.
     * 
     * @return String Array mit allen importierten Klassen.
     */
    public String[] getImports() {

        // TODO auch die Imports der Basisklassen zurückgeben.

        AST_Imports tmpImports = astProgram.getAST_Imports();

        if (tmpImports == null || tmpImports.arg.length == 0) {
            return new String[0];
        }

        List tmpResult = new ArrayList();

        AstCursor c = new AstCursor();
        for (c.FirstElement(tmpImports); c.MoreElement(); c.NextElement()) {
            ImportDeclaration tmpImpDecl = (ImportDeclaration) c.node;

            if (!(tmpImpDecl instanceof ImpQual)) {
                continue;
            }
            String tmpImport = ((ImpQual) tmpImpDecl).getAST_QualifiedName()
                    .GetName();
            tmpImport += (((ImpQual) tmpImpDecl).getDotTimes() == null) ? ""
                    : ((ImpQual) tmpImpDecl).getDotTimes().toString();
            tmpResult.add(tmpImport);

        }

        return (String[]) tmpResult.toArray(new String[tmpResult.size()]);
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getInterfaces()
     */
    public ClassInfo[] getInterfaces() {
        if (interfaces == null) {
            initInterfaces();
        }
        return (ClassInfo[]) interfaces.values().toArray(
                new ClassInfo[interfaces.size()]);
    }

    private void initInterfaces() {
        interfaces = new HashMap();

        if (getAST_TypeNameList() == null) {
            return;
        }

        AstCursor c = new AstCursor();
        for (c.FirstElement(getAST_TypeNameList()); c.MoreElement(); c
                .NextElement()) {
            TName tmpElem = (TName) c.node;
            ClassInfo tmpType = TypeFactory.valueOf(tmpElem.GetName(), this);
            interfaces.put(tmpType.getFullName(), tmpType);
        }
    }

    protected AST_TypeNameList getAST_TypeNameList() {
        if (getUtd() instanceof UmInterDecl) {
            return getAST_TypeNameList((UmInterDecl) getUtd());
        } else if (getUtd() instanceof UmodClassDecl) {
            return getAST_TypeNameList((UmodClassDecl) getUtd());
        }

        return null;
    }

    private AST_TypeNameList getAST_TypeNameList(UmodClassDecl aDecl) {
        if (!(aDecl.getImplementsClause() instanceof ImplClause)) {
            return null;
        }
        return ((ImplClause) aDecl.getImplementsClause()).getAST_TypeNameList();
    }

    private AST_TypeNameList getAST_TypeNameList(UmInterDecl aDecl) {
        if (!(aDecl.getIntExtClause() instanceof IntExtClauseC)) {
            return null;
        }
        return ((IntExtClauseC) aDecl.getIntExtClause()).getAST_TypeNameList();
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#isInterface()
     */
    public boolean isInterface() {
        return (getUtd() instanceof UnmodifiedInterfaceDeclaration);
    }

    protected void initModifier() {
        modifier = TypesysUtil
                .getModifierFromAst(((ModTypeDecl) getFirstClass(astProgram))
                        .getAST_Modifiers());
    }

    /*
     * (non-Javadoc)
     * 
     * @see ClassInfo#getSuperClass()
     */
    public ClassInfo getSuperClass() {
        if (getUtd() instanceof UmodClassDecl) {
            ExtendsClause tmpExt = ((UmodClassDecl) getUtd())
                    .getExtendsClause();
            if (tmpExt instanceof ExtClause) {
                return TypeFactory.valueOf(((ExtClause) tmpExt)
                        .getAST_QualifiedName().GetName(), this);
            }
        }
        return new ClassInfoReflAdapter(Object.class);
    }

    /**
     * Statische Fabrikmethode zur Erzeugung von {@link ClassInfo} Instanzen.
     * <p>
     * Die Fabrikmethode entscheidet an Hand des AST, ob es sich um eine
     * Basisklasse oder eine Refinementklasse handelt.
     * 
     * @param aSource
     *            die Quelldatei.
     * @param aProgram
     *            AstNode.
     * @return Basisklasse oder Refinementklasse, je nach AST.
     */
    public static ClassInfo newInstance(File aSource, program aProgram) {
        if (isBaseClass(getFirstClass(aProgram))) {
            return new ClassInfoAst(aSource, aProgram);
        } else {
            return new RefinementInfoAst(aSource, aProgram);
        }
    }

    private static boolean isBaseClass(TypeDeclaration aDecl) {
        if (!(aDecl instanceof ModTypeDecl)) {
            throw new TypesysException("Not a valid class.");
        }
        UnmodifiedTypeDeclaration tmpDecl = ((ModTypeDecl) aDecl)
                .getUnmodifiedTypeDeclaration();
        return !(tmpDecl instanceof Ute);
    }

    public MethodInfo findMethod(String aName, ClassInfo[] someParams) {

        MethodInfo tmpMethod = getMethod(aName, someParams);
        if (tmpMethod != null) {
            return tmpMethod;
        }

        tmpMethod = getMethodInSuperClass(aName, someParams);
        if (tmpMethod != null) {
            return tmpMethod;
        }

        return getMethodInInterface(aName, someParams);
    }

    MethodInfo getMethod(String aName, ClassInfo[] someParams) {
        String tmpSignature = AbstractMethodInfo
                .getSignature(aName, someParams);
        if (getMethodMap().containsKey(tmpSignature)) {
            return (MethodInfo) getMethodMap().get(tmpSignature);
        }
        return null;
    }

    private MethodInfo getMethodInSuperClass(String aName,
            ClassInfo[] someParams) {
        if (getSuperClass() != null) {
            return getSuperClass().findMethod(aName, someParams);
        }
        return null;
    }

    private MethodInfo getMethodInInterface(String aName, ClassInfo[] someParams) {
        for (int i = 0; i < getInterfaces().length; i++) {
            MethodInfo tmpMethod = getInterfaces()[i].findMethod(aName,
                    someParams);
            if (tmpMethod != null) {
                return tmpMethod;
            }
        }
        return null;
    }

    public FieldInfo getField(String aName) {
        return (FieldInfo) getFieldsMap().get(aName);
    }
    
    private List getMethodInvocationList() {
        if (methodInvocations == null) {
            initReferences();
        }
        return methodInvocations;
    }

    /**
     * Gibt alle Methodenaufrufe zurück, die in der Klasse auftreten.
     * 
     * @return alle Methodenaufrufe in der Klasse.
     */
    public MethodInvocation[] getMethodInvocations() {
    
        List tmpInvocations = new ArrayList();
        tmpInvocations.addAll(getMethodInvocationList());

        for (int i = 0; i < getMethods().length; i++) {
            tmpInvocations.addAll(Arrays
                    .asList(((MethodInfoAst) getMethods()[i])
                            .getMethodInvocations()));
        }

        return (MethodInvocation[]) tmpInvocations
                .toArray(new MethodInvocation[tmpInvocations.size()]);
    }
    
    /**
     * Gibt alle Referenzen auf Klassen zurück, die in der Klasse auftreten.
     * 
     * @return alle Klassenreferenzen in der Klasse.
     */
    public ClassReference[] getClassReferences() {
    
        List tmpReferences = new ArrayList();
        tmpReferences.addAll(getClassReferenceList());

        for (int i = 0; i < getMethods().length; i++) {
            tmpReferences.addAll(Arrays
                    .asList(((MethodInfoAst) getMethods()[i])
                            .getClassReferences()));
        }

        return (ClassReference[]) tmpReferences
                .toArray(new ClassReference[tmpReferences.size()]);
    }
    
    private List getClassReferenceList() {
        if (classReferences == null) {
            initReferences();
        }
        return classReferences;
    }
    
    
    private List getFieldAccessList() {
        if (fieldAccesses == null) {
            initReferences();
        }
        return fieldAccesses;
    }

    /**
     * Gibt alle Variablenzugriffe zurück, die in der Klasse auftreten.
     * 
     * @return alle Variablenzugriffe in der Klasse.
     */
    public FieldAccess[] getFieldAccesses() {
        List tmpAccesses = new ArrayList();
        tmpAccesses.addAll(getFieldAccessList());

        for (int i = 0; i < getMethods().length; i++) {
            tmpAccesses.addAll(Arrays
                    .asList(((MethodInfoAst) getMethods()[i])
                            .getFieldAccesses()));
        }

        return (FieldAccess[]) tmpAccesses
                .toArray(new FieldAccess[tmpAccesses.size()]);
    }

    public boolean isPublic() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PUBLIC));
    }

    public boolean isPrivate() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PRIVATE));
    }

    public boolean isProtected() {
        return Arrays.asList(getModifier()).contains(
                ModifierInfo.valueOf(ModifierInfo.PROTECTED));
    }

    public boolean isPackagePrivate() {
    	return !(isPublic() || isPrivate() || isProtected());
    }
}

layer typesys;

/**
 * Kapselt Informationen über eine Klasse.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
public interface ClassInfo extends Scope, Declaration {

    /**
     * Gibt <code>true</code> zurück, wenn es sich bei der Klasse um ein
     * Interface handelt.
     * 
     * @return <code>true</code>, wenn es sich bei der Klasse um ein
     *         Interface handelt.
     */
    public boolean isInterface();

    /**
     * Gibt alle implementierten bzw. erweiterten Interfaces zurück.
     * <p>
     * Wenn es sich um eine Klasse handelt, werden alle implementierten
     * Interfaces zurückgegeben. Bei einem Interface werden alle
     * "Superinterfaces" geliefert.
     * 
     * @return alle von der Klasse implementierten, bzw. von dem Interface
     *         erweiterten Interfaces.
     */
    public ClassInfo[] getInterfaces();

    /**
     * Gibt die Superklasse der Klasse, repräsentiert durch dieses Objekt,
     * zurück.
     * <p>
     * Falls keine Superklasse existiert oder es sich bei dem Objekt um ein
     * Interface handelt, wird <code>null</code> zurückgegeben.
     * 
     * @return die Superklasse oder
     *         <code>null<code>, falls keine Superklasse existiert.
     */
    public ClassInfo getSuperClass();

    /**
     * Ermittelt, ob die Klasse oder das Interface, repräsentiert durch dieses
     * Objekt, entweder der Klasse/ dem Interface, repräsentiert durch
     * <code>aClass</code>, entspricht, oder eine Superklasse bzw.
     * Superinterface von <code>aClass</code> ist.
     * 
     * @param aClass
     *            das ClassInfo Objekt, das überprüft werden soll.
     * @return <code>true</code> wenn die Klasse, repräsentiert durch<code>aClass</code>,
     *         in die Klasse, repräsentiert durch dieses Objekt, konvertiert
     *         werden kann, sonst <code>false</code>.
     * @throws NullPointerException
     *             wenn der übergebene <code>ClassInfo</code> parameter
     *             <code>null</code> ist.
     */
    public boolean isAssignableFrom(ClassInfo aClass);

    /**
     * Sucht nach einer Methodendeklaration mit dem Namen <code>aName</code>
     * und den Parametern <code>someParams</code>.
     * 
     * <p>
     * Es wird zunächst in der Klasse, repräsentiert durch dieses Objekt,
     * gesucht. Wird die Methode nicht gefunden, wird in der Superklasse bzw.
     * den Superinterfaces nach der Methode gesucht.
     * 
     * <p>
     * Für den Fall, dass die Methode nicht existiert, wird <code>null</code>
     * zurückgegeben.
     * 
     * @param aName
     *            der Name der gesuchten Methode.
     * @param someParams
     *            die Parameter dder gesuchten Methode.
     * @return
     */
    public MethodInfo findMethod(String aName, ClassInfo[] someParams);

    /**
     * Gibt alle Methoden zurück, die in der Klasse oder dem Interface,
     * repräsentiert durch dieses Objekt, deklariert werden.
     * 
     * <p>
     * Falls keine Methode existiert, wird ein Array der Länge <code>0</code>
     * zurückgegeben.
     * 
     * @return <code>MethodInfo</code> Array mit allen Methoden dieser Klasse/
     *         dieses Interfaces.
     */
    public MethodInfo[] getMethods();

    /**
     * Gibt das Attribut der Klasse, repräsentiert durch dieses
     * <code>ClassInfo</code> Objekt, mit dem Namen <code>aName</code>
     * zurück.
     * 
     * <p>
     * Falls es kein Attribut in der Klasse/ dem Interface mit diesem Namen
     * gibt, wird <code>null</code> zurückgegeben.
     * 
     * @param aName
     *            der Name des Attributs.
     * @return <code>FieldInfo</code> Instanz, die das Attribut mit dem Namen
     *         <code>aName</code> repräsentiert.
     */
    public FieldInfo getField(String aName);

    /**
     * Gibt alle Objektattribute zurück, die in der Klasse oder dem Interface,
     * repräsentiert durch dieses Objekt, deklariert werden.
     * 
     * @return alle Objektattribute, der Klasse bzw. dem Interface,
     *         repräsentiert durch diese Objektinstanz.
     */
    public FieldInfo[] getFields();

}

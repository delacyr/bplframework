layer typesys;

/**
 * Dieses Interface beschreibt einen Layer.
 * <p>
 * Jeder Layer hat einen Verweis auf seinen Vorgänger und seinen Nachfolger in
 * der Equation.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 */
public interface LayerInfo extends Scope {

    /**
     * Jedes Layer wird von genau einem Typsystem verwaltet.
     * 
     * @return das dem Layer assoziierte Typsystem.
     */
    public TypeSystem getTypeSystem();

    /**
     * Gibt alle von diesem Layer definierten Klassen zur&uuml;ck.
     * 
     * @return Liste, mit Elementen vom Typ {@link ClassInfo}.
     */
    public ClassInfo[] getClasses();

    /**
     * Gibt den ersten Layer der Equation zurück.
     * 
     * @return erster Layer.
     */
    public LayerInfo first();

    /**
     * Gibt den nächsten Layer in der Equation zurück.
     * <p>
     * Wenn es sich bei dem Layer bereits um den letzten handelt, wird
     * <code>null</code> zurückgegeben.
     * 
     * @return nächster Layer.
     */
    public LayerInfo getNext();

    /**
     * Ändert den Verweis auf den nächsten Layer.
     * 
     * @param aLayer
     */
    public void setNext(LayerInfo aLayer);

    /**
     * Gibt den vorigen Layer in der Equation zurück.
     * 
     * @return
     */
    public LayerInfo getPrev();

    /**
     * Ändert den Verweis auf den vorigen Layer.
     * 
     * @param aLayer
     */
    public void setPrev(LayerInfo aLayer);

    /**
     * Sucht nach der Klasse mit dem Namen <code>aName</code>.
     * <p>
     * Wenn die Klasse in dem Layer nicht gefunden wird, wird in den vorherigen
     * Layern nach der Klasse gesucht.
     * <p>
     * Schlägt die Suche fehl, wird <code>null</code> zurückgegeben.
     * 
     * @param aName
     *            Name der Klasse.
     * @return
     */
    public ClassInfo findClass(String aName);

}
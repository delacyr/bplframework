layer typesys;

/**
 * Skelettimplementierung des Interfaces <code>MethodInfo</code>.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 */
abstract class AbstractMethodInfo extends AbstractNamed implements MethodInfo {

    /**
     * Überprüft die Methode, repräsentiert durch das aktuelle Objekt, und das
     * übergebene <code>Object</code> auf Gleichheit.
     * 
     * <p>
     * <code>anObject</code> muss vom Typ <code>MethodInfo</code> sein.
     * Verglichen werden die Namen, die Klassen, in der sich die Deklarationen
     * befinden und die Parameter.
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object anObject) {
        if (anObject == this) {
            return true;
        }

        if (!(anObject instanceof MethodInfo)) {
            return false;
        }

        if (!equalNames((MethodInfo) anObject)) {
            return false;
        }

        if (!equalClasses((MethodInfo) anObject)) {
            return false;
        }

        if (!equalParameters((MethodInfo) anObject)) {
            return false;
        }

        return true;
    }

    private boolean equalNames(MethodInfo aMethod) {
        return aMethod.getName().equals(getName());
    }

    private boolean equalClasses(MethodInfo aMethod) {
        if (aMethod.getContext() == null && getContext() != null) {
            return false;
        }

        return aMethod.getContext().equals(getContext());
    }

    private boolean equalParameters(MethodInfo aMethod) {
        if (getParameters().length != aMethod.getParameters().length) {
            return false;
        }
        for (int i = 0; i < getParameters().length; i++) {
            if (!getParameters()[i].equals(aMethod.getParameters()[i])) {
                return false;
            }
        }
        return true;
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#hashCode()
     */
    public int hashCode() {
        int tmpResult = 17;
        tmpResult = tmpResult * 37 + getName().hashCode();
        if (getContext() != null) {
            tmpResult = tmpResult * 37 + getContext().hashCode();
        }
        for (int i = 0; i < getParameters().length; i++) {
            tmpResult = tmpResult * 37 + getParameters()[i].hashCode();
        }
        return tmpResult;
    }

    public static String getSignature(String aName, ClassInfo[] someParams) {
        StringBuilder tmpBuffer = new StringBuilder(aName);
        tmpBuffer.append("(");
        for (int i = 0; i < someParams.length; i++) {
            if (i > 0) {
                tmpBuffer.append(", ");
            }
            if (someParams[i] == null) {
                tmpBuffer.append("null");
            } else {
                tmpBuffer.append(someParams[i].getFullName());
            }
        }
        tmpBuffer.append(")");
        return tmpBuffer.toString();
    }

    // siehe Java Spec. §5.3
    protected boolean methodInvocationConversion(ClassInfo aClass1,
            ClassInfo aClass2) {
        if (identityConversion(aClass1, aClass2)) {
            return true;
        }
        if (wideningPrimitiveConversion(aClass1, aClass2)) {
            return true;
        }
        if (wideningReferenceResolution(aClass1, aClass2)) {
            return true;
        }
        return false;
    }

    // siehe Java Spec. §5.1.1
    private boolean identityConversion(ClassInfo aClass1, ClassInfo aClass2) {
        if (aClass1 == null) {
            return false;
        }
        return aClass1.equals(aClass2);
    }

    // siehe Java Spec. §5.1.2
    private boolean wideningPrimitiveConversion(ClassInfo aClass1,
            ClassInfo aClass2) {

        if (!(TypeFactory.isPrimitive(aClass1) && TypeFactory
                .isPrimitive(aClass2))) {
            return false;
        }
        ClassInfo tmpClass = aClass1;

        ClassInfo tmpByte = TypeFactory.primitiveType(TypeFactory.BYTE);
        ClassInfo tmpShort = TypeFactory.primitiveType(TypeFactory.SHORT);
        ClassInfo tmpChar = TypeFactory.primitiveType(TypeFactory.CHAR);
        ClassInfo tmpInt = TypeFactory.primitiveType(TypeFactory.INT);
        ClassInfo tmpLong = TypeFactory.primitiveType(TypeFactory.LONG);
        ClassInfo tmpFloat = TypeFactory.primitiveType(TypeFactory.FLOAT);
        ClassInfo tmpDouble = TypeFactory.primitiveType(TypeFactory.DOUBLE);

        if (tmpByte.equals(tmpClass)) {
            if (tmpShort.equals(aClass2)) {
                return true;
            }
            tmpClass = tmpShort;
        }
        if (tmpShort.equals(tmpClass) || tmpChar.equals(tmpClass)) {
            if (tmpInt.equals(aClass2)) {
                return true;
            }
            tmpClass = tmpInt;
        }
        if (tmpInt.equals(tmpClass)) {
            if (tmpLong.equals(aClass2)) {
                return true;
            }
            tmpClass = tmpLong;
        }
        if (tmpLong.equals(tmpClass)) {
            if (tmpFloat.equals(aClass2)) {
                return true;
            }
            tmpClass = tmpFloat;
        }
        if (tmpFloat.equals(tmpClass)) {
            if (tmpDouble.equals(aClass2)) {
                return true;
            }
            tmpClass = tmpDouble;
        }
        if (tmpDouble.equals(tmpClass) && tmpDouble.equals(aClass2)) {
            return true;
        }
        return false;
    }

    // siehe Java Spec. §5.1.4
    private boolean wideningReferenceResolution(ClassInfo aClass1,
            ClassInfo aClass2) {

        if (aClass2 == null) {
            throw new IllegalArgumentException();
        }

        if (TypeFactory.isPrimitive(aClass1)
                || TypeFactory.isPrimitive(aClass2)) {
            return false;
        }

        if (aClass2.isAssignableFrom(aClass1)) {
            return true;
        }

        if (aClass1 == null) {
            return true;
        }

        if (TypeFactory.OBJECT.equals(aClass2)) {
            return true;
        }

        if (aClass1 instanceof ArrayType
                && TypeFactory.CLONEABLE.equals(aClass2)) {

            return true;
        }

        if (aClass1 instanceof ArrayType && aClass2 instanceof ArrayType) {
            ClassInfo tmpSC = ((ArrayType) aClass1).getTypeOfElements();
            ClassInfo tmpTC = ((ArrayType) aClass2).getTypeOfElements();
            return wideningReferenceResolution(tmpSC, tmpTC);
        }

        return false;
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#isApplicable(java.lang.String, ClassInfo[])
     */
    public boolean isApplicable(String aName, ClassInfo[] someArguments) {
        if (!getName().equals(aName)) {
            return false;
        }

        if (getParameters().length != someArguments.length) {
            return false;
        }
        for (int i = 0; i < getParameters().length; i++) {
            if (!methodInvocationConversion(someArguments[i],
                    getParameters()[i])) {
                return false;
            }
        }
        return true;
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#isAccessible(ClassInfo)
     */
    public boolean isAccessible(ClassInfo aClass) {
        ClassInfo tmpMethodClass = (ClassInfo) getContext();

        if (isPublic()) {
            return true;
        }

        if (isPrivate()) {
            return tmpMethodClass.equals(aClass);
        }

        if (isProtected()) {
            return tmpMethodClass.isAssignableFrom(aClass)
                    || samePackage(tmpMethodClass, aClass);
        }

        // package private
        return samePackage(tmpMethodClass, aClass);
    }

    private boolean samePackage(ClassInfo aClass1, ClassInfo aClass2) {
        return getPackage(aClass1).equals(getPackage(aClass2));
    }

    private String getPackage(ClassInfo aClass) {
        String tmpName = aClass.getFullName();
        int tmpLastDot = tmpName.lastIndexOf(TypesysUtil.DOT);
        return (tmpLastDot > -1) ? tmpName.substring(0, tmpLastDot) : "";
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#isMoreSpecific(MethodInfo)
     */
    public boolean isMoreSpecific(MethodInfo aMethod) {
        if (!getName().equals(aMethod.getName())) {
            throw new IllegalArgumentException(
                    "Methods must have the same name");
        }
        if (getParameters().length != aMethod.getParameters().length) {
            throw new IllegalArgumentException(
                    "Methods must have same number of parameters");
        }

        ClassInfo tmpClassM1 = (ClassInfo) getContext();
        ClassInfo tmpClassM2 = (ClassInfo) aMethod.getContext();

        // Bedingung 1: Cls1 kann in Cls2 konvertiert werden
        if (!tmpClassM2.isAssignableFrom(tmpClassM1)) {
            return false;
        }

        // Bedingung 2: P1..Pn von M1 können in P1..Pn von M2 konvertiert werden
        ClassInfo[] tmpParamsM1 = getParameters();
        ClassInfo[] tmpParamsM2 = aMethod.getParameters();
        for (int i = 0; i < tmpParamsM1.length; i++) {
            if (!methodInvocationConversion(tmpParamsM1[i], tmpParamsM2[i])) {
                return false;
            }
        }
        return true;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Modified#isPackagePrivate()
     */
    public boolean isPackagePrivate() {
        return !(isPrivate() || isPublic() || isProtected());
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    public String toString() {
        StringBuilder tmpString = new StringBuilder();
        if (getContext() != null) {
            tmpString.append(getContext()).append(TypesysUtil.DOT);
        }
        tmpString.append(signature());
        return tmpString.toString();
    }  
}

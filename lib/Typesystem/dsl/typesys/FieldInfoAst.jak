layer typesys;

import mixin.AST_TypeName;
import mixin.AstNode;
import mixin.DecNameDim;
import mixin.VarDecl;


/**
 * Implementierung von FieldInfo, die den AST zur Ermittlung der Informationen
 * nutzt.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class FieldInfoAst extends AbstractNamed implements FieldInfo, AstElement {

    private ClassInfo type;

    private AST_TypeName astTypeName;

    private VarDecl varDecl;
    
    private DecNameDim decNameDim;

    private Scope context;
    
    /**
     * Konstruktor.
     * 
     * @param aTypeName
     *            AstNode, der den Typ der Variablen beschreibt.
     * @param aVarDecl
     *            AstNode, der die Variablendeklaration beschreibt.
     */
    public FieldInfoAst(AST_TypeName aTypeName, VarDecl aVarDecl) {
        this(aTypeName, (DecNameDim) aVarDecl.getVariableDeclaratorId());
        varDecl = aVarDecl;
    }
    
    /**
     * Konstruktor.
     * 
     * @param aTypeName
     *            AstNode, der den Typ der Variablen beschreibt.
     * @param aDecNameDim
     *            AstNode, der den Namen der Variablen beinhaltet.
     */
    public FieldInfoAst(AST_TypeName aTypeName, DecNameDim aDecNameDim) {
        astTypeName = aTypeName;
        decNameDim = aDecNameDim;
        initName();
        type = null;
    }

    /*
     * (non-Javadoc)
     * 
     * @see FieldInfo#getType()
     */
    public ClassInfo getType() {
        if (type == null) {
            int tmpDim = ArrayType.getDimCount(astTypeName);
            tmpDim = tmpDim
                    + ArrayType.getDimCount(decNameDim);
            type = TypeFactory.valueOf(astTypeName.GetName(), getContext(),
                    tmpDim);
        }
        return type;
    }
    
    VarDecl getVarDecl() {
        return varDecl;
    }
    
    private void initName() {
        name = decNameDim.getQName()
                .GetName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#getContext()
     */
    public Scope getContext() {
        return context;
    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#setContext(Scope)
     */
    public void setContext(Scope scope) {
        context = scope;
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#getFullName()
     */
    public String getFullName() {
        if (context == null) {
            throw new IllegalStateException("Declaring scope for " + getName() + " not set.");
        }
        return context.getFullName() + TypesysUtil.DOT + getName();
    }

    public int endLineNum() {
        return decNameDim.findToken().lineNum();
    }

    public AstNode getAstNode() {
        return decNameDim;
    }

    public int startLineNum() {
        return decNameDim.findToken().lineNum();
    }
    

    /**
     * Gibt zurück, ob es sich um eine lokale Variable (Methodenparameter oder
     * temporäre Variable) handelt.
     * 
     * @return <code>true</code>, wenn es sich um eine lokale Variable
     *         handelt.
     */
    public boolean isLocalVar() {
        return !isAttribute();
    }

    /**
     * Gibt zurück, ob es sich um Objektattribut handelt.
     * 
     * @return <code>true</code>, wenn es sich um ein Objektattribut handelt.
     */
    public boolean isAttribute() {
        return getContext() instanceof ClassInfoAst;
    }

    /**
     * Gibt zurück, ob es sich um einen Methodenparameter handelt.
     * 
     * @return <code>true</code>, wenn es sich um einen Methodenparameter
     *         handelt.
     */
    public boolean isMethodParam() {
        return getContext() instanceof MethodInfoAst;
    }

    /**
     * Gibt zurück, ob es sich um eine temporäre Variable handelt.
     * 
     * @return <code>true</code>, wenn es sich um eine temporäre Variable
     *         handelt.
     */
    public boolean isTemporaryVar() {
        return !(isAttribute() || isMethodParam());
    }
}

layer typesys;

/**
 * Skelettimplementierung für Interface {@link Named}.
 *
 * @layer<typesys>
 * @author Stephan Klapproth
 *
 */
public abstract class AbstractNamed implements Named {

    protected String name;

    /**
     * Gibt den Namen des Objekts zurück.
     * 
     * @return den Namen des Objekts.
     * @see Named#getName()
     */
    public String getName() {
        return name;
    }

    /**
     * Gibt den vollqualifizierten Namen des Objekts zurück.
     * <p>
     * Muss in den Unterklassen von <code>AbstractNamed</code> implementiert 
     * werden.
     * 
     * @return den vollständig qualifizierten Namen des Objekts.
     * @see Named#getFullName()
     */
    public abstract String getFullName();

    /**
     * Vergleicht das Objekt mit <code>anObj</code>.
     * <p>
     * @return <code>True</code>, wenn die vollqualifizierten Namen 
     * übereinstimmen, sonst <code>False</code>.
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object anObj) {
        if (this == anObj) {
            return true;
        }

        if (!(anObj instanceof Named)) {
            return false;
        }

        return ((Named) anObj).getFullName().equals(getFullName());
    }

    /**
     * Gibt den Hashcode der Objektinstanz zurück.
     * <p>
     * Der Hashcode wird aus dem vollqualifizierten Namen berechnet.
     * 
     * @return Hashcode des Objekts.
     * @see java.lang.Object#hashCode()
     */
    public int hashCode() {
        return getFullName().hashCode();
    }

    /**
     * Gibt den vollqualifizierten Namen des Objekts zurück.
     * <p>
     * @return <code>String</code> Repräsentation des Objekts.
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return getFullName();
    }
}

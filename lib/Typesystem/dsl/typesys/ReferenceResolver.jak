layer typesys;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mixin.AEBod;
import mixin.AdEBod;
import mixin.AddExpr;
import mixin.AdditiveExpression;
import mixin.AllocExprChoices;
import mixin.AndExpr;
import mixin.AnonClass;
import mixin.Args;
import mixin.ArrayDimsAndInits;
import mixin.ArrayInit;
import mixin.ArrDim1;
import mixin.ArrDim2;
import mixin.ArrInit;
import mixin.AsgExpr;
import mixin.AST_ArgList;
import mixin.AST_QualifiedName;
import mixin.AST_TypeName;
import mixin.AST_VarInit;
import mixin.AstCursor;
import mixin.AstList;
import mixin.AstNode;
import mixin.BasePre;
import mixin.BooleanLiteral;
import mixin.BoolTyp;
import mixin.ByteTyp;
import mixin.CAEBod;
import mixin.CastExpr1;
import mixin.CastExpr2;
import mixin.CastExpression;
import mixin.CharLit;
import mixin.CharTyp;
import mixin.COEBod;
import mixin.CondAndExpr;
import mixin.ConditionalOrExpression;
import mixin.CondOrExpr;
import mixin.DoubleTyp;
import mixin.EEBodyC;
import mixin.EOEBod;
import mixin.EqExpr;
import mixin.ExclOrExpr;
import mixin.ExDimBod;
import mixin.ExprDims;
import mixin.ExprPre;
import mixin.Expression;
import mixin.ExprSuf;
import mixin.FloatTyp;
import mixin.FPLit;
import mixin.InclOrExpr;
import mixin.IntLit;
import mixin.IntTyp;
import mixin.IOEBod;
import mixin.IoExpr;
import mixin.Literal;
import mixin.LongTyp;
import mixin.MEBod;
import mixin.MinusUE;
import mixin.MoreAddExpr;
import mixin.MoreAndExpr;
import mixin.MoreCondAndExpr;
import mixin.MoreCondOrExpr;
import mixin.MoreEqExpr;
import mixin.MoreExclOrExpr;
import mixin.MoreInclOrExpr;
import mixin.MoreMultExpr;
import mixin.MoreRelExpr;
import mixin.MoreShiftExpr;
import mixin.MthCall;
import mixin.MultExpr;
import mixin.NotUE;
import mixin.NullLiteral;
import mixin.ObjAllocExpr;
import mixin.PDecExpr;
import mixin.PEIncDec;
import mixin.PIncExpr;
import mixin.PlusUE;
import mixin.PPQualName;
import mixin.PrimAllocExpr;
import mixin.PrimaryPrefix;
import mixin.PrimarySuffix;
import mixin.PrimExpr;
import mixin.PrimitiveType;
import mixin.QName;
import mixin.QNameSuf;
import mixin.QNameType;
import mixin.QuestExpr;
import mixin.REBod;
import mixin.RelExpr;
import mixin.RTPre;
import mixin.SEBodyC;
import mixin.ShiftExpression;
import mixin.ShortTyp;
import mixin.StrLit;
import mixin.Suffixes;
import mixin.SuperPre;
import mixin.ThisPre;
import mixin.TildeUE;
import mixin.VarAssignC;
import mixin.VarInitExpr;


/**
 * Klasse zum Suchen nach Referenzen (Variablenzugriffe, Methodenaufrufe) in
 * verschiedenen AST Knoten.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
class ReferenceResolver {

    private Scope scope;

    private List fieldAccesses = new ArrayList();

    private List methodInvocations = new ArrayList();

    private List classRefs = new ArrayList();

    private static final Log LOG = LogFactory
            .getLog("typesys.ReferenceResolver");

    /**
     * Referenzen in Variablenzuweisungen suchen.
     * 
     * @param aVarAssign
     *            Variablenzuweisung
     * @param aScope
     *            der Scope, in dem sich die Zuweisung befindet.
     */
    public void resolveVarAssign(VarAssignC aVarAssign, Scope aScope) {
        scope = aScope;
        resolveAST_VarInit(aVarAssign.getAST_VarInit());
    }

    /**
     * Referenzen in einer Expression suchen.
     * 
     * @param anExpr
     *            die Expression.
     * @param aScope
     *            der Scope, in der sich die Expression befindet.
     */
    public void resolveExpression(Expression anExpr, Scope aScope) {
        scope = aScope;
        resolve(anExpr);
    }

    /**
     * Gibt alle gefundenen Variablenzugriffe zurück.
     * 
     * @return die Variablenzugriffe.
     */
    public FieldAccess[] getFieldAccesses() {
        return (FieldAccess[]) fieldAccesses
                .toArray(new FieldAccess[fieldAccesses.size()]);
    }

    /**
     * Gibt alle gefundenen Methodenzugriffe zurück.
     * 
     * @return alle Methodenzugriffe.
     */
    public MethodInvocation[] getMethodInvocations() {
        return (MethodInvocation[]) methodInvocations
                .toArray(new MethodInvocation[methodInvocations.size()]);
    }

    /**
     * Gibt alle gefundenen Referenzen auf Klassen zurück.
     * <p>
     * (z. B. bei statischen Fieldzugriffen, Castings, Objektallokationen)
     * 
     * @return alle Klassenzugriffe.
     */
    public ClassReference[] getClassReferences() {
        return (ClassReference[]) classRefs
                .toArray(new ClassReference[classRefs.size()]);
    }

    private void resolveAST_VarInit(AST_VarInit aVarInit) {
        if (aVarInit instanceof VarInitExpr) {
            resolveVarInitExpr((VarInitExpr) aVarInit);
        }
        if (aVarInit instanceof ArrInit) {
            resolveArrInit((ArrInit) aVarInit);
        }
    }

    private void resolveVarInitExpr(VarInitExpr anExpr) {
        resolve(anExpr.getExpression());
    }

    private void resolveArrInit(ArrInit anArrInit) {
        if (!(anArrInit.getAST_ArrayInit() instanceof ArrayInit)) {
            return;
        }

        ArrayInit tmpArrayInit = (ArrayInit) anArrInit.getAST_ArrayInit();
        AstCursor c = new AstCursor();
        for (c.FirstElement(tmpArrayInit.getArrayInitializer()); c
                .MoreElement(); c.NextElement()) {
            resolveAST_VarInit((AST_VarInit) c.node);
        }
    }

    private ClassInfo resolve(Expression anExpr) {
    	if (anExpr instanceof RTPre) {
	    	//irgendwas.class
	    	return new ClassInfoReflAdapter(Class.class);
        }
        if (anExpr instanceof PrimExpr) {
            return resolvePrimExpr((PrimExpr) anExpr);
        }
        if (anExpr instanceof SuperPre) {
            return resolveField(((SuperPre) anExpr).getQName(), TypesysUtil
                    .getBaseClass(scope).getSuperClass());
        }
        if (anExpr instanceof PPQualName) {
            List tmpQNames = getAsList(((PPQualName) anExpr)
                    .getAST_QualifiedName());
            return resolveQNames(tmpQNames, scope);
        }
        if (anExpr instanceof QuestExpr) {
            return resolveQuestExpr((QuestExpr) anExpr);
        }
        if (anExpr instanceof ExprPre) {
            return resolve(((ExprPre) anExpr).getExpression());
        }
        if (anExpr instanceof ObjAllocExpr) {
            return resolveObjAllocExpr((ObjAllocExpr) anExpr);
        }
        if (anExpr instanceof ThisPre) {
            return TypesysUtil.getDeclaringClass(scope);
        }
        if (anExpr instanceof Literal) {
            return resolveLiteral((Literal) anExpr);
        }
        if (anExpr instanceof PrimAllocExpr) {
            return resolvePrimAllocExpr((PrimAllocExpr) anExpr);
        }
        if (anExpr instanceof CastExpression) {
            return resolveCastExpression((CastExpression) anExpr);
        }
        if (anExpr instanceof AdditiveExpression) {
            return resolveAdditiveExpression((AdditiveExpression) anExpr);
        }
        if (anExpr instanceof ShiftExpression) {
            return TypeFactory.primitiveType(TypeFactory.INT);
        }
        if (anExpr instanceof ConditionalOrExpression) {
            return resolveConditionalOrExpression((ConditionalOrExpression) anExpr);
        }
        if (anExpr instanceof AsgExpr) {
            return resolveAsgExpr((AsgExpr) anExpr);
        }

        LOG.error("Unhandled expression: " + anExpr.getClass());
        return null;
    }
    
    private ClassInfo resolveAsgExpr(AsgExpr anExpr) {
        resolve(anExpr.getExpression());
        return resolve(anExpr.getConditionalExpression());
    }

    private ClassInfo resolvePrimExpr(PrimExpr anExpr) {

        Scope tmpActScope = scope;
        PrimaryPrefix tmpPref = anExpr.getPrimaryPrefix();
        String tmpMethodName = null;

        if (!(tmpPref instanceof SuperPre || tmpPref instanceof PPQualName || tmpPref instanceof BasePre)) {
            tmpActScope = resolve(tmpPref);
            return resolvePrimExprSuffixes(anExpr.getSuffixes(), tmpActScope,
                    null);
        }

        // SuperPre, PPQualName und BasePre müssen hier gesondert behandelt
        // werden, da sie den Methodennamen enthalten können

        if (tmpPref instanceof PPQualName) { // QName.QName.QName...
            List tmpQNames = getAsList(((PPQualName) tmpPref)
                    .getAST_QualifiedName());
            if (nextIsMthCall(tmpPref)) {
                tmpMethodName = ((QName) tmpQNames.remove(tmpQNames.size() - 1))
                        .GetName();
            }
            tmpActScope = resolveQNames(tmpQNames, tmpActScope);
        } else {
            QName tmpQName = null;
            if (tmpPref instanceof SuperPre) { // super.QName
                tmpActScope = TypesysUtil.getBaseClass(tmpActScope)
                        .getSuperClass();
                tmpQName = ((SuperPre) tmpPref).getQName();
            } else { // Super(Types).QName (BasePre)
                tmpActScope = TypesysUtil.getDeclaringClass(tmpActScope)
                        .getSuperClass();
                tmpQName = ((BasePre) tmpPref).getQName();
            }

            if (nextIsMthCall(tmpPref)) {
                tmpMethodName = tmpQName.GetName();
            } else {
                resolveField(tmpQName, tmpActScope);
            }
        }
        return resolvePrimExprSuffixes(anExpr.getSuffixes(), tmpActScope,
                tmpMethodName);
    }

    private ClassInfo resolveQNames(List someQNames, Scope anActScope) {
        if (someQNames.size() == 0) {
            return TypesysUtil.getDeclaringClass(anActScope);
        }

        // zunächst versuchen, ob gesamter Name eine Klasse ist
        ClassInfo tmpResult = TypeFactory.valueOf(getQualName(someQNames),
                anActScope);
        if (tmpResult != null) {
            addClassRef(tmpResult, (QName) someQNames
                    .get(someQNames.size() - 1));
            return tmpResult;
        }

        // wenn nicht, dann muss letzter QName ein Variablenbezeichner sein
        QName tmpField = (QName) someQNames.remove(someQNames.size() - 1);
        if (someQNames.size() == 0) {
            return resolveField(tmpField, anActScope);
        } else {
            return resolveField(tmpField, resolveQNames(someQNames, anActScope));
        }
    }

    private ClassInfo resolveField(QName aQName, Scope anActScope) {
        if (anActScope instanceof ArrayType
                && ArrayType.LENGTH_ATTRIB.equals(aQName.GetName())) {
            return TypeFactory.primitiveType(TypeFactory.INT);
        }

        FieldInfo tmpField = anActScope.findField(aQName.GetName());
        if (tmpField != null) {
            addFieldAccess(tmpField, aQName);
            ClassInfo tmpFieldType = tmpField.getType();
            
            // FOP Klasse?
            if (tmpFieldType instanceof ClassInfoAst) {
                // Verfeinerung der Klasse zurückgeben
                return TypesysUtil.getLayer(anActScope).findClass(
                        tmpFieldType.getName());
            }
            // bei "externen" Klassen gibt es keine Verfeinerungen
            return tmpFieldType;
        }
        TypesysException ex = new TypesysException("Can't resolve field "
                + aQName + " in " + TypesysUtil.getDeclaringClass(anActScope) + ".");
        LOG.error(ex);
        throw ex;
    }

    private String getQualName(List someQNames) {
        StringBuilder tmpQualName = new StringBuilder();
        for (Iterator i = someQNames.iterator(); i.hasNext();) {
            tmpQualName.append(((QName) i.next()).GetName());
            if (i.hasNext()) {
                tmpQualName.append(TypesysUtil.DOT);
            }
        }
        return tmpQualName.toString();
    }

    private List getAsList(AST_QualifiedName aQualName) {
        List tmpQNames = new ArrayList();
        AstCursor c = new AstCursor();
        for (c.FirstElement(aQualName); c.MoreElement(); c.NextElement()) {
            tmpQNames.add(c.node);
        }
        return tmpQNames;
    }

    private boolean nextIsMthCall(AstNode aNode) {
        if (aNode instanceof PrimaryPrefix) {
            return getFirstSuffix((PrimExpr) aNode.up) instanceof MthCall;
        } else if (aNode instanceof PrimarySuffix) {
            AstNode tmpRight = aNode.up.right;
            return tmpRight != null && tmpRight.arg[0] instanceof MthCall;
        } else {
            throw new IllegalArgumentException(
                    "Node is not of type PrimaryPrefix or PrimarySuffix.");
        }
    }

    private PrimarySuffix getFirstSuffix(PrimExpr anExpr) {
        AstCursor c = new AstCursor();
        c.FirstElement(anExpr.getSuffixes());
        if (c.MoreElement()) {
            return (PrimarySuffix) c.node;
        }
        return null;
    }

    private ClassInfo resolvePrimExprSuffixes(Suffixes someSuffixes,
            Scope aScope, String aMethodName) {
        if (aScope == null) {
            return null;
        }

        Scope tmpActScope = aScope;
        AstCursor c = new AstCursor();

        for (c.FirstElement(someSuffixes); c.MoreElement(); c.NextElement()) {

            if (c.node instanceof ExprSuf) { // [Expression]
                if (!(tmpActScope instanceof ArrayType)) {
                    LOG.error("Found ExprSuf but tmpActScope is not an array!");
                    return null;
                }
                resolve(((ExprSuf) c.node).getExpression());

                ArrayType tmpArray = (ArrayType) tmpActScope;
                ClassInfo tmpElement = tmpArray.getTypeOfElements();
                if (tmpArray.getDim() > 1) {
                    tmpActScope = new ArrayType(tmpElement,
                            tmpArray.getDim() - 1);
                } else {
                    tmpActScope = tmpElement;
                }
            } else if (c.node instanceof MthCall) { // (ParamList)
                if (aMethodName == null) {
                    throw new TypesysException(
                            "Missing identifier for method invocation.");
                }

                tmpActScope = resolveMthCall(aMethodName, (MthCall) c.node,
                        TypesysUtil.getDeclaringClass(tmpActScope));

            } else if (c.node instanceof QNameSuf) { // .QName
                if (nextIsMthCall(c.node)) {
                    aMethodName = ((QNameSuf) c.node).getQName().GetName();
                } else {
                    tmpActScope = resolveField(((QNameSuf) c.node).getQName(),
                            tmpActScope);
                }
            } else {
                LOG.error("unhandled suffix: " + c.node.getClass());
            }
        }
        return TypesysUtil.getDeclaringClass(tmpActScope);
    }

    // gibt den Returntyp der Methode zurück
    private ClassInfo resolveMthCall(String aMethodName, MthCall aMthCall,
            ClassInfo aSrcClass) {

        ClassInfo[] tmpParams = resolveParams(((Args) aMthCall.getArguments())
                .getAST_ArgList());

        MethodInvocation tmpInv = new MethodInvocation(aMethodName, tmpParams,
                aSrcClass, aMthCall);

        methodInvocations.add(tmpInv);
        tmpInv.setContext(scope);

        return tmpInv.getMethod().getReturnType();
    }

    // gibt die Typen einer Parameterliste zurück
    private ClassInfo[] resolveParams(AST_ArgList anArgList) {
        if (anArgList == null) {
            return new ClassInfo[0];
        }
        List tmpParams = new ArrayList();
        AstCursor c = new AstCursor();
        for (c.FirstElement(anArgList); c.MoreElement(); c.NextElement()) {
            tmpParams.add(resolve((Expression) c.node));
        }
        return (ClassInfo[]) tmpParams.toArray(new ClassInfo[tmpParams.size()]);
    }

    // gibt den Typ der Allokation zurück
    private ClassInfo resolveObjAllocExpr(ObjAllocExpr anExpr) {
        List tmpQNames = getAsList(anExpr.getAST_QualifiedName());
        ClassInfo tmpClass = TypeFactory.valueOf(anExpr.getAST_QualifiedName()
                .GetName(), scope);

        AllocExprChoices tmpExprCh = anExpr.getAllocExprChoices();
        if (tmpExprCh instanceof AnonClass) {
            AnonClass tmpAnon = (AnonClass) tmpExprCh;
            if (tmpAnon.getClassBody() != null) {
                LOG.warn("Anonymous classes are currently not supported.");
                LOG.warn("Found anonymous class in " + TypesysUtil.getDeclaringClass(scope));
                LOG.warn(tmpAnon.up);
            }
            // Methodenparameter auflösen
            resolveParams(((Args) tmpAnon.getArguments()).getAST_ArgList());
            
        } else if (tmpExprCh instanceof ArrayDimsAndInits) {
            tmpClass = resolveArray((ArrayDimsAndInits) tmpExprCh, tmpClass);
        }
        addClassRef(tmpClass, (QName) tmpQNames.get(tmpQNames.size() - 1));

        return tmpClass;
    }

    private ArrayType resolveArray(ArrayDimsAndInits aDimsAndInits,
            ClassInfo anElementType) {
        if (aDimsAndInits instanceof ArrDim1) { // [1][]
            ArrayType tmpArray = resolveExprDims(anElementType,
                    ((ArrDim1) aDimsAndInits).getExprDims());
            if (((ArrDim1) aDimsAndInits).getDims() != null) {
                tmpArray = new ArrayType(tmpArray, ArrayType
                        .getDimCount(((ArrDim1) aDimsAndInits).getDims()));
            }
            return tmpArray;
        } else { // [][] { {1,2}, {3,4} }
            if (((ArrDim2) aDimsAndInits).getAST_ArrayInit() instanceof ArrayInit) {
                resolveArrayInit((ArrayInit) ((ArrDim2) aDimsAndInits)
                        .getAST_ArrayInit());
            }
            return new ArrayType(anElementType, ArrayType
                    .getDimCount(((ArrDim2) aDimsAndInits).getDims()));
        }
    }

    private ArrayType resolveExprDims(ClassInfo anElementType,
            ExprDims someExprDims) {
        AstCursor c = new AstCursor();
        int tmpDim = 0;
        for (c.FirstElement(someExprDims); c.MoreElement(); c.NextElement()) {
            resolve(((ExDimBod) c.node).getExpression());
            tmpDim++;
        }
        return new ArrayType(anElementType, tmpDim);
    }

    private void resolveArrayInit(ArrayInit anArrayInit) {
        AstCursor c = new AstCursor();
        for (c.FirstElement(anArrayInit.getArrayInitializer()); c.MoreElement(); c
                .NextElement()) {

            AST_VarInit tmpInit = (AST_VarInit) c.node;
            if (tmpInit instanceof ArrInit) {
                if (!(((ArrInit) tmpInit).getAST_ArrayInit() instanceof ArrayInit)) {
                    LOG.warn(((ArrInit) tmpInit).getAST_ArrayInit()
                            + " not supported.");
                    continue;
                }
                resolveArrayInit((ArrayInit) ((ArrInit) tmpInit)
                        .getAST_ArrayInit());
            } else if (tmpInit instanceof VarInitExpr) {
                resolve(((VarInitExpr) tmpInit).getExpression());
            }
        }
    }

    // gibt den Typ der Allokation zurück
    private ClassInfo resolvePrimAllocExpr(PrimAllocExpr anExpr) {
        return resolveArray(anExpr.getArrayDimsAndInits(),
                resolvePrimitive(anExpr.getPrimitiveType()));

    }

    // ClassInfo Instanz einer Primitiven ermitteln
    private ClassInfo resolvePrimitive(PrimitiveType aPrimitive) {
        if (aPrimitive instanceof ByteTyp) {
            return TypeFactory.primitiveType(TypeFactory.BYTE);
        }
        if (aPrimitive instanceof ShortTyp) {
            return TypeFactory.primitiveType(TypeFactory.SHORT);
        }
        if (aPrimitive instanceof IntTyp) {
            return TypeFactory.primitiveType(TypeFactory.INT);
        }
        if (aPrimitive instanceof LongTyp) {
            return TypeFactory.primitiveType(TypeFactory.LONG);
        }
        if (aPrimitive instanceof FloatTyp) {
            return TypeFactory.primitiveType(TypeFactory.FLOAT);
        }
        if (aPrimitive instanceof DoubleTyp) {
            return TypeFactory.primitiveType(TypeFactory.DOUBLE);
        }
        if (aPrimitive instanceof BoolTyp) {
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        }
        if (aPrimitive instanceof CharTyp) {
            return TypeFactory.primitiveType(TypeFactory.CHAR);
        }
        throw new TypesysException("Unallowed primitive type " + aPrimitive);
    }

    // gibt den Typ eines Literals zurück
    private ClassInfo resolveLiteral(Literal anExpr) {
        if (anExpr instanceof BooleanLiteral) {
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        }
        if (anExpr instanceof CharLit) {
            return TypeFactory.primitiveType(TypeFactory.CHAR);
        }
        if (anExpr instanceof FPLit) {
            return TypeFactory.primitiveType(TypeFactory.FLOAT);
        }
        if (anExpr instanceof IntLit) {
            return TypeFactory.primitiveType(TypeFactory.INT);
        }
        if (anExpr instanceof NullLiteral) {
            return null;
        }
        if (anExpr instanceof StrLit) {
            return TypeFactory.STRING;
        }
        throw new TypesysException("Illegal literal. " + anExpr);
    }

    // gibt den Typ des Castings zurück
    private ClassInfo resolveCastExpression(CastExpression anExpr) {
        AST_TypeName tmpTypeName;
        if (anExpr instanceof CastExpr1) {
            resolve(((CastExpr1) anExpr).getUnaryExpression());
            tmpTypeName = ((CastExpr1) anExpr).getAST_TypeName();
        } else {
            resolve(((CastExpr2) anExpr).getUnaryExpressionNotPlusMinus());
            tmpTypeName = ((CastExpr2) anExpr).getAST_TypeName();
        }

        ClassInfo tmpClass = TypeFactory.valueOf(tmpTypeName.GetName(), scope,
                ArrayType.getDimCount(tmpTypeName));

        if (tmpTypeName instanceof QNameType) {
            List tmpQNames = getAsList(((QNameType) tmpTypeName)
                    .getAST_QualifiedName());
            addClassRef(tmpClass, (QName) tmpQNames.get(tmpQNames.size() - 1));
        }
        return tmpClass;
    }

    // gibt den Typ des arithmetischen Ausdrucks zurück
    private ClassInfo resolveAdditiveExpression(AdditiveExpression anExpr) {

        if (anExpr instanceof AddExpr) {

            ClassInfo tmpFirstSummand = resolve(((AddExpr) anExpr)
                    .getMultiplicativeExpression());
            ClassInfo tmpSecondSummand = resolveMoreExpressions(((AddExpr) anExpr)
                    .getMoreAddExpr());

            return getDominantOperandClassInfo(tmpFirstSummand,
                    tmpSecondSummand);
        } else if (anExpr instanceof MultExpr) {

            ClassInfo tmpFirstMultiplier = resolve(((MultExpr) anExpr)
                    .getUnaryExpression());
            ClassInfo tmpSecondMultiplier = resolveMoreExpressions(((MultExpr) anExpr)
                    .getMoreMultExpr());

            return getDominantOperandClassInfo(tmpFirstMultiplier,
                    tmpSecondMultiplier);
        } else if (anExpr instanceof MinusUE) {
            return resolve(((MinusUE) anExpr).getUnaryExpression());
        } else if (anExpr instanceof PlusUE) {
            return resolve(((PlusUE) anExpr).getUnaryExpression());
        } else if (anExpr instanceof PDecExpr) {
            return resolve(((PDecExpr) anExpr).getPrimaryExpression());
        } else if (anExpr instanceof PIncExpr) {
            return resolve(((PIncExpr) anExpr).getPrimaryExpression());
        } else if (anExpr instanceof NotUE) {
            resolve(((NotUE) anExpr).getUnaryExpression());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        } else if (anExpr instanceof TildeUE) {
            return TypeFactory.primitiveType(TypeFactory.INT);
        } else if (anExpr instanceof PEIncDec) {
            return resolve(((PEIncDec) anExpr).getPrimaryExpression());
        }

        throw new TypesysException("Illegal arithmetic Expression. " + anExpr);
    }

    // gibt den Typ des logischen Ausdrucks zurück
    private ClassInfo resolveConditionalOrExpression(
            ConditionalOrExpression anExpr) {

        if (anExpr instanceof CondOrExpr) {
            resolve(((CondOrExpr) anExpr).getConditionalAndExpression());
            resolveMoreExpressions(((CondOrExpr) anExpr).getMoreCondOrExpr());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        } else if (anExpr instanceof CondAndExpr) {
            resolve(((CondAndExpr) anExpr).getInclusiveOrExpression());
            resolveMoreExpressions(((CondAndExpr) anExpr).getMoreCondAndExpr());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        } else if (anExpr instanceof InclOrExpr) {
            resolveMoreExpressions(((InclOrExpr) anExpr).getMoreInclOrExpr());
            return resolve(((InclOrExpr) anExpr).getExclusiveOrExpression());
        } else if (anExpr instanceof ExclOrExpr) {
            resolveMoreExpressions(((ExclOrExpr) anExpr).getMoreExclOrExpr());
            return resolve(((ExclOrExpr) anExpr).getAndExpression());
        } else if (anExpr instanceof AndExpr) {
            resolveMoreExpressions(((AndExpr) anExpr).getMoreAndExpr());
            return resolve(((AndExpr) anExpr).getEqualityExpression());
        } else if (anExpr instanceof EqExpr) {
            resolve(((EqExpr) anExpr).getInstanceOfExpression());
            resolveMoreExpressions(((EqExpr) anExpr).getMoreEqExpr());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        } else if (anExpr instanceof IoExpr) {
            resolve(((IoExpr) anExpr).getRelationalExpression());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        } else if (anExpr instanceof RelExpr) {
            resolve(((RelExpr) anExpr).getShiftExpression());
            resolveMoreExpressions(((RelExpr) anExpr).getMoreRelExpr());
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        }

        throw new TypesysException("Illegal Conditional Expression. " + anExpr);
    }

    // löst die restlichen Operationen von arithmetischen und logischen
    // Ausdrücken auf
    private ClassInfo resolveMoreExpressions(AstList aMoreExpr) {

        AstCursor c = new AstCursor();
        ClassInfo returnType = TypeFactory.primitiveType(TypeFactory.INT);

        for (c.FirstElement(aMoreExpr); c.MoreElement(); c.NextElement()) {

            if (c.node instanceof COEBod)
                resolve(((COEBod) c.node).getConditionalAndExpression());
            else if (c.node instanceof CAEBod)
                resolve(((CAEBod) c.node).getInclusiveOrExpression());
            else if (c.node instanceof IOEBod)
                returnType = resolve(((IOEBod) c.node)
                        .getExclusiveOrExpression());
            else if (c.node instanceof EOEBod)
                returnType = resolve(((EOEBod) c.node).getAndExpression());
            else if (c.node instanceof AEBod)
                returnType = resolve(((AEBod) c.node).getEqualityExpression());
            else if (c.node instanceof EEBodyC)
                resolve(((EEBodyC) c.node).getInstanceOfExpression());
            else if (c.node instanceof REBod)
                resolve(((REBod) c.node).getShiftExpression());
            else if (c.node instanceof SEBodyC)
                resolve(((SEBodyC) c.node).getAdditiveExpression());
            else if (c.node instanceof AdEBod) {
                ClassInfo nextClassInfo = resolve(((AdEBod) c.node)
                        .getMultiplicativeExpression());
                returnType = getDominantOperandClassInfo(returnType,
                        nextClassInfo);
            } else if (c.node instanceof MEBod) {
                ClassInfo nextClassInfo = resolve(((MEBod) c.node)
                        .getUnaryExpression());
                returnType = getDominantOperandClassInfo(returnType,
                        nextClassInfo);
            } else
                LOG.error(" MoreExprBody not resolved: " + c.node.getClass()
                        + " " + c.node);
        }

        if (aMoreExpr instanceof MoreCondOrExpr
                || aMoreExpr instanceof MoreCondAndExpr
                || aMoreExpr instanceof MoreEqExpr
                || aMoreExpr instanceof MoreRelExpr)
            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);

        if (aMoreExpr instanceof MoreInclOrExpr
                || aMoreExpr instanceof MoreExclOrExpr
                || aMoreExpr instanceof MoreAndExpr
                || aMoreExpr instanceof MoreAddExpr
                || aMoreExpr instanceof MoreMultExpr) {
            return returnType;
        }

        if (aMoreExpr instanceof MoreShiftExpr)
            return TypeFactory.primitiveType(TypeFactory.INT);

        return null;
    }

    // vergleicht zwei ClassInfos und gibt den innerhalb
    // eines arithmetischen Ausdrucks dominanten zurück
    private ClassInfo getDominantOperandClassInfo(ClassInfo aFirst,
            ClassInfo aSecond) {

        if (TypeFactory.STRING.equals(aFirst)
                || TypeFactory.STRING.equals(aSecond)) {

            return TypeFactory.STRING;
        }
        if (TypeFactory.primitiveType(TypeFactory.DOUBLE).equals(aFirst)
                || TypeFactory.primitiveType(TypeFactory.DOUBLE)
                        .equals(aSecond)) {

            return TypeFactory.primitiveType(TypeFactory.FLOAT);
        }

        if (TypeFactory.primitiveType(TypeFactory.FLOAT).equals(aFirst)
                || TypeFactory.primitiveType(TypeFactory.FLOAT).equals(aSecond)) {

            return TypeFactory.primitiveType(TypeFactory.FLOAT);
        }

        if (TypeFactory.primitiveType(TypeFactory.BOOLEAN).equals(aFirst)
                || TypeFactory.primitiveType(TypeFactory.BOOLEAN).equals(
                        aSecond)) {

            return TypeFactory.primitiveType(TypeFactory.BOOLEAN);
        }
        return TypeFactory.primitiveType(TypeFactory.INT);
    }

    // gibt den Typ des bedingten Ausdrucks zurück
    private ClassInfo resolveQuestExpr(QuestExpr anExpr) {
        // Auflösen des Auswahl-Operanden
        resolve(((QuestExpr) anExpr).getConditionalOrExpression());

        ClassInfo tmpFirstOpt = resolve(((QuestExpr) anExpr).getExpression());
        ClassInfo tmpSecondOpt = resolve(((QuestExpr) anExpr)
                .getConditionalExpression());

        // wenn einer von beiden null ist
        if (tmpFirstOpt == null) {
            return tmpSecondOpt;
        }
        if (tmpSecondOpt == null) {
            return tmpFirstOpt;
        }

        // wenn beide den selben Typ haben und nicht null sind
        if (tmpFirstOpt.equals(tmpSecondOpt))
            return tmpFirstOpt;

        // wenn beide einen numerischen Typ haben
        if (isNumericType(tmpFirstOpt) && isNumericType(tmpSecondOpt)) {
            if (oneIsDoubleOrFloat(tmpFirstOpt, tmpSecondOpt)) {
                return TypeFactory.primitiveType(TypeFactory.FLOAT);
            }

            // wenn einer vom Typ char und der andere vom Typ int ist
            if (firstIsCharSecondIsInt(tmpFirstOpt, tmpSecondOpt)
                    || firstIsCharSecondIsInt(tmpSecondOpt, tmpFirstOpt)) {
                return TypeFactory.primitiveType(TypeFactory.CHAR);
            }

            return TypeFactory.primitiveType(TypeFactory.INT);
        }

        // wenn secondOption in firstOption konvertiert werden kann
        if (tmpFirstOpt.isAssignableFrom(tmpSecondOpt))
            return tmpFirstOpt;

        // wenn firstOption in secondOption konvertiert werden kann
        if (tmpSecondOpt.isAssignableFrom(tmpFirstOpt))
            return tmpSecondOpt;

        throw new TypesysException("Illegal QuestExpr. Neither type is "
                + "assignment compatible with the other type. " + anExpr + " "
                + tmpFirstOpt + " " + tmpSecondOpt);
    }

    private boolean oneIsDoubleOrFloat(ClassInfo aSt, ClassInfo aSec) {
        return (TypeFactory.primitiveType(TypeFactory.DOUBLE).equals(aSt)
                || TypeFactory.primitiveType(TypeFactory.FLOAT).equals(aSt)
                || TypeFactory.primitiveType(TypeFactory.DOUBLE).equals(aSec) || TypeFactory
                .primitiveType(TypeFactory.FLOAT).equals(aSec));
    }

    private boolean firstIsCharSecondIsInt(ClassInfo aSt, ClassInfo aSec) {
        return TypeFactory.primitiveType(TypeFactory.CHAR).equals(aSt)
                && TypeFactory.primitiveType(TypeFactory.INT).equals(aSec);
    }

    // überprüft ob die ClassInfo einen numerischen Typ repräsentiert
    private boolean isNumericType(ClassInfo aClassInfo) {
        if (aClassInfo == null) {
            return false;
        }
        return TypeFactory.isPrimitive(aClassInfo) && !TypeFactory.primitiveType(
                TypeFactory.BOOLEAN).equals(aClassInfo) && !TypeFactory.primitiveType(
                        TypeFactory.VOID).equals(aClassInfo);
    }

    private void addFieldAccess(FieldInfo aField, QName aNode) {
        FieldAccess tmpAcc = new FieldAccess(aField, aNode);
        tmpAcc.setContext(scope);
        fieldAccesses.add(tmpAcc);
    }

    private void addClassRef(ClassInfo aClass, QName aNode) {
        ClassReference tmpRef = new ClassReference(aClass, aNode);
        tmpRef.setContext(scope);
        classRefs.add(tmpRef);
    }
}

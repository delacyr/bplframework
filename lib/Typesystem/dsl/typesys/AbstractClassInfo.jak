layer typesys;

/**
 * Skelettimplementierung des Interfaces <code>ClassInfo</code>.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 *
 */
abstract class AbstractClassInfo extends AbstractNamed implements ClassInfo {

    /* (non-Javadoc)
     * @see ClassInfo#isAssignableFrom(ClassInfo)
     */
    public boolean isAssignableFrom(ClassInfo aClass) {
        if (aClass == null) {
            return false;
        }
        
        if (equals(aClass)) {
            return true;
        }
        
        if (isAssignableFrom(aClass.getSuperClass())) { 
            return true;
        }
        
        for (int i=0; i < aClass.getInterfaces().length; i++) {
            if (isAssignableFrom(aClass.getInterfaces()[i])) {
                return true;
            }
        }
        
        return false;
    }
    
    /* (non-Javadoc)
     * @see Scope#findField(java.lang.String)
     */
    public FieldInfo findField(String aName) {
    
        FieldInfo tmpField = getField(aName);
        if (tmpField != null) {
            return tmpField;
        }
        
        // TODO: Interfaces
        
        ClassInfo tmpSuper = getSuperClass();
        while (tmpSuper != null) {
            tmpField = tmpSuper.getField(aName);
            if (tmpField instanceof Modified && !((Modified) tmpField).isPrivate()) {
                return tmpField;
            }
            tmpSuper = tmpSuper.getSuperClass();
        }        
        return null;
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    public String toString() {
        StringBuilder tmpString = new StringBuilder();
        if (getContext() != null) {
        tmpString.append("[").append(getContext()).append("]");
        }
        tmpString.append(getName());
        return tmpString.toString();
    }
    
    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#equals(java.lang.Object)
     */
    public boolean equals(Object anObj) {
        if (!(anObj instanceof ClassInfo)) {
            return false;
        }

        if (getContext() == null && ((ClassInfo) anObj).getContext() != null) {
            return false;
        }

        if (getContext() != null
                && !getContext().equals(((ClassInfo) anObj).getContext())) {
            return false;
        }

        return super.equals(anObj);
    }

    /*
     * (non-Javadoc)
     * 
     * @see AbstractNamed#hashCode()
     */
    public int hashCode() {
        int h = 17;

        h *= 37;
        if (getContext() != null) {
            h += getContext().hashCode();
        }

        h = h * 37 + super.hashCode();

        return h;
    }
}

layer typesys;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mixin.program;
import mixin.ParseException;
import mixin.Parser;


/**
 * Typsystem.
 * <p>
 * Über das Typsystem können Informationen über Layer, Klassen, Methoden und
 * Variablen ermittelt werden.
 * <p>
 * Um das Typsystem zu initialisieren, müssen die Layer einer Equation
 * nacheinander über die Methode {@link #addLayer(File[])} hinzugefügt werden.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * @author Stephan Kauschka
 * 
 */
public class TypeSystem {

    private final SymTab SYMTAB = SymTab.getInstance( this );

    private Map _layer;

    private LayerInfo firstLayer;

    private LayerInfo actLayer;

    private final Log LOG;


    public TypeSystem() {
        _layer = new HashMap();
        firstLayer = null;
        actLayer = null;
        LOG = LogFactory.getLog("typesys.TypeSystem");
    }

    /**
     * Objektattribute zurücksetzen
     */
    public void reset() {
        _layer = new HashMap();
        firstLayer = null;
        actLayer = null;
        SYMTAB.reset();
    }

    /**
     * Objektattribute löschen
     */
    public void delete(){
   		_layer = null;
        firstLayer = null;
        actLayer = null;
        SymTab.deleteInstance( this );
    }

    /**
     * Gibt den ersten Layer der Equation zurück.
     * 
     * @return der erste Layer der Equation.
     */
    public LayerInfo getFirstLayer() {
        return firstLayer;
    }

    /**
     * Gibt alle Layer zurück.
     * 
     * @return alle Layer in einem Array.
     */
    public LayerInfo[] getLayer() {
        return (LayerInfo[]) _layer.values()
                .toArray(new LayerInfo[_layer.size()]);
    }

    /**
     * Gibt den Layer mit dem Namen <code>aName</code> zurück.
     * 
     * @return der Layer mit dem Namen aName oder <code>null</code>, falls
     *         der Layer nicht existiert.
     */
    public LayerInfo getLayer(String aName) {
        if (!_layer.containsKey(aName)) {
            return null;
        }
        return (LayerInfo) _layer.get(aName);
    }

    /**
     * Ermittelt die zugehörige {@link LayerInfo} Instanz, die zum Verzeichnis
     * <code>aDirectory</code> gehört.
     * <p>
     * Falls das Layer nicht existiert, wird <code>null</code> zurückgegeben.
     * 
     * @param aDirectory
     *            Verzeichnis des Layers.
     * 
     * @return die LayerInfo Instanz des gesuchten Layers.
     */
    public LayerInfo getLayer(File directory) {

        if (directory == null || !directory.isDirectory()) {
            throw new IllegalArgumentException("No directory specified.");
        }

		try {
			File aDirectory = directory.getCanonicalFile();
        	LayerInfo tmpLayer = firstLayer;
        	while ( tmpLayer != null ) {
        		File parentt = new File(TypesysUtil.getLayerLocation(tmpLayer));
            	if (aDirectory.toURI().equals(parentt.toURI())) 
            		return tmpLayer;
            	tmpLayer = tmpLayer.getNext();
        	}
        } catch (Exception e) {e.printStackTrace();}

        return null;
    }

    // aLayer wird hinter aPrevLayer hinzugefügt.
    void addLayer(LayerInfo aLayer, LayerInfo aPrevLayer) {
        if (aPrevLayer == null) {
            aLayer.setNext(firstLayer);
            firstLayer = aLayer;
        } else {
            aLayer.setNext(aPrevLayer.getNext());
            aLayer.setPrev(aPrevLayer);
            aPrevLayer.setNext(aLayer);
        }
        _layer.put(aLayer.getName(), aLayer);
        
        LOG.debug(aLayer.getName() + " added.");
    }    
    
    /**
     * Fügt dem Typsystem einen Layer hinzu.
     * <p>
     * Alle Quelldateien müssen aus dem selben Layer sein.
	 * Wenn keine Quelldateien vorhanden sind muss ein leeres Array übergeben werden.
     * 
     * @param someFiles
	 * @param layerName
	 * @param theLocation
     *            Der Verzeichnispfad des Layers.
     */
    public void addLayer(File[] someFiles, String layerName, String theLocation) {
        LayerInfo tmpPrevLayer = actLayer;
        addClasses(someFiles, layerName, theLocation);

        if (tmpPrevLayer != null) {
            actLayer.setPrev(tmpPrevLayer);
            tmpPrevLayer.setNext(actLayer);
        }

        if (firstLayer == null) {
            firstLayer = actLayer;
        }

        _layer.put(actLayer.getName(), actLayer);
        LOG.info(actLayer.getName() + " added.");
    }

    /**
     * Fügt dem Typsystem einen Layer hinzu.
     * <p>
     * Alle ProgramNodes müssen aus dem selben Layer sein.
     * Die Zuordnung der Dateien zu den ProgramNodes wird nicht nochmal geprüft. 
	 * Wenn keine Quelldateien vorhanden sind muss ein leeres Array übergeben werden.
	 *
	 * @param someFiles
     * @param someParsedPrograms
	 * @param theLocation
     *            Der Verzeichnispfad des Layers.
	 * @param layerName
     */
    public void addLayer(File[] someFiles, program[] someParsedPrograms, String layerName, String theLocation) {
        if (someFiles.length != someParsedPrograms.length) {
            throw new IllegalArgumentException("The amount of programs and files is not the same.");
        }

        LayerInfo tmpPrevLayer = actLayer;
        addClasses(someFiles, someParsedPrograms, layerName, theLocation);

        if (tmpPrevLayer != null) {
            actLayer.setPrev(tmpPrevLayer);
            tmpPrevLayer.setNext(actLayer);
        }

        if (firstLayer == null) {
            firstLayer = actLayer;
        }

        _layer.put(actLayer.getName(), actLayer);
        LOG.info(actLayer.getName() + " added.");
    }

    private void addClasses(File[] someFiles, String layerName, String theLocation) {

		LayerInfo tmpLayer = LayerInfoImpl.newInstance( this, layerName, theLocation);
		actLayer = tmpLayer;
        SYMTAB.enterScope(actLayer);

        for (int i = 0; i < someFiles.length; i++) {
            program tmpNode = parse(someFiles[i]);
            SYMTAB.declare(ClassInfoAst.newInstance(someFiles[i], tmpNode));
        }

        SYMTAB.leaveScope();
    }

    private void addClasses(File[] someFiles, program[] someParsedPrograms, String layerName, String theLocation) {

		LayerInfo tmpLayer = LayerInfoImpl.newInstance( this, layerName, theLocation);
		actLayer = tmpLayer;
        SYMTAB.enterScope(actLayer);

        for (int i = 0; i < someParsedPrograms.length; i++) {
            program tmpNode = someParsedPrograms[i];
            SYMTAB.declare(ClassInfoAst.newInstance(someFiles[i], tmpNode));
        }

        SYMTAB.leaveScope();
    }

    // Quelldatei parsen
    private program parse(File aFile) {
        try {
            return (program) Parser.getInstance(aFile).parseAll();
        } catch (FileNotFoundException e) {
            throw new TypesysException(e);
        } catch (ParseException e) {
            throw new TypesysException("While parsing " + aFile.getName() + " an exception occured.\n"
        	    + e.getMessage());
        }
    }
    
    
    private ClassInfo[] convertToTypes(String[] someNames, ClassInfo aClass) {
        List tmpTypes = new ArrayList();
        for (int i = 0; i < someNames.length; i++) {
            ClassInfo tmpClass = TypeFactory.valueOf(someNames[i], aClass);
            if (tmpClass == null) {
                throw new TypesysException(someNames[i] + " in " + aClass.getFullName() + " can't be resolved.");
            }
            tmpTypes.add(tmpClass);
        }
        return (ClassInfo[]) tmpTypes.toArray(new ClassInfo[tmpTypes.size()]);
    }

    /**
     * Ermittelt die zugehörige {@link MethodInfo} Instanz.
     * <p>
     * Falls die Methode nicht existiert, wird <code>null</code>
     * zurückgegeben.
     * 
     * @param aLayer
     *            der Name des Layers, in der sich die Klasse der Methode
     *            befindet.
     * @param aClass
     *            der Name der Klasse, in der sich die Methode befindet.
     * @param aMethod
     *            der Name der Methode.
     * @param someParams
     *            die Namen der Typen der Methodenparameter.
     * @return das zugehörige <code>MethodInfo</code> Objekt.
     */
    public MethodInfo getMethod(String aLayer, String aClass, String aMethod,
            String[] someParams) {

        ClassInfo tmpClass = getClazz(aLayer, aClass);
        if (tmpClass == null) {
            return null;
        }

        MethodInfo tmpMethod = tmpClass.findMethod(aMethod, convertToTypes(
                someParams, tmpClass));

        return (tmpMethod != null && tmpMethod.getContext() == tmpClass) ? tmpMethod
                : null;
    }

    /**
     * Ermittelt die zugehörige {@link ClassInfo} Instanz.
     * <p>
     * Falls die Klasse nicht existiert, wird <code>null</code> zurückgegeben.
     * 
     * @param aLayer
     *            der Name des Layers, in der sich die Klasse befindet.
     * @param aClass
     *            der Name der gesuchten Klasse.
     * @return die ClassInfo Instanz der gesuchten Klasse.
     */
    public ClassInfo getClazz(String aLayer, String aClass) {
        LayerInfo tmpLayer = getLayer(aLayer);
        if (tmpLayer == null) {
            return null;
        }

        ClassInfo tmpClass = tmpLayer.findClass(aClass);
        if (tmpClass == null || tmpLayer != tmpClass.getContext()) {
            return null;
        }
        return tmpClass;
    }
    
    /**
     * Ermittelt die zugehörige {@link ClassInfo} Instanz, die in der Datei
     * <code>aFile</code> definiert wird.
     * <p>
     * Falls die Klasse nicht existiert, wird <code>null</code> zurückgegeben.
     * 
     * @param aFile
     *            Quelldatei der Klasse.
     * 
     * @return die ClassInfo Instanz der gesuchten Klasse.
     */
    public ClassInfo getClazz(File aFile) {
        if ( aFile == null ) {
            throw new IllegalArgumentException("No file specified.");
        }

        LayerInfo tmpLayer = firstLayer;
        try {
        	while ( tmpLayer != null ) {
            	for (int i = 0; i < tmpLayer.getClasses().length; i++) {
                	File tmpClassFile = ((ClassInfoAst) tmpLayer.getClasses()[i]).getSrcFile();

                	if (tmpClassFile.getCanonicalFile().toURI().equals(aFile.getCanonicalFile().toURI())) {
                    	return tmpLayer.getClasses()[i];
                	}

                	if (!sameParentDirectory(aFile, tmpClassFile)) {
                    	break;
                	}
            	}
            	tmpLayer = tmpLayer.getNext();
        	}
        } catch (Exception e) {e.printStackTrace();}

        return null;
    }

    private boolean sameParentDirectory(File file1, File file2) {

        if (file1 == null || file2 == null) {
            return false;
        }

		try{
        	File aFile1 = file1.getCanonicalFile();
        	File aFile2 = file2.getCanonicalFile();

        	File tmpParent1 = aFile1.getParentFile();
        	File tmpParent2 = aFile2.getParentFile();
        	if ( tmpParent1 == null ) {
            	return tmpParent2 == null;
        	}
        	return tmpParent1.toURI().equals(tmpParent2.toURI());
        } catch (Exception e) {e.printStackTrace();}

        return false;
    }
    
    // alle Aufrufe der Methode aMethod
    MethodInvocation[] findCalls(MethodInfo aMethod) {
        if (!(aMethod instanceof MethodInfoAst)) {
            return new MethodInvocation[0];
        }

        ClassInfoAst tmpMethodClass = (ClassInfoAst) aMethod.getContext();
        // bei private nur in der Klasse der Methode suchen
        if (aMethod.isPrivate()) {
            List tmpCalls = findCallsInClass((MethodInfoAst) aMethod,
                    tmpMethodClass);
            return (MethodInvocation[]) tmpCalls
                    .toArray(new MethodInvocation[tmpCalls.size()]);
        }

        // bei public, protected oder package-private im Layer der Methode und
        // allen tieferen Layern suchen
        findCallsInHigherLayer((MethodInfoAst) aMethod);
        return null;
    }

    // findet Aufrufe in dem Layer der Methode und allen tieferen Layern
    private List findCallsInHigherLayer(MethodInfoAst aMethod) {
        List tmpResult = new ArrayList();
        LayerInfo tmpLayer = (LayerInfo) aMethod.getContext().getContext();
        do {
            findCallsInLayer(aMethod, tmpLayer);
            tmpLayer = tmpLayer.getNext();
        } while (tmpLayer != null);
        return tmpResult;
    }

    private List findCallsInLayer(MethodInfoAst aMethod, LayerInfo aLayer) {
        List tmpResult = new ArrayList();
        for (int i = 0; i < aLayer.getClasses().length; i++) {
            tmpResult.addAll(findCallsInClass(aMethod, (ClassInfoAst) aLayer
                    .getClasses()[i]));
        }
        return tmpResult;
    }

    private List findCallsInClass(MethodInfoAst aMethod, ClassInfoAst aClass) {
        List tmpResult = new ArrayList();
        for (int i = 0; i < aClass.getMethodInvocations().length; i++) {
            if (aMethod.equals(aClass.getMethodInvocations()[i].getMethod())) {
                tmpResult.add(aClass.getMethodInvocations()[i]);
            }
        }
        return tmpResult;
    }

    // alle Referenzen der Variable/ des Attributs aField
    FieldAccess[] findRefs(FieldInfo aField) {
        if (!(aField instanceof FieldInfoAst)) {
            return new FieldAccess[0];
        }

        List tmpResult = new ArrayList();

        Scope tmpParent = TypesysUtil.getParentMethodOrClass(aField
                .getContext());

        // lokale Variable
        if (tmpParent instanceof MethodInfo) {
            tmpResult.addAll(findRefsInMethod((FieldInfoAst) aField,
                    (MethodInfoAst) tmpParent));
        }
        // Objektattribut
        else if (tmpParent instanceof ClassInfo) {
            if (((Modified) tmpParent).isPrivate()) {
                tmpResult.addAll(findRefsInClass((FieldInfoAst) aField,
                        (ClassInfoAst) tmpParent));
            } else {
                tmpResult.addAll(findRefsInHigherLayer((FieldInfoAst) aField));
            }
        }

        return (FieldAccess[]) tmpResult.toArray(new FieldAccess[tmpResult
                .size()]);
    }

    // Referenzen in Layer des Attributs und allen höheren Layern
    private List findRefsInHigherLayer(FieldInfoAst aField) {
        List tmpResult = new ArrayList();

        LayerInfo tmpLayer = (LayerInfo) aField.getContext().getContext();
        do {
            findRefInLayer(aField, tmpLayer);
            tmpLayer = tmpLayer.getNext();
        } while (tmpLayer != null);
        return tmpResult;
    }

    private List findRefInLayer(FieldInfoAst aField, LayerInfo aLayer) {
        List tmpResult = new ArrayList();
        for (int i = 0; i < aLayer.getClasses().length; i++) {
            tmpResult.addAll(findRefsInClass(aField, (ClassInfoAst) aField
                    .getContext()));
        }
        return tmpResult;
    }

    private List findRefsInClass(FieldInfoAst aField, ClassInfoAst aClass) {
        List tmpResult = new ArrayList();
        for (int i = 0; i < aClass.getFieldAccesses().length; i++) {
            if (aField.equals(aClass.getFieldAccesses()[i].getField())) {
                tmpResult.add(aClass.getFieldAccesses()[i]);
            }
        }
        return tmpResult;
    }

    private List findRefsInMethod(FieldInfoAst aField, MethodInfoAst aMethod) {
        List tmpResult = new ArrayList();
        for (int i = 0; i < aMethod.getFieldAccesses().length; i++) {
            if (aField.equals(aMethod.getFieldAccesses()[i].getField())) {
                tmpResult.add(aMethod.getFieldAccesses()[i]);
            }
        }
        return tmpResult;
    }

    /**
     * Gibt alle private Objektattribute der Klasse <code>aClass</code>
     * zurück.
     * 
     * @param aClass
     *            die Klasse, in der nach Attributen gesucht werden soll.
     * @return alle Objektattribute mit private Modifikator. Array der Länge 0,
     *         wenn keine private Attribute existieren.
     */
    public FieldInfo[] getPrivateFields(ClassInfo aClass) {
        List tmpList = new ArrayList();
        for (int i = 0; i < aClass.getFields().length; i++) {
            if (!(aClass.getFields()[i] instanceof Modified)) {
                continue;
            }
            Modified tmpModified = (Modified) aClass.getFields()[i];
            if (tmpModified.isPrivate()) {
                tmpList.add(tmpModified);
            }
        }
        return (FieldInfo[]) tmpList.toArray(new FieldInfo[tmpList.size()]);
    }

    /**
     * Gibt alle private Methoden der Klasse <code>aClass</code> zurück.
     * 
     * @param aClass
     *            die Klasse, in der nach Methoden gesucht werden soll.
     * @return alle Methoden mit private Modifikator. Array der Länge 0, wenn
     *         keine private Methoden existieren.
     */
    public MethodInfo[] getPrivateMethods(ClassInfo aClass) {
        List tmpList = new ArrayList();
        for (int i = 0; i < aClass.getMethods().length; i++) {
            if (aClass.getMethods()[i].isPrivate()) {
                tmpList.add(aClass.getMethods()[i]);
            }
        }
        return (MethodInfo[]) tmpList.toArray(new MethodInfo[tmpList.size()]);
    }

    // alle Referenzen zu private Attributen in aMethod
    FieldAccess[] getRefsToPrivateFields(MethodInfoAst aMethod) {
        List tmpPrivates = Arrays.asList(getPrivateFields((ClassInfo) aMethod
                .getContext()));

        List tmpAccesses = new ArrayList();
        for (int i = 0; i < aMethod.getFieldAccesses().length; i++) {
            FieldAccess tmpAccess = aMethod.getFieldAccesses()[i];
            if (tmpPrivates.contains(tmpAccess.getField())) {
                tmpAccesses.add(tmpAccess);
            }
        }
        return (FieldAccess[]) tmpAccesses.toArray(new FieldAccess[tmpAccesses
                .size()]);
    }
    
    // alle Aufrufe von private Methoden in aMethod
    MethodInvocation[] getCallsToPrivateMethods(MethodInfoAst aMethod) {
        List tmpPrivates = Arrays.asList(getPrivateMethods((ClassInfo) aMethod
                .getContext()));

        List tmpCalls = new ArrayList();
        for (int i = 0; i < aMethod.getMethodInvocations().length; i++) {
            MethodInvocation tmpCall = aMethod.getMethodInvocations()[i];
            if (tmpPrivates.contains(tmpCall.getMethod())) {
                tmpCalls.add(tmpCall);
            }
        }
        return (MethodInvocation[]) tmpCalls.toArray(new MethodInvocation[tmpCalls
                .size()]);
    }
}

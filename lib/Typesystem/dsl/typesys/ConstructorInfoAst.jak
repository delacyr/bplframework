layer typesys;

import mixin.AST_Modifiers;
import mixin.AST_ParList;
import mixin.AST_Stmt;
import mixin.ClassBodyDeclaration;
import mixin.ConDecl;
import mixin.QName;
import mixin.RefCons;

/**
 * Konstruktoren und Konstruktorverfeinerungen
 * 
 * @author Stephan Klapproth
 *
 */
class ConstructorInfoAst extends MethodInfoAst {

    private ConstructorBlock block;
    
    public ConstructorInfoAst(ClassBodyDeclaration aDecl) {
        super(aDecl);
    }
    
    void isValidClassBodyDcl() {
        if (!(astClassBodyDcl instanceof ConDecl) || astClassBodyDcl instanceof RefCons) {
            throw new IllegalArgumentException("aDecl has to be of type ConDecl or RefCons");
        }
    }
    
    // Konstruktorverfeinerung?
    public boolean isRefinement() {
        return astClassBodyDcl instanceof RefCons;
    }
    
    AST_Modifiers getModifiersASTNode() {
        if (isRefinement()) {
            return null;
        }
        return ((ConDecl) astClassBodyDcl).getAST_Modifiers();
    }
    
    private AST_Stmt getStmtASTNode() {
        if (isRefinement()) {
            return ((RefCons) astClassBodyDcl).getAST_Stmt();
        } else {
            return ((ConDecl) astClassBodyDcl).getAST_Stmt();
        }
    }
    
    void initStatements() {
        AST_Stmt tmpStmt = getStmtASTNode();
        if (tmpStmt != null) {
            block = new ConstructorBlock(getStmtASTNode());
            block.setContext(((ConstructorInfoAst) this));
        }
    }
    
    /* (non-Javadoc)
     * @see MethodInfoAst#getMethodInvocations()
     */
    public MethodInvocation[] getMethodInvocations() {
        if (block == null) {
            return new MethodInvocation[0];
        }
        return block.getMethodInvocations();
    }
    
    /* (non-Javadoc)
     * @see MethodInfoAst#getClassReferences()
     */
    public ClassReference[] getClassReferences() {
        if (block == null) {
            return new ClassReference[0];
        }
        return block.getClassReferences();
    }
    
    /* (non-Javadoc)
     * @see MethodInfoAst#getFieldAccesses()
     */
    public FieldAccess[] getFieldAccesses() {
        if (block == null) {
            return new FieldAccess[0];
        }       
        return block.getFieldAccesses();
    }
    
    AST_ParList getAST_ParListNode() {
        if (isRefinement()) {
            return ((RefCons) astClassBodyDcl).getAST_ParList();
        } else {
            return ((ConDecl) astClassBodyDcl).getAST_ParList();
        }
    }
    
    QName getQNameNode() {
        if (isRefinement()) {
            return ((RefCons) astClassBodyDcl).getQName();
        } else {
            return ((ConDecl) astClassBodyDcl).getQName();
        }
    }
    
    // Konstruktoren haben keinen Rückgabetypen.
    // Es wird void zurückgegeben.
    public ClassInfo getReturnType() {
        return new ClassInfoReflAdapter(void.class);
    }

}

layer typesys;

/**
 * BlockScope (z. B. for, while, do-while, try-catch, ... Blöcke).
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
interface BlockScope extends Scope, Declaration {

    /**
     * Gibt alle eingebetteten BlockScopes zurück.
     * 
     * @return BlockScopes.
     */
    public BlockScope[] getBlockScopes();

    /**
     * Gibt alle Methodenaufrufe zurück, die sich in diesem Scope befinden.
     * <p>
     * Das Ergebnis enthält auch die Methodenaufrufe, die sich in den
     * geschachtelten Blöcken befinden.
     * <p>
     * Falls sich in diesem Scope keine Methodenaufrufe befinden, wird ein Array
     * der Länge 0 zurückgegeben.
     * 
     * @return alle Methodenaufrufe dieses BlockScopes.
     */
    public MethodInvocation[] getMethodInvocations();

    /**
     * Gibt alle Klassenreferenzen zurück, die sich in diesem Scope befinden.
     * <p>
     * Das Ergebnis enthält auch die Referenzen, die sich in den
     * geschachtelten Blöcken befinden.
     * <p>
     * Falls sich in diesem Scope keine Methodenaufrufe befinden, wird ein Array
     * der Länge 0 zurückgegeben.
     * 
     * @return alle Klassenreferenzen dieses BlockScopes.
     */
    public ClassReference[] getClassReferences();

    /**
     * Gibt alle Zugriffe auf Variablen zurück.
     * <p>
     * Das Ergebnis enthält auch alle Zugriffe, die sich in geschachtelten
     * Blöcken befinden.
     * <p>
     * Falls sich in diesem Scope keine Variablenzugriffe befinden, wird ein
     * Array der Länge 0 zurückgegeben.
     * 
     * @return alle Variablenzugriffe dieses BlockScopes.
     */
    public FieldAccess[] getFieldAccesses();
    
    /**
     * Gibt alle lokalen Variablen zurück, die in diesem Blockscope deklariert
     * wurden.
     * <p>
     * Dazu gehören auch die lokalen Variablen von eingebetteten BlockScopes.
     * <p>
     * Falls keine Variablendeklaration existiert, wird ein Array der Länge 0
     * zurückgegeben.
     * 
     * @return alle lokalen Variablen dieses Blocks.
     */
    public FieldInfo[] getFields();
}

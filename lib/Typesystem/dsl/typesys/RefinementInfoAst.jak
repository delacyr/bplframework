layer typesys;

import java.io.File;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import mixin.AST_TypeNameList;
import mixin.ImplClause;
import mixin.IntExtClauseC;
import mixin.program;
import mixin.UmodClassExt;
import mixin.UmodIntExt;
import mixin.UnmodifiedTypeExtension;
import mixin.Ute;


/**
 * Beschreibt ein Refinement.
 * <p>
 * {@link #getSuperClass()} wird überschrieben und liefert die Basisklasse bzw.
 * eine vorherige Verfeinerung.
 * <p>
 * Zudem müssen einige andere Methoden überschrieben werden, da sich die ASTs
 * von Basisklassen und Refinements an einigen Stellen unterscheiden.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class RefinementInfoAst extends ClassInfoAst {

    /**
     * Konstruktor.
     * 
     * @param aSource Quelldatei.
     * @param aProgram AST node.
     */
    public RefinementInfoAst(File aSource, program aProgram) {
        super(aSource, aProgram);
    }

    /* (non-Javadoc)
     * @see ClassInfoAst#getName()
     */
    public String getName() {
        if (getUte() instanceof UmodClassExt) {
            return ((UmodClassExt) getUte()).getQName().GetName();
        } else if (getUte() instanceof UmodIntExt) {
            return ((UmodIntExt) getUte()).getQName().GetName();
        }
        return ""; // TODO Exception?
    }

    /**
     * Liefert die vorherige Verfeinerung oder Basisklasse.
     * 
     * @see ClassInfoAst#getSuperClass()
     */
    public ClassInfo getSuperClass() {
        if (_layer == null) {
            throw new IllegalStateException("Declaring scope (LayerInfo) for " + getFullName() + " not set!");
        }

        if (_layer.getPrev() == null) {
            throw new TypesysException("Refinement " + getFullName() + " has no base class!");
        }
        return (ClassInfo) _layer.getPrev().findClass(getName());
    }

    /* (non-Javadoc)
     * @see ClassInfoAst#isInterface()
     */
    public boolean isInterface() {
        return getUte() instanceof UmodIntExt;
    }

    private UnmodifiedTypeExtension getUte() {
        if (!(getUtd() instanceof Ute)) {
            throw new TypesysException(
                    "Type declaration for " + getFullName() + " is not an extension declaration (Ute).");
        }
        return ((Ute) getUtd()).getUnmodifiedTypeExtension();
    }

    protected AST_TypeNameList getAST_TypeNameList() {
        if (getUte() instanceof UmodClassExt) {
            return getAST_TypeNameList((UmodClassExt) getUte());
        } else if (getUte() instanceof UmodIntExt) {
            return getAST_TypeNameList((UmodIntExt) getUte());
        }
        return null;
    }

    private AST_TypeNameList getAST_TypeNameList(UmodClassExt aClassExt) {
        if (!(aClassExt.getImplementsClause() instanceof ImplClause)) {
            return null;
        }
        return ((ImplClause) aClassExt.getImplementsClause())
                .getAST_TypeNameList();
    }

    private AST_TypeNameList getAST_TypeNameList(UmodIntExt anIntExt) {
        if (!(anIntExt.getIntExtClause() instanceof IntExtClauseC)) {
            return null;
        }
        return ((IntExtClauseC) anIntExt.getIntExtClause())
                .getAST_TypeNameList();
    }
    
    /*
     * Liefert auch alle Imports der Klassen/Verfeinerungen höherer Schichten
     * 
     * @see ClassInfoAst#getImports()
     */
    public String[] getImports() {

        Set tmpResult = new HashSet();
        Collections.addAll(tmpResult, (Object[])super.getImports());
        Collections.addAll(tmpResult, (Object[])((ClassInfoAst) getSuperClass())
                .getImports());
        return (String[]) tmpResult.toArray(new String[tmpResult.size()]);
    }
}

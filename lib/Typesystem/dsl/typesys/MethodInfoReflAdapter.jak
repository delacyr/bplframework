layer typesys;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;

/**
 * Implementiert das Interface MethodInfo und bezieht die Informationen über die
 * Java Reflection API.
 * 
 * @layer<typesys>
 * @author Stephan Klapproth
 * 
 */
class MethodInfoReflAdapter extends AbstractMethodInfo {

    private Method method;

    /**
     * Konstruktor
     * 
     * @param aMethod
     *            {@link Method} Objekt, aus dem die Informationen bezogen
     *            werden.
     */
    public MethodInfoReflAdapter(Method aMethod) {
        method = aMethod;
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#getParameters()
     */
    public ClassInfo[] getParameters() {
        List tmpParams = new ArrayList();
        for (int i = 0; i < method.getParameterTypes().length; i++) {
            Class tmpParam = method.getParameterTypes()[i];
            ClassInfo tmpType = getType(tmpParam);
            tmpParams.add(tmpType);

        }
        return (ClassInfo[]) tmpParams.toArray(new ClassInfo[tmpParams.size()]);
    }

    private ClassInfo getType(Class aClass) {
        int tmpArrayDim = 0;
        while (aClass.isArray()) {
            tmpArrayDim++;
            aClass = aClass.getComponentType();
        }

        return (tmpArrayDim > 0) ? TypeFactory.valueOf(aClass.getName(), this,
                tmpArrayDim) : TypeFactory.valueOf(aClass.getName(), this);
    }

    /*
     * (non-Javadoc)
     * 
     * @see MethodInfo#getReturnType()
     */
    public ClassInfo getReturnType() {
        return getType(method.getReturnType());

    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#getContext()
     */
    public Scope getContext() {
        int tmpArrayDim = 0;

        String tmpName = method.getDeclaringClass().getCanonicalName();
        while (tmpName.endsWith("[]")) {
            tmpArrayDim++;
            tmpName = tmpName.substring(0, tmpName.length() - 2);
        }

        Class tmpType = method.getDeclaringClass();
        while (tmpType.isArray()){
            tmpType = tmpType.getComponentType();
        }

        if (tmpArrayDim>0) 
	    	return new ArrayType(new ClassInfoReflAdapter(tmpType), tmpArrayDim);
		else 
	    	return new ClassInfoReflAdapter(tmpType);
    }

    /*
     * (non-Javadoc)
     * 
     * @see Declaration#setContext(Scope)
     */
    public void setContext(Scope aScope) {
        throw new UnsupportedOperationException();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Named#getFullName()
     */
    public String getFullName() {
        return getContext().getFullName() + TypesysUtil.DOT + getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Named#getName()
     */
    public String getName() {
        return method.getName();
    }

    /*
     * (non-Javadoc)
     * 
     * @see Scope#addDeclaration(Declaration)
     */
    public void addDeclaration(Declaration aDeclaration) {
        throw new UnsupportedOperationException();
    }
    
    public String signature() {
    	StringBuilder tmpBuffer = new StringBuilder(getName());
    	tmpBuffer.append("(");
    	ClassInfo[] tmpParams = getParameters();
    	for (int i=0; i < tmpParams.length; i++) {
    		if (i > 0) {
    			tmpBuffer.append(", ");
    		}
    		tmpBuffer.append(tmpParams[i].getFullName());
    	}
    	tmpBuffer.append(")");
    	return tmpBuffer.toString();
    }
    
    public FieldInfo findField(String aName) {
        return getContext().findField(aName);
    }
    
    public boolean isPublic() {
        return Modifier.isPublic(method.getModifiers());
    }
    
    public boolean isProtected() {
        return Modifier.isProtected(method.getModifiers());
    }
    
    public boolean isPrivate() {
        return Modifier.isPrivate(method.getModifiers());
    }
    
    public boolean isRefinement(){
		return false;
    }

    public ModifierInfo[] getModifier() {
		List modifier = new ArrayList();
		int mod = method.getModifiers();

		if (java.lang.reflect.Modifier.isAbstract(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.ABSTRACT));
		if (java.lang.reflect.Modifier.isFinal(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.FINAL));
		if (java.lang.reflect.Modifier.isNative(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.NATIVE));
		if (java.lang.reflect.Modifier.isPrivate(mod))
	   		modifier.add(ModifierInfo.valueOf(ModifierInfo.PRIVATE));
		if (java.lang.reflect.Modifier.isProtected(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.PROTECTED));
		if (java.lang.reflect.Modifier.isPublic(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.PUBLIC));
		if (java.lang.reflect.Modifier.isStatic(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.STATIC));
		if (java.lang.reflect.Modifier.isSynchronized(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.SYNCHRONIZED));
		if (java.lang.reflect.Modifier.isTransient(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.TRANSIENT));
		if (java.lang.reflect.Modifier.isVolatile(mod))
	    	modifier.add(ModifierInfo.valueOf(ModifierInfo.VOLATILE));

		return	(ModifierInfo[]) modifier.toArray(new ModifierInfo[modifier.size()]);
    }

}

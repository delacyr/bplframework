layer typesys;

import java.util.HashMap;
import java.util.Map;

/**
 * Java Modifikatoren.
 * <p>
 * Initialisierung erfolgt über die statische Fabrikmethode
 * {@link ModifierInfo#valueOf(String)}. Für jeden Modifikator wird
 * immer die selbe Instanz zurückgeliefert.
 * 
 * @layer typesys
 * @author Stephan Klapproth
 * 
 */
public class ModifierInfo {

    public static final String PUBLIC = "public";
    public static final String PROTECTED = "protected";
    public static final String PRIVATE = "private";
    public static final String FINAL = "final";
    public static final String STATIC = "static";
    public static final String ABSTRACT = "abstract";
    public static final String SYNCHRONIZED = "synchronized";
    public static final String VOLATILE = "volatile";
    public static final String TRANSIENT = "transient";
    public static final String NATIVE = "native";
    public static final String OVERRIDES = "overrides";

    private static Map modifier = new HashMap();

    private String value;

    /**
     * Privater Konstruktor, so dass von außen keine neuen Instanzen erzeugt
     * werden können.
     * 
     * @param aValue
     *            Bezeichnung des Modifiers.
     */
    private ModifierInfo(String aValue) {
        value = aValue;
    }

    private static void add(String aValue) {
        modifier.put(aValue, new ModifierInfo(aValue));
    }

    static {
        add(PUBLIC);
        add(PROTECTED);
        add(PRIVATE);
        add(STATIC);
        add(FINAL);
        add(ABSTRACT);
        add(SYNCHRONIZED);
        add(VOLATILE);
        add(TRANSIENT);
        add(NATIVE);
        add(OVERRIDES);
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return value;
    }

    /**
     * Statische Fabrikmethode, um die <code>ModifierInfo</code> Instanz für den Modifier <code>aModifier</code> zu erhalten.
     * @param aModifier
     * @return
     */
    public static ModifierInfo valueOf(String aModifier) {
        if (!modifier.containsKey(aModifier)) {
            throw new IllegalArgumentException(aModifier
                    + " is not a valid modifier!");
        }
        return (ModifierInfo) modifier.get(aModifier);
    }
}

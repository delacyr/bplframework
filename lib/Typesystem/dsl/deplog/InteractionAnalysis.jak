layer deplog;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * @author Stephan Klapproth
 * 
 */
public class InteractionAnalysis {

    private TypeSystem ts;
    private LayerInfo[] _layer;
    private Map interactions = new HashMap();

    private Map interactionCounter = new HashMap();

    private PrintStream out = System.out;

    public InteractionAnalysis(TypeSystem aTs) {
        ts = aTs;
        _layer = ts.getLayer();
        iterateThroughLayer();
    }

    private void addInteraction(Interaction anInteraction) {
        String tmpKey = getKey(anInteraction);
        if (!interactions.containsKey(tmpKey)) {
            interactions.put(tmpKey, new ArrayList());
        }
        ((List) interactions.get(tmpKey)).add(anInteraction);

        String tmpKind = anInteraction.getClass().getName();
        if (!interactionCounter.containsKey(tmpKind)) {
            interactionCounter.put(tmpKind, new Integer(0));
        }
        interactionCounter.put(tmpKind, new Integer(
                ((Integer) interactionCounter.get(tmpKind)).intValue() + 1));
    }

    private String getKey(Interaction anInteraction) {
        return anInteraction.modifiedFeature().getName() + "-"
                + anInteraction.modifyingFeature().getName();
    }

    private List getInteractionsAsList() {
        List tmpResult = new ArrayList();
        for (Iterator i = interactions.values().iterator(); i.hasNext();) {
            tmpResult.addAll((List) i.next());
        }
        return tmpResult;
    }

    public Interaction[] getInteractions() {
        return (Interaction[]) getInteractionsAsList().toArray(
                new Interaction[interactions.size()]);
    }

    public void printInteractions() {
        for (Iterator i = getInteractionsAsList().iterator(); i.hasNext();) {
            out.println(i.next());
        }
    }

    public void printStats() {
        for (Iterator i = interactions.keySet().iterator(); i.hasNext();) {
            String tmpKey = (String) i.next();
            out.println(tmpKey + " Anzahl: "
                    + ((List) interactions.get(tmpKey)).size());
        }
        out.println();
        for (Iterator i = interactionCounter.keySet().iterator(); i.hasNext();) {
            String tmpKey = (String) i.next();
            out.println(tmpKey + " Anzahl: " + interactionCounter.get(tmpKey));
        }
    }

    private void iterateThroughLayer() {
        for (int i = _layer.length - 1; i >= 0; i--) {
            iterateThroughClasses(_layer[i]);
        }
    }

    private void iterateThroughClasses(LayerInfo aLayer) {
        ClassInfo[] tmpClasses = aLayer.getClasses();
        for (int i = 0; i < tmpClasses.length; i++) {
            iterateThroughMethodInvocations((ClassInfoAst) tmpClasses[i]);
            iterateThroughFieldAccesses((ClassInfoAst) tmpClasses[i]);
            iterateThroughClassReferences((ClassInfoAst) tmpClasses[i]);
            iterateThroughFields((ClassInfoAst) tmpClasses[i]);
            iterateThroughMethods((ClassInfoAst) tmpClasses[i]);

            forwardInteraction(tmpClasses[i]);
            interfaceInteraction(tmpClasses[i]);

        }
    }

    private void iterateThroughMethods(ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getMethods().length; i++) {
            parameterTypeInteraction(aClass.getMethods()[i]);
        }
    }

    private void iterateThroughFields(ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getFields().length; i++) {
            fieldTypeInteraction(aClass.getFields()[i]);
        }
    }

    private void iterateThroughClassReferences(ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getClassReferences().length; i++) {
            backwardInteraction(aClass.getClassReferences()[i]);
        }
    }

    private void iterateThroughMethodInvocations(ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getMethodInvocations().length; i++) {
            forwardInteraction(aClass.getMethodInvocations()[i]);
            backwardInteraction(aClass.getMethodInvocations()[i]);
        }

    }

    private void iterateThroughFieldAccesses(ClassInfoAst aClass) {
        for (int i = 0; i < aClass.getFieldAccesses().length; i++) {
            backwardInteraction(aClass.getFieldAccesses()[i]);
        }
    }

    // ****************************************************************************************

    private void interfaceInteraction(ClassInfo aClass) {
        for (int i = 0; i < aClass.getInterfaces().length; i++) {
            ClassInfo tmpInterface = TypesysUtil.getBaseClass(aClass
                    .getInterfaces()[i]);
            if (!(tmpInterface instanceof ClassInfoAst)) {
                continue;
            }
            LayerInfo tmpModified = TypesysUtil.getLayer(aClass);
            LayerInfo tmpModifying = TypesysUtil.getLayer(tmpInterface);

            if (!tmpModified.equals(tmpModifying)) {
                addInteraction(new InterfaceInteraction(tmpModified,
                        tmpModifying, aClass));
            }

        }

    }

    private void parameterTypeInteraction(MethodInfo aMethod) {
        for (int i = 0; i < aMethod.getParameters().length; i++) {
            if (!(aMethod.getParameters()[i] instanceof ClassInfoAst)) {
                continue;
            }

            ClassInfo tmpParam = TypesysUtil.getBaseClass(aMethod
                    .getParameters()[i]);
            LayerInfo tmpModified = TypesysUtil.getLayer(aMethod);
            LayerInfo tmpModifying = TypesysUtil.getLayer(tmpParam);
            if (!tmpModified.equals(tmpModifying)) {
                addInteraction(new ParameterTypeInteraction(tmpModified,
                        tmpModifying, aMethod));
            }
        }
    }

    private void fieldTypeInteraction(FieldInfo aField) {
        if (!(aField.getType() instanceof ClassInfoAst)) {
            return;
        }
        LayerInfo tmpModified = TypesysUtil.getLayer(aField.getContext());
        LayerInfo tmpModifying = TypesysUtil.getLayer(TypesysUtil
                .getBaseClass(aField.getType()));

        if (tmpModified.equals(tmpModifying)) {
            return;
        }

        addInteraction(new AttributeTypeInteraction(tmpModified, tmpModifying,
                aField));
    }

    private void backwardInteraction(FieldAccess anAccess) {
        FieldInfo tmpField = anAccess.getField();
        if (!(tmpField instanceof FieldInfoAst)) {
            return;
        }
        LayerInfo tmpModified = TypesysUtil.getLayer(anAccess.getContext());
        LayerInfo tmpModifying = TypesysUtil.getLayer(tmpField.getContext());

        if (tmpModified.equals(tmpModifying)) {
            return;
        }
        addInteraction(new ReferenceInteraction(tmpModified, tmpModifying,
                anAccess));
    }

    private void backwardInteraction(ClassReference aClassReference) {

        ClassInfo tmpReferenced = TypesysUtil.getBaseClass(aClassReference
                .getReferencedClass());
        if (!(tmpReferenced instanceof ClassInfoAst)) {
            return;
        }
        LayerInfo tmpModified = TypesysUtil.getLayer(aClassReference
                .getContext());
        LayerInfo tmpModifying = TypesysUtil.getLayer(tmpReferenced);
        if (!tmpModified.equals(tmpModifying)) {
            addInteraction(new ReferenceInteraction(tmpModified, tmpModifying,
                    aClassReference));
        }
    }

    private void backwardInteraction(MethodInvocation anInvocation) {
        MethodInfo tmpCalled = anInvocation.getMethod();
        if (!(tmpCalled instanceof MethodInfoAst)) {
            return;
        }

        Scope tmpSourceOfCall = anInvocation.getContext();
        if (!(tmpSourceOfCall instanceof ClassInfoAst)) {
            if (isForwardInteraction(tmpCalled,
                    getParentMethod(tmpSourceOfCall))) {
                return;
            }
        }
        tmpCalled = findIntroductionOf((MethodInfoAst) tmpCalled);
        LayerInfo tmpModified = TypesysUtil.getLayer(tmpSourceOfCall);
        LayerInfo tmpModifying = TypesysUtil.getLayer(tmpCalled);

        if (tmpModified.equals(tmpModifying)) {
            return;
        }
        addInteraction(new ReferenceInteraction(tmpModified, tmpModifying,
                anInvocation));
    }

    private void forwardInteraction(MethodInvocation anInvocation) {
        MethodInfo tmpCalled = anInvocation.getMethod();
        if (!(tmpCalled instanceof MethodInfoAst)) {
            return;
        }

        Scope tmpSourceOfCall = anInvocation.getContext();
        if (tmpSourceOfCall instanceof ClassInfoAst) {
            return;
        }

        MethodInfoAst tmpCallingMethod = getParentMethod(tmpSourceOfCall);
        if (!isForwardInteraction(tmpCalled, tmpCallingMethod)) {
            return;
        }
        MethodInfo tmpIntroduction = findIntroductionOf((MethodInfoAst) tmpCalled);
        addInteraction(new ForwardInteraction(TypesysUtil
                .getLayer(tmpIntroduction), TypesysUtil
                .getLayer(tmpCallingMethod), tmpCallingMethod));
    }

    private boolean isForwardInteraction(MethodInfo aMethod1,
            MethodInfo aMethod2) {
        if (TypesysUtil.getLayer(aMethod1).equals(
                TypesysUtil.getLayer(aMethod2))) {
            return false;
        }
        if (!TypesysUtil.getDeclaringClass((Scope) aMethod1).getName().equals(
                TypesysUtil.getDeclaringClass((Scope) aMethod2).getName())) {
            return false;
        }
        if (!aMethod1.signature().equals(aMethod2.signature())) {
            return false;
        }
        return true;
    }

    private MethodInfoAst getParentMethod(Scope aScope) {
        Scope tmpScope = aScope;
        while (!(tmpScope instanceof MethodInfoAst) && tmpScope != null) {
            tmpScope = tmpScope.getContext();
        }
        return (MethodInfoAst) tmpScope;
    }

    // Klassen Forward-Interaktionen (Beziehung zw. Basisklasse und
    // Verfeinerung)
    private void forwardInteraction(ClassInfo aClass) {
        if (!(aClass instanceof RefinementInfoAst)) {
            return;
        }
        ClassInfo tmpBase = TypesysUtil.getBaseClass(aClass);
        addInteraction(new ForwardInteraction((LayerInfo) tmpBase.getContext(),
                (LayerInfo) aClass.getContext(), aClass));
    }

    private MethodInfo findIntroductionOf(MethodInfoAst aMethod) {
        ClassInfoAst tmpClass = (ClassInfoAst) aMethod.getContext();

        // Klasse der Methode ist eine Basisklasse
        if (!(tmpClass instanceof RefinementInfoAst)) {
            return aMethod;
        }
        // Klasse der Methode ist ein Refinement
        ClassInfoAst tmpSuper = (ClassInfoAst) tmpClass.getSuperClass();
        MethodInfo tmpMethod = tmpSuper.findMethod(aMethod.getName(), aMethod
                .getParameters());
        return (tmpMethod != null) ? findIntroductionOf((MethodInfoAst) tmpMethod)
                : aMethod;
    }
}

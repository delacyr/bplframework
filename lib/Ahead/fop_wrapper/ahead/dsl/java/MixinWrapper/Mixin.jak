layer mixinwrapper;

import Jakarta.util.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Hashtable;
import java.util.List;
import java.util.Stack;
import java.util.EmptyStackException;
import java.util.Vector;

import Jakarta.util.FixDosOutputStream;
import Jakarta.util.Util;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashSet;

import java.util.*;
import java.io.*;

/**
 *
 * @author Tom Brosch
 *
 * This class encapsulates the main functionality of the Main class from Mixin.
 * It uses the JTSParseTree to parse all jakfiles that will be composed and compose
 * them to the final jakfile. The error handling was changed. Instead of terminating
 * the program an exception is thrown when an error occurs.
 *
 */


public class Mixin extends Main{
		
	/** Aspect Name is the name of the current configuration - the name of the equation file
	 *	The Array asts is an array of type AST_Programs, it is used to return the ASTs that
	 *	were generated during the build sequence
	 */
	public void compose(String fileName, String srcBase, String[] infiles, String aspectName, AST_Program[] composedASTs, AST_Program[] ownASTs) throws ExtendedParseException {
	
		StringWriter report = new StringWriter();
	
		JTSParseTree  base = null;
        JTSParseTree  ext  = null;
        
		JTSParseTree.resetCounters();
		JTSParseTree.setReportStream( new PrintWriter( report ) );
		setModelDirectory(srcBase);
		setBaseURI(".");
		int fileCounter = 0;
		if (infiles.length != composedASTs.length || infiles.length != ownASTs.length)
			throw new RuntimeException("length mismatch of infiles and asts array");
		
		String currentFile = "";
		try {
            base = new  JTSParseTree( infiles[0] );
            ownASTs[fileCounter] = (AST_Program)base.root.clone();
            composedASTs[fileCounter++] = (AST_Program)base.root.clone();
        } catch (ParseException e) {
			throw new ExtendedParseException(infiles[0], e);
        } catch (Throwable t) {
            throw new ExtendedParseException(t.getMessage());
        }
        
        try {
            for ( int i=1; i<infiles.length; i++ ) {
            	  currentFile = infiles[i];
                ext  = new  JTSParseTree( infiles[i] );
                ownASTs[fileCounter] = (AST_Program)ext.root.clone();
                base.compose( ext );
            		composedASTs[fileCounter++] = (AST_Program)base.root.clone();
            }
        }
        catch (ParseException e) {
            throw new ExtendedParseException(currentFile, e);
        } catch (Throwable t) {
            throw new ExtendedParseException(t.getMessage());
        }
        
        base.setAspectName( aspectName );
        
        // Step 6: do cleanup 

        if ( base.errorCount() == 0 ) {
            // we had no errors, maybe some warnings
            AstProperties props = AstProperties.open( fileName );
            base.root.reduce2java( props );
            props.close();

            if ( fileName == null )
                base.print();
            else {
                base.print2file( fileName );
            }

            System.out.flush();
        }
        else {
            //AstNode.toolReport( base.errorCountString() );
            throw new ExtendedParseException(report.toString());
        }
	}
}
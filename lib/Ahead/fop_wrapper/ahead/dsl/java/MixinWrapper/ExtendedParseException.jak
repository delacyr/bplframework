layer mixinwrapper;

import Jakarta.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Tom Brosch
 *
 * This class extends the ParseException that is thrown due to
 * a syntax error with the file information that invokes the exception.
 *
 */

public class ExtendedParseException extends Exception{

	private String filename = null;
	
	private String shortMessage = null;
	
	private int lineNumber = -1;

	private String fullMessage = null;
	  
	public ExtendedParseException(String message) {
		//input example: "mixin: C:\Documents and Settings\Don Batory\Desktop\runtime-EclipseApplication\Example_HelloWorld\src\Hello\Main.jak: Error layer declaration expected; remove package declaration"
		Pattern pattern = Pattern.compile("[^:]+:\\s([^:]+(?::[^\\s][^:]*)?)(?::(\\d+))?:\\s(.+)"); //".+: (.+): (.+)");
		Matcher matcher = pattern.matcher(message);
		if (matcher.find()) {
			this.filename = matcher.group(1);
			if (matcher.group(2) != null) {
				try {
					lineNumber = Integer.parseInt(matcher.group(2));
				} catch (NumberFormatException e) {
				}
			}
		  	shortMessage = matcher.group(3);
		}
	  	fullMessage = message;
	}
	  
	public ExtendedParseException(String filename, ParseException e) {
		this.filename = filename;
	  	extractMessages(e);
	}
	  
  	private void extractMessages(ParseException e) {
		lineNumber = e.currentToken.next.beginLine;
		Token token = e.currentToken.next;
		if (token.kind == 0)
			shortMessage = "Unexpected end of file";
		else
			shortMessage = "'" + add_escapes(token.image)
					+ "' was not expected at this point";

		fullMessage = e.getMessage();
	}
	  
	public String getFilename() {
		return filename;
	}
	  
	public String getShortMessage() {
		return shortMessage;
	}
	  
	public int getLineNumber() {
		return lineNumber;
	}
	  
	public String getFullMessage() {
		return fullMessage;
	}
	  
	/**
	 * Used to convert raw characters to their escaped version when these raw
	 * version cannot be used as part of an ASCII string literal.
	 */
	private static String add_escapes(String str) {
		StringBuffer retval = new StringBuffer();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
			case 0:
				continue;
			case '\b':
				retval.append("\\b");
				continue;
			case '\t':
				retval.append("\\t");
				continue;
			case '\n':
				retval.append("\\n");
				continue;
			case '\f':
				retval.append("\\f");
				continue;
			case '\r':
				retval.append("\\r");
				continue;
			case '\"':
				retval.append("\\\"");
				continue;
			case '\'':
				retval.append("\\\'");
				continue;
			case '\\':
				retval.append("\\\\");
				continue;
			default:
				if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
					String s = "0000" + Integer.toString(ch, 16);
					retval.append("\\u"
							+ s.substring(s.length() - 4, s.length()));
				} else {
					retval.append(ch);
				}
				continue;
			}
		}
		return retval.toString();
	}

}
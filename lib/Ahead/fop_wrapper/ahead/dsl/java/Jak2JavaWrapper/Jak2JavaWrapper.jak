layer jak2javawrapper;

import java.io.File;
import java.io.FileInputStream;

/**
 * This class overwrites methods in the main class of jak2java that contain
 * System.exit() calls.
 *
 * @author Tom Brosch
 * @author Thomas Thüm
 *
 */

public class Jak2JavaWrapper extends Main {

	public void reduce2Java(File jakFile) {
		AstNode root = null;
		FileInputStream fis;
		
		// Umwandlung erfolgt über AST
		// Zuerst AST aufbauen für die Jak-Datei (createAST)
		// Dann die reduce2Java-Methode nutzen um aus der Jak-Datei
		// eine Java-Datei zu machen. Dazu muss ein ASTProperites Objekt
		// übergeben werden. Dieses speichert das PrintWriter-Objekt,
		// welches der AST nutzt um sein Ergebnis zu sichern
		
		System.out.println("reduce: "+jakFile.toString());
		try {
				fis = new FileInputStream( jakFile );
            Parser parser =  Parser.getInstance( fis ) ;
            root = parser.parseAll() ;
        } catch ( ParseException e ) {
            System.out.println("Fehler beim parsen");
            e.printStackTrace();
            root = null;
        } catch (Exception ex) {
        		System.out.println("Fehler");
        		ex.printStackTrace();
        }
        
        if( root != null ) {
        		String javaName = jakFile.getAbsolutePath();
        		int pos = javaName.lastIndexOf(".");
        		if( pos >= 0 )
        			javaName = javaName.substring(0,pos);
        		javaName+= ".java";
        		AstProperties props =  AstProperties.open( javaName );
        		root.reduce2java( props );
        		props.close();
        }
	}

}